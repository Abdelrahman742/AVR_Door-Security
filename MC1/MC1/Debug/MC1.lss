
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00002e20  00002eb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  008000ea  008000ea  00002f3e  2**0
                  ALLOC
  3 .stab         00002b80  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000122f  00000000  00000000  00005ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a880  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b43b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3f 09 	call	0x127e	; 0x127e <main>
      8a:	0c 94 0e 17 	jmp	0x2e1c	; 0x2e1c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ed       	ldi	r26, 0xD5	; 213
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ed       	ldi	r24, 0xD5	; 213
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ba 16 	jmp	0x2d74	; 0x2d74 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 be 16 	jmp	0x2d7c	; 0x2d7c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Enter_Password>:
uint8 f_OPEN_DOOR =0; /* Flag When User Want To Open Door */
uint8 f_CHANGE_PASSWORD =0; /* Flag When User Want To Change Password */
/****************************Functions*************************************/
/**************************************************************************/
void Enter_Password(uint8 *password)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	61 97       	sbiw	r28, 0x11	; 17
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
     b5e:	99 8b       	std	Y+17, r25	; 0x11
     b60:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i=0;i<10;i++)
     b62:	1f 86       	std	Y+15, r1	; 0x0f
     b64:	90 c0       	rjmp	.+288    	; 0xc86 <Enter_Password+0x140>
	{
		password[i]= KEYPAD_getPressedKey();
     b66:	8f 85       	ldd	r24, Y+15	; 0x0f
     b68:	28 2f       	mov	r18, r24
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	88 89       	ldd	r24, Y+16	; 0x10
     b6e:	99 89       	ldd	r25, Y+17	; 0x11
     b70:	8c 01       	movw	r16, r24
     b72:	02 0f       	add	r16, r18
     b74:	13 1f       	adc	r17, r19
     b76:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <KEYPAD_getPressedKey>
     b7a:	f8 01       	movw	r30, r16
     b7c:	80 83       	st	Z, r24
		if(password[i] == '=')
     b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b80:	28 2f       	mov	r18, r24
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	88 89       	ldd	r24, Y+16	; 0x10
     b86:	99 89       	ldd	r25, Y+17	; 0x11
     b88:	fc 01       	movw	r30, r24
     b8a:	e2 0f       	add	r30, r18
     b8c:	f3 1f       	adc	r31, r19
     b8e:	80 81       	ld	r24, Z
     b90:	8d 33       	cpi	r24, 0x3D	; 61
     b92:	09 f4       	brne	.+2      	; 0xb96 <Enter_Password+0x50>
     b94:	7c c0       	rjmp	.+248    	; 0xc8e <Enter_Password+0x148>
		{
			break;
		}
		else
		{
			LCD_displayCharacter('*');
     b96:	8a e2       	ldi	r24, 0x2A	; 42
     b98:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_displayCharacter>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	aa ef       	ldi	r26, 0xFA	; 250
     ba2:	b3 e4       	ldi	r27, 0x43	; 67
     ba4:	8b 87       	std	Y+11, r24	; 0x0b
     ba6:	9c 87       	std	Y+12, r25	; 0x0c
     ba8:	ad 87       	std	Y+13, r26	; 0x0d
     baa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bac:	6b 85       	ldd	r22, Y+11	; 0x0b
     bae:	7c 85       	ldd	r23, Y+12	; 0x0c
     bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bb2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bb4:	20 e0       	ldi	r18, 0x00	; 0
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	4a ef       	ldi	r20, 0xFA	; 250
     bba:	54 e4       	ldi	r21, 0x44	; 68
     bbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc0:	dc 01       	movw	r26, r24
     bc2:	cb 01       	movw	r24, r22
     bc4:	8f 83       	std	Y+7, r24	; 0x07
     bc6:	98 87       	std	Y+8, r25	; 0x08
     bc8:	a9 87       	std	Y+9, r26	; 0x09
     bca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bcc:	6f 81       	ldd	r22, Y+7	; 0x07
     bce:	78 85       	ldd	r23, Y+8	; 0x08
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e8       	ldi	r20, 0x80	; 128
     bda:	5f e3       	ldi	r21, 0x3F	; 63
     bdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be0:	88 23       	and	r24, r24
     be2:	2c f4       	brge	.+10     	; 0xbee <Enter_Password+0xa8>
		__ticks = 1;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	9e 83       	std	Y+6, r25	; 0x06
     bea:	8d 83       	std	Y+5, r24	; 0x05
     bec:	3f c0       	rjmp	.+126    	; 0xc6c <Enter_Password+0x126>
	else if (__tmp > 65535)
     bee:	6f 81       	ldd	r22, Y+7	; 0x07
     bf0:	78 85       	ldd	r23, Y+8	; 0x08
     bf2:	89 85       	ldd	r24, Y+9	; 0x09
     bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     bf6:	20 e0       	ldi	r18, 0x00	; 0
     bf8:	3f ef       	ldi	r19, 0xFF	; 255
     bfa:	4f e7       	ldi	r20, 0x7F	; 127
     bfc:	57 e4       	ldi	r21, 0x47	; 71
     bfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c02:	18 16       	cp	r1, r24
     c04:	4c f5       	brge	.+82     	; 0xc58 <Enter_Password+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c06:	6b 85       	ldd	r22, Y+11	; 0x0b
     c08:	7c 85       	ldd	r23, Y+12	; 0x0c
     c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e2       	ldi	r20, 0x20	; 32
     c14:	51 e4       	ldi	r21, 0x41	; 65
     c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1a:	dc 01       	movw	r26, r24
     c1c:	cb 01       	movw	r24, r22
     c1e:	bc 01       	movw	r22, r24
     c20:	cd 01       	movw	r24, r26
     c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c26:	dc 01       	movw	r26, r24
     c28:	cb 01       	movw	r24, r22
     c2a:	9e 83       	std	Y+6, r25	; 0x06
     c2c:	8d 83       	std	Y+5, r24	; 0x05
     c2e:	0f c0       	rjmp	.+30     	; 0xc4e <Enter_Password+0x108>
     c30:	88 ec       	ldi	r24, 0xC8	; 200
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	9c 83       	std	Y+4, r25	; 0x04
     c36:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c38:	8b 81       	ldd	r24, Y+3	; 0x03
     c3a:	9c 81       	ldd	r25, Y+4	; 0x04
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <Enter_Password+0xf6>
     c40:	9c 83       	std	Y+4, r25	; 0x04
     c42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	9e 81       	ldd	r25, Y+6	; 0x06
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	9e 83       	std	Y+6, r25	; 0x06
     c4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	00 97       	sbiw	r24, 0x00	; 0
     c54:	69 f7       	brne	.-38     	; 0xc30 <Enter_Password+0xea>
     c56:	14 c0       	rjmp	.+40     	; 0xc80 <Enter_Password+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c58:	6f 81       	ldd	r22, Y+7	; 0x07
     c5a:	78 85       	ldd	r23, Y+8	; 0x08
     c5c:	89 85       	ldd	r24, Y+9	; 0x09
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c64:	dc 01       	movw	r26, r24
     c66:	cb 01       	movw	r24, r22
     c68:	9e 83       	std	Y+6, r25	; 0x06
     c6a:	8d 83       	std	Y+5, r24	; 0x05
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	9a 83       	std	Y+2, r25	; 0x02
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <Enter_Password+0x132>
     c7c:	9a 83       	std	Y+2, r25	; 0x02
     c7e:	89 83       	std	Y+1, r24	; 0x01
/****************************Functions*************************************/
/**************************************************************************/
void Enter_Password(uint8 *password)
{
	uint8 i;
	for(i=0;i<10;i++)
     c80:	8f 85       	ldd	r24, Y+15	; 0x0f
     c82:	8f 5f       	subi	r24, 0xFF	; 255
     c84:	8f 87       	std	Y+15, r24	; 0x0f
     c86:	8f 85       	ldd	r24, Y+15	; 0x0f
     c88:	8a 30       	cpi	r24, 0x0A	; 10
     c8a:	08 f4       	brcc	.+2      	; 0xc8e <Enter_Password+0x148>
     c8c:	6c cf       	rjmp	.-296    	; 0xb66 <Enter_Password+0x20>
		{
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
	}
}
     c8e:	61 96       	adiw	r28, 0x11	; 17
     c90:	0f b6       	in	r0, 0x3f	; 63
     c92:	f8 94       	cli
     c94:	de bf       	out	0x3e, r29	; 62
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	cd bf       	out	0x3d, r28	; 61
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	1f 91       	pop	r17
     ca0:	0f 91       	pop	r16
     ca2:	08 95       	ret

00000ca4 <sendPasswordByUART>:

void sendPasswordByUART(uint8 *PASSWORD)
{
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	00 d0       	rcall	.+0      	; 0xcaa <sendPasswordByUART+0x6>
     caa:	0f 92       	push	r0
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
     cb0:	9b 83       	std	Y+3, r25	; 0x03
     cb2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++) /* Sending Password */
     cb4:	19 82       	std	Y+1, r1	; 0x01
     cb6:	0e c0       	rjmp	.+28     	; 0xcd4 <sendPasswordByUART+0x30>
	{
		UART_sendByte(PASSWORD[i]);
     cb8:	89 81       	ldd	r24, Y+1	; 0x01
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	9b 81       	ldd	r25, Y+3	; 0x03
     cc2:	fc 01       	movw	r30, r24
     cc4:	e2 0f       	add	r30, r18
     cc6:	f3 1f       	adc	r31, r19
     cc8:	80 81       	ld	r24, Z
     cca:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <UART_sendByte>
}

void sendPasswordByUART(uint8 *PASSWORD)
{
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++) /* Sending Password */
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	89 83       	std	Y+1, r24	; 0x01
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	85 30       	cpi	r24, 0x05	; 5
     cd8:	78 f3       	brcs	.-34     	; 0xcb8 <sendPasswordByUART+0x14>
	{
		UART_sendByte(PASSWORD[i]);
	}
}
     cda:	0f 90       	pop	r0
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <STEP_1>:
void STEP_1()
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(GET_READY);
     cee:	80 e1       	ldi	r24, 0x10	; 16
     cf0:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <UART_sendByte>
	LCD_displayString("plz enter pass:");
     cf4:	80 e6       	ldi	r24, 0x60	; 96
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_displayString>
	LCD_moveCursor(1,0);
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_moveCursor>

	Enter_Password(password_1);
     d04:	8a ee       	ldi	r24, 0xEA	; 234
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Password>

	LCD_clearScreen();
     d0c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"plz re-enter the");
     d10:	20 e7       	ldi	r18, 0x70	; 112
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	a9 01       	movw	r20, r18
     d1a:	0e 94 27 14 	call	0x284e	; 0x284e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"same pass:");
     d1e:	21 e8       	ldi	r18, 0x81	; 129
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	a9 01       	movw	r20, r18
     d28:	0e 94 27 14 	call	0x284e	; 0x284e <LCD_displayStringRowColumn>
	LCD_moveCursor(1,10);
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	6a e0       	ldi	r22, 0x0A	; 10
     d30:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_moveCursor>

	Enter_Password(password_2);
     d34:	84 ef       	ldi	r24, 0xF4	; 244
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Password>

	sendPasswordByUART(password_1);
     d3c:	8a ee       	ldi	r24, 0xEA	; 234
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 52 06 	call	0xca4	; 0xca4 <sendPasswordByUART>
	sendPasswordByUART(password_2);
     d44:	84 ef       	ldi	r24, 0xF4	; 244
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 52 06 	call	0xca4	; 0xca4 <sendPasswordByUART>

	while(1)
	{
		if(UART_recieveByte() == '#')
     d4c:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_recieveByte>
     d50:	83 32       	cpi	r24, 0x23	; 35
     d52:	31 f4       	brne	.+12     	; 0xd60 <STEP_1+0x7a>
		{
			STEP2=1;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 12 01 	sts	0x0112, r24
			STEP1=0;
     d5a:	10 92 dd 00 	sts	0x00DD, r1
     d5e:	05 c0       	rjmp	.+10     	; 0xd6a <STEP_1+0x84>
			break;
		}
		else
		{
			STEP2=0;
     d60:	10 92 12 01 	sts	0x0112, r1
			STEP1=1;
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	80 93 dd 00 	sts	0x00DD, r24
			break;
		}
	}
}
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	08 95       	ret

00000d70 <STEP_2>:
void STEP_2()
{
     d70:	df 93       	push	r29
     d72:	cf 93       	push	r28
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	2f 97       	sbiw	r28, 0x0f	; 15
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	f8 94       	cli
     d7e:	de bf       	out	0x3e, r29	; 62
     d80:	0f be       	out	0x3f, r0	; 63
     d82:	cd bf       	out	0x3d, r28	; 61
	STEP2=0;
     d84:	10 92 12 01 	sts	0x0112, r1
	uint8 Button;
	LCD_displayStringRowColumn(0,0,"+ : Open Door   ");
     d88:	2c e8       	ldi	r18, 0x8C	; 140
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	a9 01       	movw	r20, r18
     d92:	0e 94 27 14 	call	0x284e	; 0x284e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change Pass");
     d96:	2d e9       	ldi	r18, 0x9D	; 157
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	0e 94 27 14 	call	0x284e	; 0x284e <LCD_displayStringRowColumn>
	Button=KEYPAD_getPressedKey();
     da4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <KEYPAD_getPressedKey>
     da8:	8f 87       	std	Y+15, r24	; 0x0f
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	aa ef       	ldi	r26, 0xFA	; 250
     db0:	b3 e4       	ldi	r27, 0x43	; 67
     db2:	8b 87       	std	Y+11, r24	; 0x0b
     db4:	9c 87       	std	Y+12, r25	; 0x0c
     db6:	ad 87       	std	Y+13, r26	; 0x0d
     db8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6b 85       	ldd	r22, Y+11	; 0x0b
     dbc:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbe:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc0:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a ef       	ldi	r20, 0xFA	; 250
     dc8:	54 e4       	ldi	r21, 0x44	; 68
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	8f 83       	std	Y+7, r24	; 0x07
     dd4:	98 87       	std	Y+8, r25	; 0x08
     dd6:	a9 87       	std	Y+9, r26	; 0x09
     dd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dda:	6f 81       	ldd	r22, Y+7	; 0x07
     ddc:	78 85       	ldd	r23, Y+8	; 0x08
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	9a 85       	ldd	r25, Y+10	; 0x0a
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	40 e8       	ldi	r20, 0x80	; 128
     de8:	5f e3       	ldi	r21, 0x3F	; 63
     dea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dee:	88 23       	and	r24, r24
     df0:	2c f4       	brge	.+10     	; 0xdfc <STEP_2+0x8c>
		__ticks = 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	9e 83       	std	Y+6, r25	; 0x06
     df8:	8d 83       	std	Y+5, r24	; 0x05
     dfa:	3f c0       	rjmp	.+126    	; 0xe7a <STEP_2+0x10a>
	else if (__tmp > 65535)
     dfc:	6f 81       	ldd	r22, Y+7	; 0x07
     dfe:	78 85       	ldd	r23, Y+8	; 0x08
     e00:	89 85       	ldd	r24, Y+9	; 0x09
     e02:	9a 85       	ldd	r25, Y+10	; 0x0a
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	3f ef       	ldi	r19, 0xFF	; 255
     e08:	4f e7       	ldi	r20, 0x7F	; 127
     e0a:	57 e4       	ldi	r21, 0x47	; 71
     e0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e10:	18 16       	cp	r1, r24
     e12:	4c f5       	brge	.+82     	; 0xe66 <STEP_2+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e14:	6b 85       	ldd	r22, Y+11	; 0x0b
     e16:	7c 85       	ldd	r23, Y+12	; 0x0c
     e18:	8d 85       	ldd	r24, Y+13	; 0x0d
     e1a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e2       	ldi	r20, 0x20	; 32
     e22:	51 e4       	ldi	r21, 0x41	; 65
     e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	bc 01       	movw	r22, r24
     e2e:	cd 01       	movw	r24, r26
     e30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	9e 83       	std	Y+6, r25	; 0x06
     e3a:	8d 83       	std	Y+5, r24	; 0x05
     e3c:	0f c0       	rjmp	.+30     	; 0xe5c <STEP_2+0xec>
     e3e:	88 ec       	ldi	r24, 0xC8	; 200
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	9c 83       	std	Y+4, r25	; 0x04
     e44:	8b 83       	std	Y+3, r24	; 0x03
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	f1 f7       	brne	.-4      	; 0xe4a <STEP_2+0xda>
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e52:	8d 81       	ldd	r24, Y+5	; 0x05
     e54:	9e 81       	ldd	r25, Y+6	; 0x06
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	69 f7       	brne	.-38     	; 0xe3e <STEP_2+0xce>
     e64:	14 c0       	rjmp	.+40     	; 0xe8e <STEP_2+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e66:	6f 81       	ldd	r22, Y+7	; 0x07
     e68:	78 85       	ldd	r23, Y+8	; 0x08
     e6a:	89 85       	ldd	r24, Y+9	; 0x09
     e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e72:	dc 01       	movw	r26, r24
     e74:	cb 01       	movw	r24, r22
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	f1 f7       	brne	.-4      	; 0xe86 <STEP_2+0x116>
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);

	if(Button == '+')
     e8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e90:	8b 32       	cpi	r24, 0x2B	; 43
     e92:	39 f4       	brne	.+14     	; 0xea2 <STEP_2+0x132>
	{
		UART_sendByte('+');
     e94:	8b e2       	ldi	r24, 0x2B	; 43
     e96:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <UART_sendByte>
		f_OPEN_DOOR=1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 14 01 	sts	0x0114, r24
     ea0:	09 c0       	rjmp	.+18     	; 0xeb4 <STEP_2+0x144>
	}
	else if(Button == '-')
     ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ea4:	8d 32       	cpi	r24, 0x2D	; 45
     ea6:	31 f4       	brne	.+12     	; 0xeb4 <STEP_2+0x144>
	{
		UART_sendByte('-');
     ea8:	8d e2       	ldi	r24, 0x2D	; 45
     eaa:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <UART_sendByte>
		f_CHANGE_PASSWORD=1;
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	80 93 15 01 	sts	0x0115, r24
	}
}
     eb4:	2f 96       	adiw	r28, 0x0f	; 15
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <OPEN>:
void OPEN()
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	aa 97       	sbiw	r28, 0x2a	; 42
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	de bf       	out	0x3e, r29	; 62
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
     eda:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
     ede:	80 e6       	ldi	r24, 0x60	; 96
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_displayString>
	LCD_moveCursor(1,0);
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_moveCursor>

	Enter_Password(Entered_pass); /* Receive The User Password  */
     eee:	8e ef       	ldi	r24, 0xFE	; 254
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Password>

	sendPasswordByUART(Entered_pass); /* Sending User Password To CONTROL_ECU To Check it From EEPROM */
     ef6:	8e ef       	ldi	r24, 0xFE	; 254
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 52 06 	call	0xca4	; 0xca4 <sendPasswordByUART>

	while(1)
	{
		if(UART_recieveByte()=='A') /* UART Of CONTROL_ECU Will Send 'A' If The User Password Similar To EEPROM Password */
     efe:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_recieveByte>
     f02:	81 34       	cpi	r24, 0x41	; 65
     f04:	09 f0       	breq	.+2      	; 0xf08 <OPEN+0x42>
     f06:	6c c1       	rjmp	.+728    	; 0x11e0 <OPEN+0x31a>
		{
			/* Display On The Screen Then Go to Main Option Menu Again */
			LCD_clearScreen();
     f08:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_clearScreen>
			LCD_displayString("Door Is Unlocking");
     f0c:	8d ea       	ldi	r24, 0xAD	; 173
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_displayString>
     f14:	80 e0       	ldi	r24, 0x00	; 0
     f16:	90 e6       	ldi	r25, 0x60	; 96
     f18:	aa e6       	ldi	r26, 0x6A	; 106
     f1a:	b6 e4       	ldi	r27, 0x46	; 70
     f1c:	8f a3       	std	Y+39, r24	; 0x27
     f1e:	98 a7       	std	Y+40, r25	; 0x28
     f20:	a9 a7       	std	Y+41, r26	; 0x29
     f22:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f24:	6f a1       	ldd	r22, Y+39	; 0x27
     f26:	78 a5       	ldd	r23, Y+40	; 0x28
     f28:	89 a5       	ldd	r24, Y+41	; 0x29
     f2a:	9a a5       	ldd	r25, Y+42	; 0x2a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	4a ef       	ldi	r20, 0xFA	; 250
     f32:	54 e4       	ldi	r21, 0x44	; 68
     f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f38:	dc 01       	movw	r26, r24
     f3a:	cb 01       	movw	r24, r22
     f3c:	8b a3       	std	Y+35, r24	; 0x23
     f3e:	9c a3       	std	Y+36, r25	; 0x24
     f40:	ad a3       	std	Y+37, r26	; 0x25
     f42:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f44:	6b a1       	ldd	r22, Y+35	; 0x23
     f46:	7c a1       	ldd	r23, Y+36	; 0x24
     f48:	8d a1       	ldd	r24, Y+37	; 0x25
     f4a:	9e a1       	ldd	r25, Y+38	; 0x26
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e8       	ldi	r20, 0x80	; 128
     f52:	5f e3       	ldi	r21, 0x3F	; 63
     f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f58:	88 23       	and	r24, r24
     f5a:	2c f4       	brge	.+10     	; 0xf66 <OPEN+0xa0>
		__ticks = 1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	9a a3       	std	Y+34, r25	; 0x22
     f62:	89 a3       	std	Y+33, r24	; 0x21
     f64:	3f c0       	rjmp	.+126    	; 0xfe4 <OPEN+0x11e>
	else if (__tmp > 65535)
     f66:	6b a1       	ldd	r22, Y+35	; 0x23
     f68:	7c a1       	ldd	r23, Y+36	; 0x24
     f6a:	8d a1       	ldd	r24, Y+37	; 0x25
     f6c:	9e a1       	ldd	r25, Y+38	; 0x26
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	3f ef       	ldi	r19, 0xFF	; 255
     f72:	4f e7       	ldi	r20, 0x7F	; 127
     f74:	57 e4       	ldi	r21, 0x47	; 71
     f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f7a:	18 16       	cp	r1, r24
     f7c:	4c f5       	brge	.+82     	; 0xfd0 <OPEN+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7e:	6f a1       	ldd	r22, Y+39	; 0x27
     f80:	78 a5       	ldd	r23, Y+40	; 0x28
     f82:	89 a5       	ldd	r24, Y+41	; 0x29
     f84:	9a a5       	ldd	r25, Y+42	; 0x2a
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	40 e2       	ldi	r20, 0x20	; 32
     f8c:	51 e4       	ldi	r21, 0x41	; 65
     f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	bc 01       	movw	r22, r24
     f98:	cd 01       	movw	r24, r26
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9a a3       	std	Y+34, r25	; 0x22
     fa4:	89 a3       	std	Y+33, r24	; 0x21
     fa6:	0f c0       	rjmp	.+30     	; 0xfc6 <OPEN+0x100>
     fa8:	88 ec       	ldi	r24, 0xC8	; 200
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	98 a3       	std	Y+32, r25	; 0x20
     fae:	8f 8f       	std	Y+31, r24	; 0x1f
     fb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fb2:	98 a1       	ldd	r25, Y+32	; 0x20
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <OPEN+0xee>
     fb8:	98 a3       	std	Y+32, r25	; 0x20
     fba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbc:	89 a1       	ldd	r24, Y+33	; 0x21
     fbe:	9a a1       	ldd	r25, Y+34	; 0x22
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	9a a3       	std	Y+34, r25	; 0x22
     fc4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc6:	89 a1       	ldd	r24, Y+33	; 0x21
     fc8:	9a a1       	ldd	r25, Y+34	; 0x22
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	69 f7       	brne	.-38     	; 0xfa8 <OPEN+0xe2>
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <OPEN+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd0:	6b a1       	ldd	r22, Y+35	; 0x23
     fd2:	7c a1       	ldd	r23, Y+36	; 0x24
     fd4:	8d a1       	ldd	r24, Y+37	; 0x25
     fd6:	9e a1       	ldd	r25, Y+38	; 0x26
     fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fdc:	dc 01       	movw	r26, r24
     fde:	cb 01       	movw	r24, r22
     fe0:	9a a3       	std	Y+34, r25	; 0x22
     fe2:	89 a3       	std	Y+33, r24	; 0x21
     fe4:	89 a1       	ldd	r24, Y+33	; 0x21
     fe6:	9a a1       	ldd	r25, Y+34	; 0x22
     fe8:	9e 8f       	std	Y+30, r25	; 0x1e
     fea:	8d 8f       	std	Y+29, r24	; 0x1d
     fec:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fee:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <OPEN+0x12a>
     ff4:	9e 8f       	std	Y+30, r25	; 0x1e
     ff6:	8d 8f       	std	Y+29, r24	; 0x1d
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e8       	ldi	r25, 0x80	; 128
     ffc:	ab e3       	ldi	r26, 0x3B	; 59
     ffe:	b5 e4       	ldi	r27, 0x45	; 69
    1000:	89 8f       	std	Y+25, r24	; 0x19
    1002:	9a 8f       	std	Y+26, r25	; 0x1a
    1004:	ab 8f       	std	Y+27, r26	; 0x1b
    1006:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1008:	69 8d       	ldd	r22, Y+25	; 0x19
    100a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    100c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    100e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	4a ef       	ldi	r20, 0xFA	; 250
    1016:	54 e4       	ldi	r21, 0x44	; 68
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	8d 8b       	std	Y+21, r24	; 0x15
    1022:	9e 8b       	std	Y+22, r25	; 0x16
    1024:	af 8b       	std	Y+23, r26	; 0x17
    1026:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	40 e8       	ldi	r20, 0x80	; 128
    1036:	5f e3       	ldi	r21, 0x3F	; 63
    1038:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    103c:	88 23       	and	r24, r24
    103e:	2c f4       	brge	.+10     	; 0x104a <OPEN+0x184>
		__ticks = 1;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	9c 8b       	std	Y+20, r25	; 0x14
    1046:	8b 8b       	std	Y+19, r24	; 0x13
    1048:	3f c0       	rjmp	.+126    	; 0x10c8 <OPEN+0x202>
	else if (__tmp > 65535)
    104a:	6d 89       	ldd	r22, Y+21	; 0x15
    104c:	7e 89       	ldd	r23, Y+22	; 0x16
    104e:	8f 89       	ldd	r24, Y+23	; 0x17
    1050:	98 8d       	ldd	r25, Y+24	; 0x18
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	3f ef       	ldi	r19, 0xFF	; 255
    1056:	4f e7       	ldi	r20, 0x7F	; 127
    1058:	57 e4       	ldi	r21, 0x47	; 71
    105a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    105e:	18 16       	cp	r1, r24
    1060:	4c f5       	brge	.+82     	; 0x10b4 <OPEN+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1062:	69 8d       	ldd	r22, Y+25	; 0x19
    1064:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1066:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1068:	9c 8d       	ldd	r25, Y+28	; 0x1c
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e2       	ldi	r20, 0x20	; 32
    1070:	51 e4       	ldi	r21, 0x41	; 65
    1072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	bc 01       	movw	r22, r24
    107c:	cd 01       	movw	r24, r26
    107e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9c 8b       	std	Y+20, r25	; 0x14
    1088:	8b 8b       	std	Y+19, r24	; 0x13
    108a:	0f c0       	rjmp	.+30     	; 0x10aa <OPEN+0x1e4>
    108c:	88 ec       	ldi	r24, 0xC8	; 200
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9a 8b       	std	Y+18, r25	; 0x12
    1092:	89 8b       	std	Y+17, r24	; 0x11
    1094:	89 89       	ldd	r24, Y+17	; 0x11
    1096:	9a 89       	ldd	r25, Y+18	; 0x12
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	f1 f7       	brne	.-4      	; 0x1098 <OPEN+0x1d2>
    109c:	9a 8b       	std	Y+18, r25	; 0x12
    109e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	9c 8b       	std	Y+20, r25	; 0x14
    10a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10aa:	8b 89       	ldd	r24, Y+19	; 0x13
    10ac:	9c 89       	ldd	r25, Y+20	; 0x14
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	69 f7       	brne	.-38     	; 0x108c <OPEN+0x1c6>
    10b2:	14 c0       	rjmp	.+40     	; 0x10dc <OPEN+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b4:	6d 89       	ldd	r22, Y+21	; 0x15
    10b6:	7e 89       	ldd	r23, Y+22	; 0x16
    10b8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ba:	98 8d       	ldd	r25, Y+24	; 0x18
    10bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c0:	dc 01       	movw	r26, r24
    10c2:	cb 01       	movw	r24, r22
    10c4:	9c 8b       	std	Y+20, r25	; 0x14
    10c6:	8b 8b       	std	Y+19, r24	; 0x13
    10c8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ca:	9c 89       	ldd	r25, Y+20	; 0x14
    10cc:	98 8b       	std	Y+16, r25	; 0x10
    10ce:	8f 87       	std	Y+15, r24	; 0x0f
    10d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10d2:	98 89       	ldd	r25, Y+16	; 0x10
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	f1 f7       	brne	.-4      	; 0x10d4 <OPEN+0x20e>
    10d8:	98 8b       	std	Y+16, r25	; 0x10
    10da:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(15000);
			_delay_ms(3000);
			LCD_clearScreen();
    10dc:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_clearScreen>
			LCD_displayString("Door is Locking");
    10e0:	8f eb       	ldi	r24, 0xBF	; 191
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_displayString>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e6       	ldi	r25, 0x60	; 96
    10ec:	aa e6       	ldi	r26, 0x6A	; 106
    10ee:	b6 e4       	ldi	r27, 0x46	; 70
    10f0:	8b 87       	std	Y+11, r24	; 0x0b
    10f2:	9c 87       	std	Y+12, r25	; 0x0c
    10f4:	ad 87       	std	Y+13, r26	; 0x0d
    10f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	4a ef       	ldi	r20, 0xFA	; 250
    1106:	54 e4       	ldi	r21, 0x44	; 68
    1108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	8f 83       	std	Y+7, r24	; 0x07
    1112:	98 87       	std	Y+8, r25	; 0x08
    1114:	a9 87       	std	Y+9, r26	; 0x09
    1116:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e8       	ldi	r20, 0x80	; 128
    1126:	5f e3       	ldi	r21, 0x3F	; 63
    1128:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    112c:	88 23       	and	r24, r24
    112e:	2c f4       	brge	.+10     	; 0x113a <OPEN+0x274>
		__ticks = 1;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	9e 83       	std	Y+6, r25	; 0x06
    1136:	8d 83       	std	Y+5, r24	; 0x05
    1138:	3f c0       	rjmp	.+126    	; 0x11b8 <OPEN+0x2f2>
	else if (__tmp > 65535)
    113a:	6f 81       	ldd	r22, Y+7	; 0x07
    113c:	78 85       	ldd	r23, Y+8	; 0x08
    113e:	89 85       	ldd	r24, Y+9	; 0x09
    1140:	9a 85       	ldd	r25, Y+10	; 0x0a
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	3f ef       	ldi	r19, 0xFF	; 255
    1146:	4f e7       	ldi	r20, 0x7F	; 127
    1148:	57 e4       	ldi	r21, 0x47	; 71
    114a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    114e:	18 16       	cp	r1, r24
    1150:	4c f5       	brge	.+82     	; 0x11a4 <OPEN+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1152:	6b 85       	ldd	r22, Y+11	; 0x0b
    1154:	7c 85       	ldd	r23, Y+12	; 0x0c
    1156:	8d 85       	ldd	r24, Y+13	; 0x0d
    1158:	9e 85       	ldd	r25, Y+14	; 0x0e
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e2       	ldi	r20, 0x20	; 32
    1160:	51 e4       	ldi	r21, 0x41	; 65
    1162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	bc 01       	movw	r22, r24
    116c:	cd 01       	movw	r24, r26
    116e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	0f c0       	rjmp	.+30     	; 0x119a <OPEN+0x2d4>
    117c:	88 ec       	ldi	r24, 0xC8	; 200
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	9c 83       	std	Y+4, r25	; 0x04
    1182:	8b 83       	std	Y+3, r24	; 0x03
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	9c 81       	ldd	r25, Y+4	; 0x04
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <OPEN+0x2c2>
    118c:	9c 83       	std	Y+4, r25	; 0x04
    118e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119a:	8d 81       	ldd	r24, Y+5	; 0x05
    119c:	9e 81       	ldd	r25, Y+6	; 0x06
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	69 f7       	brne	.-38     	; 0x117c <OPEN+0x2b6>
    11a2:	14 c0       	rjmp	.+40     	; 0x11cc <OPEN+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a4:	6f 81       	ldd	r22, Y+7	; 0x07
    11a6:	78 85       	ldd	r23, Y+8	; 0x08
    11a8:	89 85       	ldd	r24, Y+9	; 0x09
    11aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	9e 83       	std	Y+6, r25	; 0x06
    11b6:	8d 83       	std	Y+5, r24	; 0x05
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	9a 83       	std	Y+2, r25	; 0x02
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	9a 81       	ldd	r25, Y+2	; 0x02
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	f1 f7       	brne	.-4      	; 0x11c4 <OPEN+0x2fe>
    11c8:	9a 83       	std	Y+2, r25	; 0x02
    11ca:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(15000);
			STEP2=1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	80 93 12 01 	sts	0x0112, r24
			STEP1=0;
    11d2:	10 92 dd 00 	sts	0x00DD, r1
			f_OPEN_DOOR = 0;
    11d6:	10 92 14 01 	sts	0x0114, r1
			f_CHANGE_PASSWORD =0;
    11da:	10 92 15 01 	sts	0x0115, r1
    11de:	10 c0       	rjmp	.+32     	; 0x1200 <OPEN+0x33a>
			break;
		}
		else if(UART_recieveByte()=='B') /* UART Of CONTROL_ECU Will Send 'B' If The User Password Different From EEPROM Password */
    11e0:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_recieveByte>
    11e4:	82 34       	cpi	r24, 0x42	; 66
    11e6:	09 f0       	breq	.+2      	; 0x11ea <OPEN+0x324>
    11e8:	8a ce       	rjmp	.-748    	; 0xefe <OPEN+0x38>
		{
			/* Will Go To Wrong Password Menu */
			f_OPEN_DOOR = 0;
    11ea:	10 92 14 01 	sts	0x0114, r1
			f_CHANGE_PASSWORD =0;
    11ee:	10 92 15 01 	sts	0x0115, r1
			WRONG_PASS = 1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	80 93 13 01 	sts	0x0113, r24
			STEP2=0;
    11f8:	10 92 12 01 	sts	0x0112, r1
			STEP1=0;
    11fc:	10 92 dd 00 	sts	0x00DD, r1
			break;
		}
	}
}
    1200:	aa 96       	adiw	r28, 0x2a	; 42
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <CHANGE>:
void CHANGE()
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    121a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    121e:	80 e6       	ldi	r24, 0x60	; 96
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_displayString>
	LCD_moveCursor(1,0);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_moveCursor>

	Enter_Password(Entered_pass); /* Receive The User Password  */
    122e:	8e ef       	ldi	r24, 0xFE	; 254
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Password>

	sendPasswordByUART(Entered_pass); /* Sending User Password To CONTROL_ECU To Check it From EEPROM */
    1236:	8e ef       	ldi	r24, 0xFE	; 254
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 52 06 	call	0xca4	; 0xca4 <sendPasswordByUART>

	/* Don't Exit While(1) Until You Receive From UART Of CONTROL_ECU */
	while(1)
	{
		if(UART_recieveByte()=='A') /* UART Of CONTROL_ECU Will Send 'A' If The User Password Similar To EEPROM Password */
    123e:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_recieveByte>
    1242:	81 34       	cpi	r24, 0x41	; 65
    1244:	51 f4       	brne	.+20     	; 0x125a <CHANGE+0x48>
		{
			/* Go To Password Menu Again To Enter New Password */
			STEP1=1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 dd 00 	sts	0x00DD, r24
			STEP2=0;
    124c:	10 92 12 01 	sts	0x0112, r1
			f_CHANGE_PASSWORD =0;
    1250:	10 92 15 01 	sts	0x0115, r1
			f_OPEN_DOOR = 0;
    1254:	10 92 14 01 	sts	0x0114, r1
    1258:	0f c0       	rjmp	.+30     	; 0x1278 <CHANGE+0x66>
			break;
		}
		else if(UART_recieveByte()=='B') /* UART Of CONTROL_ECU Will Send 'B' If The User Password Different From EEPROM Password */
    125a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_recieveByte>
    125e:	82 34       	cpi	r24, 0x42	; 66
    1260:	71 f7       	brne	.-36     	; 0x123e <CHANGE+0x2c>
		{
			/* Go To Wrong Password Menu */
			f_OPEN_DOOR = 0;
    1262:	10 92 14 01 	sts	0x0114, r1
			f_CHANGE_PASSWORD =0;
    1266:	10 92 15 01 	sts	0x0115, r1
			WRONG_PASS = 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	80 93 13 01 	sts	0x0113, r24
			STEP2=0;
    1270:	10 92 12 01 	sts	0x0112, r1
			STEP1=0;
    1274:	10 92 dd 00 	sts	0x00DD, r1
			break;
		}
	}
}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <main>:

int main()
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	a3 97       	sbiw	r28, 0x23	; 35
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
	/**************************Initialization***************************/
	Timer1_ConfigType Timer1_Configurations={0,0,clk_1,Normal};
    1292:	ce 01       	movw	r24, r28
    1294:	0f 96       	adiw	r24, 0x0f	; 15
    1296:	9b 8f       	std	Y+27, r25	; 0x1b
    1298:	8a 8f       	std	Y+26, r24	; 0x1a
    129a:	e4 ee       	ldi	r30, 0xE4	; 228
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	fd 8f       	std	Y+29, r31	; 0x1d
    12a0:	ec 8f       	std	Y+28, r30	; 0x1c
    12a2:	f6 e0       	ldi	r31, 0x06	; 6
    12a4:	fe 8f       	std	Y+30, r31	; 0x1e
    12a6:	ec 8d       	ldd	r30, Y+28	; 0x1c
    12a8:	fd 8d       	ldd	r31, Y+29	; 0x1d
    12aa:	00 80       	ld	r0, Z
    12ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    12ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    12b0:	01 96       	adiw	r24, 0x01	; 1
    12b2:	9d 8f       	std	Y+29, r25	; 0x1d
    12b4:	8c 8f       	std	Y+28, r24	; 0x1c
    12b6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    12b8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    12ba:	00 82       	st	Z, r0
    12bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	9b 8f       	std	Y+27, r25	; 0x1b
    12c4:	8a 8f       	std	Y+26, r24	; 0x1a
    12c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c8:	91 50       	subi	r25, 0x01	; 1
    12ca:	9e 8f       	std	Y+30, r25	; 0x1e
    12cc:	ee 8d       	ldd	r30, Y+30	; 0x1e
    12ce:	ee 23       	and	r30, r30
    12d0:	51 f7       	brne	.-44     	; 0x12a6 <main+0x28>
	UART_ConfigType UART_Configurations = {BITS8,EVEN_PARITY,STOP_1BIT,BDR6};
    12d2:	ce 01       	movw	r24, r28
    12d4:	45 96       	adiw	r24, 0x15	; 21
    12d6:	98 a3       	std	Y+32, r25	; 0x20
    12d8:	8f 8f       	std	Y+31, r24	; 0x1f
    12da:	ef ed       	ldi	r30, 0xDF	; 223
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	fa a3       	std	Y+34, r31	; 0x22
    12e0:	e9 a3       	std	Y+33, r30	; 0x21
    12e2:	f5 e0       	ldi	r31, 0x05	; 5
    12e4:	fb a3       	std	Y+35, r31	; 0x23
    12e6:	e9 a1       	ldd	r30, Y+33	; 0x21
    12e8:	fa a1       	ldd	r31, Y+34	; 0x22
    12ea:	00 80       	ld	r0, Z
    12ec:	89 a1       	ldd	r24, Y+33	; 0x21
    12ee:	9a a1       	ldd	r25, Y+34	; 0x22
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	9a a3       	std	Y+34, r25	; 0x22
    12f4:	89 a3       	std	Y+33, r24	; 0x21
    12f6:	ef 8d       	ldd	r30, Y+31	; 0x1f
    12f8:	f8 a1       	ldd	r31, Y+32	; 0x20
    12fa:	00 82       	st	Z, r0
    12fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	98 a3       	std	Y+32, r25	; 0x20
    1304:	8f 8f       	std	Y+31, r24	; 0x1f
    1306:	9b a1       	ldd	r25, Y+35	; 0x23
    1308:	91 50       	subi	r25, 0x01	; 1
    130a:	9b a3       	std	Y+35, r25	; 0x23
    130c:	eb a1       	ldd	r30, Y+35	; 0x23
    130e:	ee 23       	and	r30, r30
    1310:	51 f7       	brne	.-44     	; 0x12e6 <main+0x68>
	SREG |= (1<<7);
    1312:	af e5       	ldi	r26, 0x5F	; 95
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ef e5       	ldi	r30, 0x5F	; 95
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	80 68       	ori	r24, 0x80	; 128
    131e:	8c 93       	st	X, r24
	LCD_init();
    1320:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_init>
	UART_init(&UART_Configurations);
    1324:	ce 01       	movw	r24, r28
    1326:	45 96       	adiw	r24, 0x15	; 21
    1328:	0e 94 5e 15 	call	0x2abc	; 0x2abc <UART_init>
	Timer1_init(&Timer1_Configurations);
    132c:	ce 01       	movw	r24, r28
    132e:	0f 96       	adiw	r24, 0x0f	; 15
    1330:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <Timer1_init>
	/*******************************************************************/

	while(1)
	{
		LCD_clearScreen();
    1334:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_clearScreen>

		if(STEP1 == 1)
    1338:	80 91 dd 00 	lds	r24, 0x00DD
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	11 f4       	brne	.+4      	; 0x1344 <main+0xc6>
		{
			STEP_1();
    1340:	0e 94 73 06 	call	0xce6	; 0xce6 <STEP_1>
		}
		/******************************************Main Options********************************/
		if(STEP2 == 1)
    1344:	80 91 12 01 	lds	r24, 0x0112
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	11 f4       	brne	.+4      	; 0x1350 <main+0xd2>
		{
			STEP_2();
    134c:	0e 94 b8 06 	call	0xd70	; 0xd70 <STEP_2>
		}
		/* Open Door Option */
		if(f_OPEN_DOOR == 1)
    1350:	80 91 14 01 	lds	r24, 0x0114
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	11 f4       	brne	.+4      	; 0x135c <main+0xde>
		{
			OPEN();
    1358:	0e 94 63 07 	call	0xec6	; 0xec6 <OPEN>
		}
		/* Change Password Menu */
		if(f_CHANGE_PASSWORD == 1)
    135c:	80 91 15 01 	lds	r24, 0x0115
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f4       	brne	.+4      	; 0x1368 <main+0xea>
		{
			CHANGE();
    1364:	0e 94 09 09 	call	0x1212	; 0x1212 <CHANGE>
		}
		if(WRONG_PASS == 1)
    1368:	80 91 13 01 	lds	r24, 0x0113
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	11 f7       	brne	.-60     	; 0x1334 <main+0xb6>
		{
			/* Sending This Byte To Synchronize The Two System With Each Other */
			UART_sendByte(GET_READY);
    1370:	80 e1       	ldi	r24, 0x10	; 16
    1372:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <UART_sendByte>
			LCD_clearScreen();
    1376:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_clearScreen>
			LCD_displayString("plz enter pass:");
    137a:	80 e6       	ldi	r24, 0x60	; 96
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_displayString>
			LCD_moveCursor(1,0);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_moveCursor>

			/* Don't Exit While(1) Until You Receive From UART Of CONTROL_ECU */
			while(1)
			{
				Enter_Password(CHECK_PASS); /* Receive The User Password */
    138a:	88 e0       	ldi	r24, 0x08	; 8
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Enter_Password>
				sendPasswordByUART(CHECK_PASS); /* Sending User Password To CONTROL_ECU To Check it From EEPROM */
    1392:	88 e0       	ldi	r24, 0x08	; 8
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 52 06 	call	0xca4	; 0xca4 <sendPasswordByUART>
				if(UART_recieveByte()=='X') /* UART Of CONTROL_ECU Will Send 'X' If The User Password Similar To EEPROM Password */
    139a:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_recieveByte>
    139e:	88 35       	cpi	r24, 0x58	; 88
    13a0:	51 f4       	brne	.+20     	; 0x13b6 <main+0x138>
				{
					/* Go To The Main Option Menu */
					WRONG_PASS = 0;
    13a2:	10 92 13 01 	sts	0x0113, r1
					counter=0;
    13a6:	10 92 de 00 	sts	0x00DE, r1
					STEP2=1;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	80 93 12 01 	sts	0x0112, r24
					STEP1=0;
    13b0:	10 92 dd 00 	sts	0x00DD, r1
    13b4:	10 c0       	rjmp	.+32     	; 0x13d6 <main+0x158>
					break;
				}
				else if(UART_recieveByte()=='Y') /* UART Of CONTROL_ECU Will Send 'Y' If The User Password Different From EEPROM Password */
    13b6:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_recieveByte>
    13ba:	89 35       	cpi	r24, 0x59	; 89
    13bc:	31 f7       	brne	.-52     	; 0x138a <main+0x10c>
				{
					/* You Will Still In Wrong Password Menu And Counter Of Wrong Passwords Will Increment */
					counter++;
    13be:	80 91 de 00 	lds	r24, 0x00DE
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	80 93 de 00 	sts	0x00DE, r24
					WRONG_PASS = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	80 93 13 01 	sts	0x0113, r24
					STEP2=0;
    13ce:	10 92 12 01 	sts	0x0112, r1
					STEP1=0;
    13d2:	10 92 dd 00 	sts	0x00DD, r1
					break;
				}
			}
			if (counter == 3) /*If The User Enters Wrong Password Three Times */
    13d6:	80 91 de 00 	lds	r24, 0x00DE
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <main+0x162>
    13de:	aa cf       	rjmp	.-172    	; 0x1334 <main+0xb6>
			{
				/* Will Display Error And Go To The Main Option Menu Again */
				WRONG_PASS = 0;
    13e0:	10 92 13 01 	sts	0x0113, r1
				counter=0;
    13e4:	10 92 de 00 	sts	0x00DE, r1
				LCD_clearScreen();
    13e8:	0e 94 63 14 	call	0x28c6	; 0x28c6 <LCD_clearScreen>
				LCD_displayString("ERROR");
    13ec:	8f ec       	ldi	r24, 0xCF	; 207
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_displayString>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	90 e6       	ldi	r25, 0x60	; 96
    13f8:	aa e6       	ldi	r26, 0x6A	; 106
    13fa:	b7 e4       	ldi	r27, 0x47	; 71
    13fc:	8b 87       	std	Y+11, r24	; 0x0b
    13fe:	9c 87       	std	Y+12, r25	; 0x0c
    1400:	ad 87       	std	Y+13, r26	; 0x0d
    1402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1404:	6b 85       	ldd	r22, Y+11	; 0x0b
    1406:	7c 85       	ldd	r23, Y+12	; 0x0c
    1408:	8d 85       	ldd	r24, Y+13	; 0x0d
    140a:	9e 85       	ldd	r25, Y+14	; 0x0e
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	4a ef       	ldi	r20, 0xFA	; 250
    1412:	54 e4       	ldi	r21, 0x44	; 68
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	8f 83       	std	Y+7, r24	; 0x07
    141e:	98 87       	std	Y+8, r25	; 0x08
    1420:	a9 87       	std	Y+9, r26	; 0x09
    1422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1424:	6f 81       	ldd	r22, Y+7	; 0x07
    1426:	78 85       	ldd	r23, Y+8	; 0x08
    1428:	89 85       	ldd	r24, Y+9	; 0x09
    142a:	9a 85       	ldd	r25, Y+10	; 0x0a
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e8       	ldi	r20, 0x80	; 128
    1432:	5f e3       	ldi	r21, 0x3F	; 63
    1434:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1438:	88 23       	and	r24, r24
    143a:	2c f4       	brge	.+10     	; 0x1446 <main+0x1c8>
		__ticks = 1;
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9e 83       	std	Y+6, r25	; 0x06
    1442:	8d 83       	std	Y+5, r24	; 0x05
    1444:	3f c0       	rjmp	.+126    	; 0x14c4 <main+0x246>
	else if (__tmp > 65535)
    1446:	6f 81       	ldd	r22, Y+7	; 0x07
    1448:	78 85       	ldd	r23, Y+8	; 0x08
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	9a 85       	ldd	r25, Y+10	; 0x0a
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	3f ef       	ldi	r19, 0xFF	; 255
    1452:	4f e7       	ldi	r20, 0x7F	; 127
    1454:	57 e4       	ldi	r21, 0x47	; 71
    1456:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145a:	18 16       	cp	r1, r24
    145c:	4c f5       	brge	.+82     	; 0x14b0 <main+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1460:	7c 85       	ldd	r23, Y+12	; 0x0c
    1462:	8d 85       	ldd	r24, Y+13	; 0x0d
    1464:	9e 85       	ldd	r25, Y+14	; 0x0e
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e2       	ldi	r20, 0x20	; 32
    146c:	51 e4       	ldi	r21, 0x41	; 65
    146e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	bc 01       	movw	r22, r24
    1478:	cd 01       	movw	r24, r26
    147a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147e:	dc 01       	movw	r26, r24
    1480:	cb 01       	movw	r24, r22
    1482:	9e 83       	std	Y+6, r25	; 0x06
    1484:	8d 83       	std	Y+5, r24	; 0x05
    1486:	0f c0       	rjmp	.+30     	; 0x14a6 <main+0x228>
    1488:	88 ec       	ldi	r24, 0xC8	; 200
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	8b 83       	std	Y+3, r24	; 0x03
    1490:	8b 81       	ldd	r24, Y+3	; 0x03
    1492:	9c 81       	ldd	r25, Y+4	; 0x04
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <main+0x216>
    1498:	9c 83       	std	Y+4, r25	; 0x04
    149a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	9e 83       	std	Y+6, r25	; 0x06
    14a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	69 f7       	brne	.-38     	; 0x1488 <main+0x20a>
    14ae:	14 c0       	rjmp	.+40     	; 0x14d8 <main+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b0:	6f 81       	ldd	r22, Y+7	; 0x07
    14b2:	78 85       	ldd	r23, Y+8	; 0x08
    14b4:	89 85       	ldd	r24, Y+9	; 0x09
    14b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	9e 83       	std	Y+6, r25	; 0x06
    14c2:	8d 83       	std	Y+5, r24	; 0x05
    14c4:	8d 81       	ldd	r24, Y+5	; 0x05
    14c6:	9e 81       	ldd	r25, Y+6	; 0x06
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <main+0x252>
    14d4:	9a 83       	std	Y+2, r25	; 0x02
    14d6:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(60000);
				STEP2 = 1;
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	80 93 12 01 	sts	0x0112, r24
    14de:	2a cf       	rjmp	.-428    	; 0x1334 <main+0xb6>

000014e0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    14e0:	df 93       	push	r29
    14e2:	cf 93       	push	r28
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <GPIO_setupPinDirection+0x6>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <GPIO_setupPinDirection+0x8>
    14e8:	0f 92       	push	r0
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	6a 83       	std	Y+2, r22	; 0x02
    14f2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	88 30       	cpi	r24, 0x08	; 8
    14f8:	08 f0       	brcs	.+2      	; 0x14fc <GPIO_setupPinDirection+0x1c>
    14fa:	d5 c0       	rjmp	.+426    	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	84 30       	cpi	r24, 0x04	; 4
    1500:	08 f0       	brcs	.+2      	; 0x1504 <GPIO_setupPinDirection+0x24>
    1502:	d1 c0       	rjmp	.+418    	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3d 83       	std	Y+5, r19	; 0x05
    150c:	2c 83       	std	Y+4, r18	; 0x04
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	09 f4       	brne	.+2      	; 0x151a <GPIO_setupPinDirection+0x3a>
    1518:	43 c0       	rjmp	.+134    	; 0x15a0 <GPIO_setupPinDirection+0xc0>
    151a:	2c 81       	ldd	r18, Y+4	; 0x04
    151c:	3d 81       	ldd	r19, Y+5	; 0x05
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <GPIO_setupPinDirection+0x4e>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	71 f0       	breq	.+28     	; 0x1548 <GPIO_setupPinDirection+0x68>
    152c:	bc c0       	rjmp	.+376    	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
    152e:	2c 81       	ldd	r18, Y+4	; 0x04
    1530:	3d 81       	ldd	r19, Y+5	; 0x05
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	09 f4       	brne	.+2      	; 0x153a <GPIO_setupPinDirection+0x5a>
    1538:	5f c0       	rjmp	.+190    	; 0x15f8 <GPIO_setupPinDirection+0x118>
    153a:	8c 81       	ldd	r24, Y+4	; 0x04
    153c:	9d 81       	ldd	r25, Y+5	; 0x05
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <GPIO_setupPinDirection+0x66>
    1544:	85 c0       	rjmp	.+266    	; 0x1650 <GPIO_setupPinDirection+0x170>
    1546:	af c0       	rjmp	.+350    	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1548:	8b 81       	ldd	r24, Y+3	; 0x03
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	a1 f4       	brne	.+40     	; 0x1576 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    154e:	aa e3       	ldi	r26, 0x3A	; 58
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	ea e3       	ldi	r30, 0x3A	; 58
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_setupPinDirection+0x8c>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_setupPinDirection+0x88>
    1570:	84 2b       	or	r24, r20
    1572:	8c 93       	st	X, r24
    1574:	98 c0       	rjmp	.+304    	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1576:	aa e3       	ldi	r26, 0x3A	; 58
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	ea e3       	ldi	r30, 0x3A	; 58
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	48 2f       	mov	r20, r24
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	02 2e       	mov	r0, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <GPIO_setupPinDirection+0xb4>
    1590:	88 0f       	add	r24, r24
    1592:	99 1f       	adc	r25, r25
    1594:	0a 94       	dec	r0
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <GPIO_setupPinDirection+0xb0>
    1598:	80 95       	com	r24
    159a:	84 23       	and	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	83 c0       	rjmp	.+262    	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	a1 f4       	brne	.+40     	; 0x15ce <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    15a6:	a7 e3       	ldi	r26, 0x37	; 55
    15a8:	b0 e0       	ldi	r27, 0x00	; 0
    15aa:	e7 e3       	ldi	r30, 0x37	; 55
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	48 2f       	mov	r20, r24
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 2e       	mov	r0, r18
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <GPIO_setupPinDirection+0xe4>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <GPIO_setupPinDirection+0xe0>
    15c8:	84 2b       	or	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	6c c0       	rjmp	.+216    	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    15ce:	a7 e3       	ldi	r26, 0x37	; 55
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e7 e3       	ldi	r30, 0x37	; 55
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	80 81       	ld	r24, Z
    15d8:	48 2f       	mov	r20, r24
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 2e       	mov	r0, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <GPIO_setupPinDirection+0x10c>
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	0a 94       	dec	r0
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <GPIO_setupPinDirection+0x108>
    15f0:	80 95       	com	r24
    15f2:	84 23       	and	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	57 c0       	rjmp	.+174    	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	a1 f4       	brne	.+40     	; 0x1626 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15fe:	a4 e3       	ldi	r26, 0x34	; 52
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e4 e3       	ldi	r30, 0x34	; 52
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <GPIO_setupPinDirection+0x13c>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <GPIO_setupPinDirection+0x138>
    1620:	84 2b       	or	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	40 c0       	rjmp	.+128    	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1626:	a4 e3       	ldi	r26, 0x34	; 52
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e4 e3       	ldi	r30, 0x34	; 52
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <GPIO_setupPinDirection+0x164>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <GPIO_setupPinDirection+0x160>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	2b c0       	rjmp	.+86     	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	a1 f4       	brne	.+40     	; 0x167e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1656:	a1 e3       	ldi	r26, 0x31	; 49
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e1 e3       	ldi	r30, 0x31	; 49
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <GPIO_setupPinDirection+0x194>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <GPIO_setupPinDirection+0x190>
    1678:	84 2b       	or	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	14 c0       	rjmp	.+40     	; 0x16a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    167e:	a1 e3       	ldi	r26, 0x31	; 49
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e1 e3       	ldi	r30, 0x31	; 49
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <GPIO_setupPinDirection+0x1bc>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <GPIO_setupPinDirection+0x1b8>
    16a0:	80 95       	com	r24
    16a2:	84 23       	and	r24, r20
    16a4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <GPIO_writePin+0x6>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <GPIO_writePin+0x8>
    16be:	0f 92       	push	r0
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	89 83       	std	Y+1, r24	; 0x01
    16c6:	6a 83       	std	Y+2, r22	; 0x02
    16c8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	88 30       	cpi	r24, 0x08	; 8
    16ce:	08 f0       	brcs	.+2      	; 0x16d2 <GPIO_writePin+0x1c>
    16d0:	d5 c0       	rjmp	.+426    	; 0x187c <GPIO_writePin+0x1c6>
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	84 30       	cpi	r24, 0x04	; 4
    16d6:	08 f0       	brcs	.+2      	; 0x16da <GPIO_writePin+0x24>
    16d8:	d1 c0       	rjmp	.+418    	; 0x187c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	3d 83       	std	Y+5, r19	; 0x05
    16e2:	2c 83       	std	Y+4, r18	; 0x04
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04
    16e6:	9d 81       	ldd	r25, Y+5	; 0x05
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	91 05       	cpc	r25, r1
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <GPIO_writePin+0x3a>
    16ee:	43 c0       	rjmp	.+134    	; 0x1776 <GPIO_writePin+0xc0>
    16f0:	2c 81       	ldd	r18, Y+4	; 0x04
    16f2:	3d 81       	ldd	r19, Y+5	; 0x05
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	2c f4       	brge	.+10     	; 0x1704 <GPIO_writePin+0x4e>
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	9d 81       	ldd	r25, Y+5	; 0x05
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	71 f0       	breq	.+28     	; 0x171e <GPIO_writePin+0x68>
    1702:	bc c0       	rjmp	.+376    	; 0x187c <GPIO_writePin+0x1c6>
    1704:	2c 81       	ldd	r18, Y+4	; 0x04
    1706:	3d 81       	ldd	r19, Y+5	; 0x05
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	09 f4       	brne	.+2      	; 0x1710 <GPIO_writePin+0x5a>
    170e:	5f c0       	rjmp	.+190    	; 0x17ce <GPIO_writePin+0x118>
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	83 30       	cpi	r24, 0x03	; 3
    1716:	91 05       	cpc	r25, r1
    1718:	09 f4       	brne	.+2      	; 0x171c <GPIO_writePin+0x66>
    171a:	85 c0       	rjmp	.+266    	; 0x1826 <GPIO_writePin+0x170>
    171c:	af c0       	rjmp	.+350    	; 0x187c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	81 30       	cpi	r24, 0x01	; 1
    1722:	a1 f4       	brne	.+40     	; 0x174c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1724:	ab e3       	ldi	r26, 0x3B	; 59
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	eb e3       	ldi	r30, 0x3B	; 59
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_writePin+0x8c>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_writePin+0x88>
    1746:	84 2b       	or	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	98 c0       	rjmp	.+304    	; 0x187c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    174c:	ab e3       	ldi	r26, 0x3B	; 59
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	eb e3       	ldi	r30, 0x3B	; 59
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <GPIO_writePin+0xb4>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <GPIO_writePin+0xb0>
    176e:	80 95       	com	r24
    1770:	84 23       	and	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	83 c0       	rjmp	.+262    	; 0x187c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	a1 f4       	brne	.+40     	; 0x17a4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    177c:	a8 e3       	ldi	r26, 0x38	; 56
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e8 e3       	ldi	r30, 0x38	; 56
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <GPIO_writePin+0xe4>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <GPIO_writePin+0xe0>
    179e:	84 2b       	or	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	6c c0       	rjmp	.+216    	; 0x187c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    17a4:	a8 e3       	ldi	r26, 0x38	; 56
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e8 e3       	ldi	r30, 0x38	; 56
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <GPIO_writePin+0x10c>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <GPIO_writePin+0x108>
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	57 c0       	rjmp	.+174    	; 0x187c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	a1 f4       	brne	.+40     	; 0x17fc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    17d4:	a5 e3       	ldi	r26, 0x35	; 53
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e3       	ldi	r30, 0x35	; 53
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	48 2f       	mov	r20, r24
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <GPIO_writePin+0x13c>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <GPIO_writePin+0x138>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	40 c0       	rjmp	.+128    	; 0x187c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17fc:	a5 e3       	ldi	r26, 0x35	; 53
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	e5 e3       	ldi	r30, 0x35	; 53
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	28 2f       	mov	r18, r24
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	02 2e       	mov	r0, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <GPIO_writePin+0x164>
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	0a 94       	dec	r0
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <GPIO_writePin+0x160>
    181e:	80 95       	com	r24
    1820:	84 23       	and	r24, r20
    1822:	8c 93       	st	X, r24
    1824:	2b c0       	rjmp	.+86     	; 0x187c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	a1 f4       	brne	.+40     	; 0x1854 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    182c:	a2 e3       	ldi	r26, 0x32	; 50
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e2 e3       	ldi	r30, 0x32	; 50
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	8a 81       	ldd	r24, Y+2	; 0x02
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <GPIO_writePin+0x194>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <GPIO_writePin+0x190>
    184e:	84 2b       	or	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	14 c0       	rjmp	.+40     	; 0x187c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1854:	a2 e3       	ldi	r26, 0x32	; 50
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e2 e3       	ldi	r30, 0x32	; 50
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <GPIO_writePin+0x1bc>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <GPIO_writePin+0x1b8>
    1876:	80 95       	com	r24
    1878:	84 23       	and	r24, r20
    187a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <GPIO_readPin+0x6>
    1892:	00 d0       	rcall	.+0      	; 0x1894 <GPIO_readPin+0x8>
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	8a 83       	std	Y+2, r24	; 0x02
    189c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    189e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <GPIO_readPin+0x1c>
    18a6:	84 c0       	rjmp	.+264    	; 0x19b0 <GPIO_readPin+0x124>
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <GPIO_readPin+0x24>
    18ae:	80 c0       	rjmp	.+256    	; 0x19b0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	3d 83       	std	Y+5, r19	; 0x05
    18b8:	2c 83       	std	Y+4, r18	; 0x04
    18ba:	4c 81       	ldd	r20, Y+4	; 0x04
    18bc:	5d 81       	ldd	r21, Y+5	; 0x05
    18be:	41 30       	cpi	r20, 0x01	; 1
    18c0:	51 05       	cpc	r21, r1
    18c2:	79 f1       	breq	.+94     	; 0x1922 <GPIO_readPin+0x96>
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	9d 81       	ldd	r25, Y+5	; 0x05
    18c8:	82 30       	cpi	r24, 0x02	; 2
    18ca:	91 05       	cpc	r25, r1
    18cc:	34 f4       	brge	.+12     	; 0x18da <GPIO_readPin+0x4e>
    18ce:	2c 81       	ldd	r18, Y+4	; 0x04
    18d0:	3d 81       	ldd	r19, Y+5	; 0x05
    18d2:	21 15       	cp	r18, r1
    18d4:	31 05       	cpc	r19, r1
    18d6:	69 f0       	breq	.+26     	; 0x18f2 <GPIO_readPin+0x66>
    18d8:	6b c0       	rjmp	.+214    	; 0x19b0 <GPIO_readPin+0x124>
    18da:	4c 81       	ldd	r20, Y+4	; 0x04
    18dc:	5d 81       	ldd	r21, Y+5	; 0x05
    18de:	42 30       	cpi	r20, 0x02	; 2
    18e0:	51 05       	cpc	r21, r1
    18e2:	b9 f1       	breq	.+110    	; 0x1952 <GPIO_readPin+0xc6>
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	91 05       	cpc	r25, r1
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <GPIO_readPin+0x64>
    18ee:	49 c0       	rjmp	.+146    	; 0x1982 <GPIO_readPin+0xf6>
    18f0:	5f c0       	rjmp	.+190    	; 0x19b0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18f2:	e9 e3       	ldi	r30, 0x39	; 57
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a9 01       	movw	r20, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_readPin+0x7e>
    1906:	55 95       	asr	r21
    1908:	47 95       	ror	r20
    190a:	8a 95       	dec	r24
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_readPin+0x7a>
    190e:	ca 01       	movw	r24, r20
    1910:	81 70       	andi	r24, 0x01	; 1
    1912:	90 70       	andi	r25, 0x00	; 0
    1914:	88 23       	and	r24, r24
    1916:	19 f0       	breq	.+6      	; 0x191e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	49 c0       	rjmp	.+146    	; 0x19b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    191e:	19 82       	std	Y+1, r1	; 0x01
    1920:	47 c0       	rjmp	.+142    	; 0x19b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1922:	e6 e3       	ldi	r30, 0x36	; 54
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	28 2f       	mov	r18, r24
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	88 2f       	mov	r24, r24
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a9 01       	movw	r20, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <GPIO_readPin+0xae>
    1936:	55 95       	asr	r21
    1938:	47 95       	ror	r20
    193a:	8a 95       	dec	r24
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <GPIO_readPin+0xaa>
    193e:	ca 01       	movw	r24, r20
    1940:	81 70       	andi	r24, 0x01	; 1
    1942:	90 70       	andi	r25, 0x00	; 0
    1944:	88 23       	and	r24, r24
    1946:	19 f0       	breq	.+6      	; 0x194e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	31 c0       	rjmp	.+98     	; 0x19b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    194e:	19 82       	std	Y+1, r1	; 0x01
    1950:	2f c0       	rjmp	.+94     	; 0x19b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1952:	e3 e3       	ldi	r30, 0x33	; 51
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	88 2f       	mov	r24, r24
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	a9 01       	movw	r20, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <GPIO_readPin+0xde>
    1966:	55 95       	asr	r21
    1968:	47 95       	ror	r20
    196a:	8a 95       	dec	r24
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <GPIO_readPin+0xda>
    196e:	ca 01       	movw	r24, r20
    1970:	81 70       	andi	r24, 0x01	; 1
    1972:	90 70       	andi	r25, 0x00	; 0
    1974:	88 23       	and	r24, r24
    1976:	19 f0       	breq	.+6      	; 0x197e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	19 c0       	rjmp	.+50     	; 0x19b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    197e:	19 82       	std	Y+1, r1	; 0x01
    1980:	17 c0       	rjmp	.+46     	; 0x19b0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1982:	e0 e3       	ldi	r30, 0x30	; 48
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a9 01       	movw	r20, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <GPIO_readPin+0x10e>
    1996:	55 95       	asr	r21
    1998:	47 95       	ror	r20
    199a:	8a 95       	dec	r24
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <GPIO_readPin+0x10a>
    199e:	ca 01       	movw	r24, r20
    19a0:	81 70       	andi	r24, 0x01	; 1
    19a2:	90 70       	andi	r25, 0x00	; 0
    19a4:	88 23       	and	r24, r24
    19a6:	19 f0       	breq	.+6      	; 0x19ae <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19ae:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	00 d0       	rcall	.+0      	; 0x19c8 <GPIO_setupPortDirection+0x6>
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <GPIO_setupPortDirection+0x8>
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	89 83       	std	Y+1, r24	; 0x01
    19d0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	84 30       	cpi	r24, 0x04	; 4
    19d6:	90 f5       	brcc	.+100    	; 0x1a3c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	3c 83       	std	Y+4, r19	; 0x04
    19e0:	2b 83       	std	Y+3, r18	; 0x03
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	91 05       	cpc	r25, r1
    19ea:	d1 f0       	breq	.+52     	; 0x1a20 <GPIO_setupPortDirection+0x5e>
    19ec:	2b 81       	ldd	r18, Y+3	; 0x03
    19ee:	3c 81       	ldd	r19, Y+4	; 0x04
    19f0:	22 30       	cpi	r18, 0x02	; 2
    19f2:	31 05       	cpc	r19, r1
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <GPIO_setupPortDirection+0x3e>
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	61 f0       	breq	.+24     	; 0x1a16 <GPIO_setupPortDirection+0x54>
    19fe:	1e c0       	rjmp	.+60     	; 0x1a3c <GPIO_setupPortDirection+0x7a>
    1a00:	2b 81       	ldd	r18, Y+3	; 0x03
    1a02:	3c 81       	ldd	r19, Y+4	; 0x04
    1a04:	22 30       	cpi	r18, 0x02	; 2
    1a06:	31 05       	cpc	r19, r1
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <GPIO_setupPortDirection+0x68>
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	91 05       	cpc	r25, r1
    1a12:	81 f0       	breq	.+32     	; 0x1a34 <GPIO_setupPortDirection+0x72>
    1a14:	13 c0       	rjmp	.+38     	; 0x1a3c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1a16:	ea e3       	ldi	r30, 0x3A	; 58
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	80 83       	st	Z, r24
    1a1e:	0e c0       	rjmp	.+28     	; 0x1a3c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1a20:	e7 e3       	ldi	r30, 0x37	; 55
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	09 c0       	rjmp	.+18     	; 0x1a3c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1a2a:	e4 e3       	ldi	r30, 0x34	; 52
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
    1a32:	04 c0       	rjmp	.+8      	; 0x1a3c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1a34:	e1 e3       	ldi	r30, 0x31	; 49
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <GPIO_writePort+0x6>
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <GPIO_writePort+0x8>
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	84 30       	cpi	r24, 0x04	; 4
    1a5e:	90 f5       	brcc	.+100    	; 0x1ac4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	3c 83       	std	Y+4, r19	; 0x04
    1a68:	2b 83       	std	Y+3, r18	; 0x03
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	d1 f0       	breq	.+52     	; 0x1aa8 <GPIO_writePort+0x5e>
    1a74:	2b 81       	ldd	r18, Y+3	; 0x03
    1a76:	3c 81       	ldd	r19, Y+4	; 0x04
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	2c f4       	brge	.+10     	; 0x1a88 <GPIO_writePort+0x3e>
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	61 f0       	breq	.+24     	; 0x1a9e <GPIO_writePort+0x54>
    1a86:	1e c0       	rjmp	.+60     	; 0x1ac4 <GPIO_writePort+0x7a>
    1a88:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8c:	22 30       	cpi	r18, 0x02	; 2
    1a8e:	31 05       	cpc	r19, r1
    1a90:	81 f0       	breq	.+32     	; 0x1ab2 <GPIO_writePort+0x68>
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	83 30       	cpi	r24, 0x03	; 3
    1a98:	91 05       	cpc	r25, r1
    1a9a:	81 f0       	breq	.+32     	; 0x1abc <GPIO_writePort+0x72>
    1a9c:	13 c0       	rjmp	.+38     	; 0x1ac4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a9e:	eb e3       	ldi	r30, 0x3B	; 59
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	80 83       	st	Z, r24
    1aa6:	0e c0       	rjmp	.+28     	; 0x1ac4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1aa8:	e8 e3       	ldi	r30, 0x38	; 56
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	80 83       	st	Z, r24
    1ab0:	09 c0       	rjmp	.+18     	; 0x1ac4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1ab2:	e5 e3       	ldi	r30, 0x35	; 53
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	80 83       	st	Z, r24
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1abc:	e2 e3       	ldi	r30, 0x32	; 50
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	00 d0       	rcall	.+0      	; 0x1ad8 <GPIO_readPort+0x6>
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <GPIO_readPort+0x8>
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ae0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	84 30       	cpi	r24, 0x04	; 4
    1ae6:	90 f5       	brcc	.+100    	; 0x1b4c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	3c 83       	std	Y+4, r19	; 0x04
    1af0:	2b 83       	std	Y+3, r18	; 0x03
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	91 05       	cpc	r25, r1
    1afa:	d1 f0       	breq	.+52     	; 0x1b30 <GPIO_readPort+0x5e>
    1afc:	2b 81       	ldd	r18, Y+3	; 0x03
    1afe:	3c 81       	ldd	r19, Y+4	; 0x04
    1b00:	22 30       	cpi	r18, 0x02	; 2
    1b02:	31 05       	cpc	r19, r1
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <GPIO_readPort+0x3e>
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	61 f0       	breq	.+24     	; 0x1b26 <GPIO_readPort+0x54>
    1b0e:	1e c0       	rjmp	.+60     	; 0x1b4c <GPIO_readPort+0x7a>
    1b10:	2b 81       	ldd	r18, Y+3	; 0x03
    1b12:	3c 81       	ldd	r19, Y+4	; 0x04
    1b14:	22 30       	cpi	r18, 0x02	; 2
    1b16:	31 05       	cpc	r19, r1
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <GPIO_readPort+0x68>
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	83 30       	cpi	r24, 0x03	; 3
    1b20:	91 05       	cpc	r25, r1
    1b22:	81 f0       	breq	.+32     	; 0x1b44 <GPIO_readPort+0x72>
    1b24:	13 c0       	rjmp	.+38     	; 0x1b4c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1b26:	e9 e3       	ldi	r30, 0x39	; 57
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	0e c0       	rjmp	.+28     	; 0x1b4c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1b30:	e6 e3       	ldi	r30, 0x36	; 54
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	09 c0       	rjmp	.+18     	; 0x1b4c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b3a:	e3 e3       	ldi	r30, 0x33	; 51
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	04 c0       	rjmp	.+8      	; 0x1b4c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b44:	e0 e3       	ldi	r30, 0x30	; 48
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	60 97       	sbiw	r28, 0x10	; 16
    1b66:	0f b6       	in	r0, 0x3f	; 63
    1b68:	f8 94       	cli
    1b6a:	de bf       	out	0x3e, r29	; 62
    1b6c:	0f be       	out	0x3f, r0	; 63
    1b6e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	64 e0       	ldi	r22, 0x04	; 4
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	65 e0       	ldi	r22, 0x05	; 5
    1b7e:	40 e0       	ldi	r20, 0x00	; 0
    1b80:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	66 e0       	ldi	r22, 0x06	; 6
    1b88:	40 e0       	ldi	r20, 0x00	; 0
    1b8a:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	67 e0       	ldi	r22, 0x07	; 7
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	62 e0       	ldi	r22, 0x02	; 2
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1ba2:	83 e0       	ldi	r24, 0x03	; 3
    1ba4:	63 e0       	ldi	r22, 0x03	; 3
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	64 e0       	ldi	r22, 0x04	; 4
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
    1bb8:	65 e0       	ldi	r22, 0x05	; 5
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1bc0:	1f 86       	std	Y+15, r1	; 0x0f
    1bc2:	b4 c0       	rjmp	.+360    	; 0x1d2c <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bc6:	98 2f       	mov	r25, r24
    1bc8:	9c 5f       	subi	r25, 0xFC	; 252
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	69 2f       	mov	r22, r25
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd6:	98 2f       	mov	r25, r24
    1bd8:	9c 5f       	subi	r25, 0xFC	; 252
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	69 2f       	mov	r22, r25
    1bde:	40 e0       	ldi	r20, 0x00	; 0
    1be0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1be4:	18 8a       	std	Y+16, r1	; 0x10
    1be6:	22 c0       	rjmp	.+68     	; 0x1c2c <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1be8:	88 89       	ldd	r24, Y+16	; 0x10
    1bea:	98 2f       	mov	r25, r24
    1bec:	9e 5f       	subi	r25, 0xFE	; 254
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	69 2f       	mov	r22, r25
    1bf2:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_readPin>
    1bf6:	88 23       	and	r24, r24
    1bf8:	b1 f4       	brne	.+44     	; 0x1c26 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1bfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	98 2f       	mov	r25, r24
    1c0a:	88 89       	ldd	r24, Y+16	; 0x10
    1c0c:	89 0f       	add	r24, r25
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1c14:	60 96       	adiw	r28, 0x10	; 16
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1c26:	88 89       	ldd	r24, Y+16	; 0x10
    1c28:	8f 5f       	subi	r24, 0xFF	; 255
    1c2a:	88 8b       	std	Y+16, r24	; 0x10
    1c2c:	88 89       	ldd	r24, Y+16	; 0x10
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	d8 f2       	brcs	.-74     	; 0x1be8 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1c32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c34:	98 2f       	mov	r25, r24
    1c36:	9c 5f       	subi	r25, 0xFC	; 252
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	69 2f       	mov	r22, r25
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a0 ea       	ldi	r26, 0xA0	; 160
    1c48:	b0 e4       	ldi	r27, 0x40	; 64
    1c4a:	8b 87       	std	Y+11, r24	; 0x0b
    1c4c:	9c 87       	std	Y+12, r25	; 0x0c
    1c4e:	ad 87       	std	Y+13, r26	; 0x0d
    1c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a ef       	ldi	r20, 0xFA	; 250
    1c60:	54 e4       	ldi	r21, 0x44	; 68
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8f 83       	std	Y+7, r24	; 0x07
    1c6c:	98 87       	std	Y+8, r25	; 0x08
    1c6e:	a9 87       	std	Y+9, r26	; 0x09
    1c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c72:	6f 81       	ldd	r22, Y+7	; 0x07
    1c74:	78 85       	ldd	r23, Y+8	; 0x08
    1c76:	89 85       	ldd	r24, Y+9	; 0x09
    1c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f e3       	ldi	r21, 0x3F	; 63
    1c82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
    1c92:	3f c0       	rjmp	.+126    	; 0x1d12 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	57 e4       	ldi	r21, 0x47	; 71
    1ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	4c f5       	brge	.+82     	; 0x1cfe <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e2       	ldi	r20, 0x20	; 32
    1cba:	51 e4       	ldi	r21, 0x41	; 65
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <KEYPAD_getPressedKey+0x198>
    1cd6:	88 ec       	ldi	r24, 0xC8	; 200
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <KEYPAD_getPressedKey+0x186>
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	69 f7       	brne	.-38     	; 0x1cd6 <KEYPAD_getPressedKey+0x17a>
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	9e 81       	ldd	r25, Y+6	; 0x06
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <KEYPAD_getPressedKey+0x1c2>
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1d26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d28:	8f 5f       	subi	r24, 0xFF	; 255
    1d2a:	8f 87       	std	Y+15, r24	; 0x0f
    1d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2e:	84 30       	cpi	r24, 0x04	; 4
    1d30:	08 f4       	brcc	.+2      	; 0x1d34 <KEYPAD_getPressedKey+0x1d8>
    1d32:	48 cf       	rjmp	.-368    	; 0x1bc4 <KEYPAD_getPressedKey+0x68>
    1d34:	45 cf       	rjmp	.-374    	; 0x1bc0 <KEYPAD_getPressedKey+0x64>

00001d36 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d44:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	28 2f       	mov	r18, r24
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	3c 83       	std	Y+4, r19	; 0x04
    1d4e:	2b 83       	std	Y+3, r18	; 0x03
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	88 30       	cpi	r24, 0x08	; 8
    1d56:	91 05       	cpc	r25, r1
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d5a:	70 c0       	rjmp	.+224    	; 0x1e3c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d60:	29 30       	cpi	r18, 0x09	; 9
    1d62:	31 05       	cpc	r19, r1
    1d64:	5c f5       	brge	.+86     	; 0x1dbc <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d66:	8b 81       	ldd	r24, Y+3	; 0x03
    1d68:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6a:	84 30       	cpi	r24, 0x04	; 4
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d70:	59 c0       	rjmp	.+178    	; 0x1e24 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d72:	2b 81       	ldd	r18, Y+3	; 0x03
    1d74:	3c 81       	ldd	r19, Y+4	; 0x04
    1d76:	25 30       	cpi	r18, 0x05	; 5
    1d78:	31 05       	cpc	r19, r1
    1d7a:	9c f4       	brge	.+38     	; 0x1da2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	82 30       	cpi	r24, 0x02	; 2
    1d82:	91 05       	cpc	r25, r1
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d86:	48 c0       	rjmp	.+144    	; 0x1e18 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d88:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8c:	23 30       	cpi	r18, 0x03	; 3
    1d8e:	31 05       	cpc	r19, r1
    1d90:	0c f0       	brlt	.+2      	; 0x1d94 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d92:	45 c0       	rjmp	.+138    	; 0x1e1e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d94:	8b 81       	ldd	r24, Y+3	; 0x03
    1d96:	9c 81       	ldd	r25, Y+4	; 0x04
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d9e:	39 c0       	rjmp	.+114    	; 0x1e12 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1da0:	67 c0       	rjmp	.+206    	; 0x1e70 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1da2:	2b 81       	ldd	r18, Y+3	; 0x03
    1da4:	3c 81       	ldd	r19, Y+4	; 0x04
    1da6:	26 30       	cpi	r18, 0x06	; 6
    1da8:	31 05       	cpc	r19, r1
    1daa:	09 f4       	brne	.+2      	; 0x1dae <KEYPAD_4x4_adjustKeyNumber+0x78>
    1dac:	41 c0       	rjmp	.+130    	; 0x1e30 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	87 30       	cpi	r24, 0x07	; 7
    1db4:	91 05       	cpc	r25, r1
    1db6:	0c f0       	brlt	.+2      	; 0x1dba <KEYPAD_4x4_adjustKeyNumber+0x84>
    1db8:	3e c0       	rjmp	.+124    	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1dba:	37 c0       	rjmp	.+110    	; 0x1e2a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1dbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc0:	2c 30       	cpi	r18, 0x0C	; 12
    1dc2:	31 05       	cpc	r19, r1
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1dc6:	46 c0       	rjmp	.+140    	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	8d 30       	cpi	r24, 0x0D	; 13
    1dce:	91 05       	cpc	r25, r1
    1dd0:	5c f4       	brge	.+22     	; 0x1de8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1dd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd6:	2a 30       	cpi	r18, 0x0A	; 10
    1dd8:	31 05       	cpc	r19, r1
    1dda:	b1 f1       	breq	.+108    	; 0x1e48 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	8b 30       	cpi	r24, 0x0B	; 11
    1de2:	91 05       	cpc	r25, r1
    1de4:	a4 f5       	brge	.+104    	; 0x1e4e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1de6:	2d c0       	rjmp	.+90     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1de8:	2b 81       	ldd	r18, Y+3	; 0x03
    1dea:	3c 81       	ldd	r19, Y+4	; 0x04
    1dec:	2e 30       	cpi	r18, 0x0E	; 14
    1dee:	31 05       	cpc	r19, r1
    1df0:	b9 f1       	breq	.+110    	; 0x1e60 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	9c 81       	ldd	r25, Y+4	; 0x04
    1df6:	8e 30       	cpi	r24, 0x0E	; 14
    1df8:	91 05       	cpc	r25, r1
    1dfa:	7c f1       	brlt	.+94     	; 0x1e5a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1dfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1e00:	2f 30       	cpi	r18, 0x0F	; 15
    1e02:	31 05       	cpc	r19, r1
    1e04:	79 f1       	breq	.+94     	; 0x1e64 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	80 31       	cpi	r24, 0x10	; 16
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	69 f1       	breq	.+90     	; 0x1e6a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1e10:	2f c0       	rjmp	.+94     	; 0x1e70 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1e12:	87 e0       	ldi	r24, 0x07	; 7
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	2e c0       	rjmp	.+92     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1e18:	88 e0       	ldi	r24, 0x08	; 8
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	2b c0       	rjmp	.+86     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1e1e:	89 e0       	ldi	r24, 0x09	; 9
    1e20:	89 83       	std	Y+1, r24	; 0x01
    1e22:	28 c0       	rjmp	.+80     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1e24:	85 e2       	ldi	r24, 0x25	; 37
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	25 c0       	rjmp	.+74     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1e2a:	84 e0       	ldi	r24, 0x04	; 4
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	22 c0       	rjmp	.+68     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1e30:	85 e0       	ldi	r24, 0x05	; 5
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	1f c0       	rjmp	.+62     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e36:	86 e0       	ldi	r24, 0x06	; 6
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	1c c0       	rjmp	.+56     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e3c:	8a e2       	ldi	r24, 0x2A	; 42
    1e3e:	89 83       	std	Y+1, r24	; 0x01
    1e40:	19 c0       	rjmp	.+50     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	89 83       	std	Y+1, r24	; 0x01
    1e46:	16 c0       	rjmp	.+44     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	13 c0       	rjmp	.+38     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	10 c0       	rjmp	.+32     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e54:	8d e2       	ldi	r24, 0x2D	; 45
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	0d c0       	rjmp	.+26     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e5a:	8d e0       	ldi	r24, 0x0D	; 13
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	0a c0       	rjmp	.+20     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e60:	19 82       	std	Y+1, r1	; 0x01
    1e62:	08 c0       	rjmp	.+16     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e64:	8d e3       	ldi	r24, 0x3D	; 61
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	05 c0       	rjmp	.+10     	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e6a:	8b e2       	ldi	r24, 0x2B	; 43
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	62 e0       	ldi	r22, 0x02	; 2
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <GPIO_setupPinDirection>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a0 ea       	ldi	r26, 0xA0	; 160
    1eb2:	b1 e4       	ldi	r27, 0x41	; 65
    1eb4:	8b 87       	std	Y+11, r24	; 0x0b
    1eb6:	9c 87       	std	Y+12, r25	; 0x0c
    1eb8:	ad 87       	std	Y+13, r26	; 0x0d
    1eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8f 83       	std	Y+7, r24	; 0x07
    1ed6:	98 87       	std	Y+8, r25	; 0x08
    1ed8:	a9 87       	std	Y+9, r26	; 0x09
    1eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <LCD_init+0x7a>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <LCD_init+0xda>
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <LCD_init+0xc8>
    1f50:	9c 83       	std	Y+4, r25	; 0x04
    1f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	9e 81       	ldd	r25, Y+6	; 0x06
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <LCD_init+0xbc>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6a:	78 85       	ldd	r23, Y+8	; 0x08
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <LCD_init+0x104>
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f90:	82 e0       	ldi	r24, 0x02	; 2
    1f92:	6f ef       	ldi	r22, 0xFF	; 255
    1f94:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1f98:	88 e3       	ldi	r24, 0x38	; 56
    1f9a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f9e:	8c e0       	ldi	r24, 0x0C	; 12
    1fa0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LCD_sendCommand>
}
    1faa:	2e 96       	adiw	r28, 0x0e	; 14
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	e9 97       	sbiw	r28, 0x39	; 57
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	61 e0       	ldi	r22, 0x01	; 1
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <GPIO_writePin>
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a0 e8       	ldi	r26, 0x80	; 128
    1fe2:	bf e3       	ldi	r27, 0x3F	; 63
    1fe4:	8d ab       	std	Y+53, r24	; 0x35
    1fe6:	9e ab       	std	Y+54, r25	; 0x36
    1fe8:	af ab       	std	Y+55, r26	; 0x37
    1fea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	6d a9       	ldd	r22, Y+53	; 0x35
    1fee:	7e a9       	ldd	r23, Y+54	; 0x36
    1ff0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4a ef       	ldi	r20, 0xFA	; 250
    1ffa:	54 e4       	ldi	r21, 0x44	; 68
    1ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	89 ab       	std	Y+49, r24	; 0x31
    2006:	9a ab       	std	Y+50, r25	; 0x32
    2008:	ab ab       	std	Y+51, r26	; 0x33
    200a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    200c:	69 a9       	ldd	r22, Y+49	; 0x31
    200e:	7a a9       	ldd	r23, Y+50	; 0x32
    2010:	8b a9       	ldd	r24, Y+51	; 0x33
    2012:	9c a9       	ldd	r25, Y+52	; 0x34
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e8       	ldi	r20, 0x80	; 128
    201a:	5f e3       	ldi	r21, 0x3F	; 63
    201c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2020:	88 23       	and	r24, r24
    2022:	2c f4       	brge	.+10     	; 0x202e <LCD_sendCommand+0x72>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	98 ab       	std	Y+48, r25	; 0x30
    202a:	8f a7       	std	Y+47, r24	; 0x2f
    202c:	3f c0       	rjmp	.+126    	; 0x20ac <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    202e:	69 a9       	ldd	r22, Y+49	; 0x31
    2030:	7a a9       	ldd	r23, Y+50	; 0x32
    2032:	8b a9       	ldd	r24, Y+51	; 0x33
    2034:	9c a9       	ldd	r25, Y+52	; 0x34
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	3f ef       	ldi	r19, 0xFF	; 255
    203a:	4f e7       	ldi	r20, 0x7F	; 127
    203c:	57 e4       	ldi	r21, 0x47	; 71
    203e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2042:	18 16       	cp	r1, r24
    2044:	4c f5       	brge	.+82     	; 0x2098 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2046:	6d a9       	ldd	r22, Y+53	; 0x35
    2048:	7e a9       	ldd	r23, Y+54	; 0x36
    204a:	8f a9       	ldd	r24, Y+55	; 0x37
    204c:	98 ad       	ldd	r25, Y+56	; 0x38
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	98 ab       	std	Y+48, r25	; 0x30
    206c:	8f a7       	std	Y+47, r24	; 0x2f
    206e:	0f c0       	rjmp	.+30     	; 0x208e <LCD_sendCommand+0xd2>
    2070:	88 ec       	ldi	r24, 0xC8	; 200
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9e a7       	std	Y+46, r25	; 0x2e
    2076:	8d a7       	std	Y+45, r24	; 0x2d
    2078:	8d a5       	ldd	r24, Y+45	; 0x2d
    207a:	9e a5       	ldd	r25, Y+46	; 0x2e
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_sendCommand+0xc0>
    2080:	9e a7       	std	Y+46, r25	; 0x2e
    2082:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	8f a5       	ldd	r24, Y+47	; 0x2f
    2086:	98 a9       	ldd	r25, Y+48	; 0x30
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	98 ab       	std	Y+48, r25	; 0x30
    208c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2090:	98 a9       	ldd	r25, Y+48	; 0x30
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	69 f7       	brne	.-38     	; 0x2070 <LCD_sendCommand+0xb4>
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2098:	69 a9       	ldd	r22, Y+49	; 0x31
    209a:	7a a9       	ldd	r23, Y+50	; 0x32
    209c:	8b a9       	ldd	r24, Y+51	; 0x33
    209e:	9c a9       	ldd	r25, Y+52	; 0x34
    20a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	98 ab       	std	Y+48, r25	; 0x30
    20aa:	8f a7       	std	Y+47, r24	; 0x2f
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	98 a9       	ldd	r25, Y+48	; 0x30
    20b0:	9c a7       	std	Y+44, r25	; 0x2c
    20b2:	8b a7       	std	Y+43, r24	; 0x2b
    20b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    20b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_sendCommand+0xfc>
    20bc:	9c a7       	std	Y+44, r25	; 0x2c
    20be:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	62 e0       	ldi	r22, 0x02	; 2
    20c4:	41 e0       	ldi	r20, 0x01	; 1
    20c6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <GPIO_writePin>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e8       	ldi	r26, 0x80	; 128
    20d0:	bf e3       	ldi	r27, 0x3F	; 63
    20d2:	8f a3       	std	Y+39, r24	; 0x27
    20d4:	98 a7       	std	Y+40, r25	; 0x28
    20d6:	a9 a7       	std	Y+41, r26	; 0x29
    20d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20da:	6f a1       	ldd	r22, Y+39	; 0x27
    20dc:	78 a5       	ldd	r23, Y+40	; 0x28
    20de:	89 a5       	ldd	r24, Y+41	; 0x29
    20e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a ef       	ldi	r20, 0xFA	; 250
    20e8:	54 e4       	ldi	r21, 0x44	; 68
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	8b a3       	std	Y+35, r24	; 0x23
    20f4:	9c a3       	std	Y+36, r25	; 0x24
    20f6:	ad a3       	std	Y+37, r26	; 0x25
    20f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20fa:	6b a1       	ldd	r22, Y+35	; 0x23
    20fc:	7c a1       	ldd	r23, Y+36	; 0x24
    20fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2100:	9e a1       	ldd	r25, Y+38	; 0x26
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <LCD_sendCommand+0x160>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	89 a3       	std	Y+33, r24	; 0x21
    211a:	3f c0       	rjmp	.+126    	; 0x219a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    211c:	6b a1       	ldd	r22, Y+35	; 0x23
    211e:	7c a1       	ldd	r23, Y+36	; 0x24
    2120:	8d a1       	ldd	r24, Y+37	; 0x25
    2122:	9e a1       	ldd	r25, Y+38	; 0x26
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	4c f5       	brge	.+82     	; 0x2186 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2134:	6f a1       	ldd	r22, Y+39	; 0x27
    2136:	78 a5       	ldd	r23, Y+40	; 0x28
    2138:	89 a5       	ldd	r24, Y+41	; 0x29
    213a:	9a a5       	ldd	r25, Y+42	; 0x2a
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e2       	ldi	r20, 0x20	; 32
    2142:	51 e4       	ldi	r21, 0x41	; 65
    2144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	9a a3       	std	Y+34, r25	; 0x22
    215a:	89 a3       	std	Y+33, r24	; 0x21
    215c:	0f c0       	rjmp	.+30     	; 0x217c <LCD_sendCommand+0x1c0>
    215e:	88 ec       	ldi	r24, 0xC8	; 200
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	98 a3       	std	Y+32, r25	; 0x20
    2164:	8f 8f       	std	Y+31, r24	; 0x1f
    2166:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2168:	98 a1       	ldd	r25, Y+32	; 0x20
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_sendCommand+0x1ae>
    216e:	98 a3       	std	Y+32, r25	; 0x20
    2170:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	89 a1       	ldd	r24, Y+33	; 0x21
    2174:	9a a1       	ldd	r25, Y+34	; 0x22
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	9a a3       	std	Y+34, r25	; 0x22
    217a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	89 a1       	ldd	r24, Y+33	; 0x21
    217e:	9a a1       	ldd	r25, Y+34	; 0x22
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	69 f7       	brne	.-38     	; 0x215e <LCD_sendCommand+0x1a2>
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	6b a1       	ldd	r22, Y+35	; 0x23
    2188:	7c a1       	ldd	r23, Y+36	; 0x24
    218a:	8d a1       	ldd	r24, Y+37	; 0x25
    218c:	9e a1       	ldd	r25, Y+38	; 0x26
    218e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	9a a3       	std	Y+34, r25	; 0x22
    2198:	89 a3       	std	Y+33, r24	; 0x21
    219a:	89 a1       	ldd	r24, Y+33	; 0x21
    219c:	9a a1       	ldd	r25, Y+34	; 0x22
    219e:	9e 8f       	std	Y+30, r25	; 0x1e
    21a0:	8d 8f       	std	Y+29, r24	; 0x1d
    21a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_sendCommand+0x1ea>
    21aa:	9e 8f       	std	Y+30, r25	; 0x1e
    21ac:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	69 ad       	ldd	r22, Y+57	; 0x39
    21b2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <GPIO_writePort>
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e8       	ldi	r26, 0x80	; 128
    21bc:	bf e3       	ldi	r27, 0x3F	; 63
    21be:	89 8f       	std	Y+25, r24	; 0x19
    21c0:	9a 8f       	std	Y+26, r25	; 0x1a
    21c2:	ab 8f       	std	Y+27, r26	; 0x1b
    21c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c6:	69 8d       	ldd	r22, Y+25	; 0x19
    21c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a ef       	ldi	r20, 0xFA	; 250
    21d4:	54 e4       	ldi	r21, 0x44	; 68
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	8d 8b       	std	Y+21, r24	; 0x15
    21e0:	9e 8b       	std	Y+22, r25	; 0x16
    21e2:	af 8b       	std	Y+23, r26	; 0x17
    21e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21e6:	6d 89       	ldd	r22, Y+21	; 0x15
    21e8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ea:	8f 89       	ldd	r24, Y+23	; 0x17
    21ec:	98 8d       	ldd	r25, Y+24	; 0x18
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	2c f4       	brge	.+10     	; 0x2208 <LCD_sendCommand+0x24c>
		__ticks = 1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	9c 8b       	std	Y+20, r25	; 0x14
    2204:	8b 8b       	std	Y+19, r24	; 0x13
    2206:	3f c0       	rjmp	.+126    	; 0x2286 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2208:	6d 89       	ldd	r22, Y+21	; 0x15
    220a:	7e 89       	ldd	r23, Y+22	; 0x16
    220c:	8f 89       	ldd	r24, Y+23	; 0x17
    220e:	98 8d       	ldd	r25, Y+24	; 0x18
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	3f ef       	ldi	r19, 0xFF	; 255
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	57 e4       	ldi	r21, 0x47	; 71
    2218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	4c f5       	brge	.+82     	; 0x2272 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2220:	69 8d       	ldd	r22, Y+25	; 0x19
    2222:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2226:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e2       	ldi	r20, 0x20	; 32
    222e:	51 e4       	ldi	r21, 0x41	; 65
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9c 8b       	std	Y+20, r25	; 0x14
    2246:	8b 8b       	std	Y+19, r24	; 0x13
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <LCD_sendCommand+0x2ac>
    224a:	88 ec       	ldi	r24, 0xC8	; 200
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9a 8b       	std	Y+18, r25	; 0x12
    2250:	89 8b       	std	Y+17, r24	; 0x11
    2252:	89 89       	ldd	r24, Y+17	; 0x11
    2254:	9a 89       	ldd	r25, Y+18	; 0x12
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_sendCommand+0x29a>
    225a:	9a 8b       	std	Y+18, r25	; 0x12
    225c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	8b 89       	ldd	r24, Y+19	; 0x13
    2260:	9c 89       	ldd	r25, Y+20	; 0x14
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	9c 8b       	std	Y+20, r25	; 0x14
    2266:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	8b 89       	ldd	r24, Y+19	; 0x13
    226a:	9c 89       	ldd	r25, Y+20	; 0x14
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	69 f7       	brne	.-38     	; 0x224a <LCD_sendCommand+0x28e>
    2270:	14 c0       	rjmp	.+40     	; 0x229a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2272:	6d 89       	ldd	r22, Y+21	; 0x15
    2274:	7e 89       	ldd	r23, Y+22	; 0x16
    2276:	8f 89       	ldd	r24, Y+23	; 0x17
    2278:	98 8d       	ldd	r25, Y+24	; 0x18
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9c 8b       	std	Y+20, r25	; 0x14
    2284:	8b 8b       	std	Y+19, r24	; 0x13
    2286:	8b 89       	ldd	r24, Y+19	; 0x13
    2288:	9c 89       	ldd	r25, Y+20	; 0x14
    228a:	98 8b       	std	Y+16, r25	; 0x10
    228c:	8f 87       	std	Y+15, r24	; 0x0f
    228e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2290:	98 89       	ldd	r25, Y+16	; 0x10
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <LCD_sendCommand+0x2d6>
    2296:	98 8b       	std	Y+16, r25	; 0x10
    2298:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	62 e0       	ldi	r22, 0x02	; 2
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <GPIO_writePin>
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a0 e8       	ldi	r26, 0x80	; 128
    22aa:	bf e3       	ldi	r27, 0x3F	; 63
    22ac:	8b 87       	std	Y+11, r24	; 0x0b
    22ae:	9c 87       	std	Y+12, r25	; 0x0c
    22b0:	ad 87       	std	Y+13, r26	; 0x0d
    22b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	4a ef       	ldi	r20, 0xFA	; 250
    22c2:	54 e4       	ldi	r21, 0x44	; 68
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	8f 83       	std	Y+7, r24	; 0x07
    22ce:	98 87       	std	Y+8, r25	; 0x08
    22d0:	a9 87       	std	Y+9, r26	; 0x09
    22d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e8       	ldi	r20, 0x80	; 128
    22e2:	5f e3       	ldi	r21, 0x3F	; 63
    22e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e8:	88 23       	and	r24, r24
    22ea:	2c f4       	brge	.+10     	; 0x22f6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
    22f4:	3f c0       	rjmp	.+126    	; 0x2374 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	3f ef       	ldi	r19, 0xFF	; 255
    2302:	4f e7       	ldi	r20, 0x7F	; 127
    2304:	57 e4       	ldi	r21, 0x47	; 71
    2306:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230a:	18 16       	cp	r1, r24
    230c:	4c f5       	brge	.+82     	; 0x2360 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2310:	7c 85       	ldd	r23, Y+12	; 0x0c
    2312:	8d 85       	ldd	r24, Y+13	; 0x0d
    2314:	9e 85       	ldd	r25, Y+14	; 0x0e
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e2       	ldi	r20, 0x20	; 32
    231c:	51 e4       	ldi	r21, 0x41	; 65
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	9e 83       	std	Y+6, r25	; 0x06
    2334:	8d 83       	std	Y+5, r24	; 0x05
    2336:	0f c0       	rjmp	.+30     	; 0x2356 <LCD_sendCommand+0x39a>
    2338:	88 ec       	ldi	r24, 0xC8	; 200
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9c 83       	std	Y+4, r25	; 0x04
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <LCD_sendCommand+0x388>
    2348:	9c 83       	std	Y+4, r25	; 0x04
    234a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	9e 83       	std	Y+6, r25	; 0x06
    2354:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	00 97       	sbiw	r24, 0x00	; 0
    235c:	69 f7       	brne	.-38     	; 0x2338 <LCD_sendCommand+0x37c>
    235e:	14 c0       	rjmp	.+40     	; 0x2388 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2360:	6f 81       	ldd	r22, Y+7	; 0x07
    2362:	78 85       	ldd	r23, Y+8	; 0x08
    2364:	89 85       	ldd	r24, Y+9	; 0x09
    2366:	9a 85       	ldd	r25, Y+10	; 0x0a
    2368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	9e 83       	std	Y+6, r25	; 0x06
    2372:	8d 83       	std	Y+5, r24	; 0x05
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	9a 83       	std	Y+2, r25	; 0x02
    237a:	89 83       	std	Y+1, r24	; 0x01
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <LCD_sendCommand+0x3c4>
    2384:	9a 83       	std	Y+2, r25	; 0x02
    2386:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2388:	e9 96       	adiw	r28, 0x39	; 57
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	e9 97       	sbiw	r28, 0x39	; 57
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	61 e0       	ldi	r22, 0x01	; 1
    23b4:	41 e0       	ldi	r20, 0x01	; 1
    23b6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <GPIO_writePin>
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	a0 e8       	ldi	r26, 0x80	; 128
    23c0:	bf e3       	ldi	r27, 0x3F	; 63
    23c2:	8d ab       	std	Y+53, r24	; 0x35
    23c4:	9e ab       	std	Y+54, r25	; 0x36
    23c6:	af ab       	std	Y+55, r26	; 0x37
    23c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ca:	6d a9       	ldd	r22, Y+53	; 0x35
    23cc:	7e a9       	ldd	r23, Y+54	; 0x36
    23ce:	8f a9       	ldd	r24, Y+55	; 0x37
    23d0:	98 ad       	ldd	r25, Y+56	; 0x38
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	4a ef       	ldi	r20, 0xFA	; 250
    23d8:	54 e4       	ldi	r21, 0x44	; 68
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	89 ab       	std	Y+49, r24	; 0x31
    23e4:	9a ab       	std	Y+50, r25	; 0x32
    23e6:	ab ab       	std	Y+51, r26	; 0x33
    23e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23ea:	69 a9       	ldd	r22, Y+49	; 0x31
    23ec:	7a a9       	ldd	r23, Y+50	; 0x32
    23ee:	8b a9       	ldd	r24, Y+51	; 0x33
    23f0:	9c a9       	ldd	r25, Y+52	; 0x34
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e8       	ldi	r20, 0x80	; 128
    23f8:	5f e3       	ldi	r21, 0x3F	; 63
    23fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fe:	88 23       	and	r24, r24
    2400:	2c f4       	brge	.+10     	; 0x240c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	98 ab       	std	Y+48, r25	; 0x30
    2408:	8f a7       	std	Y+47, r24	; 0x2f
    240a:	3f c0       	rjmp	.+126    	; 0x248a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    240c:	69 a9       	ldd	r22, Y+49	; 0x31
    240e:	7a a9       	ldd	r23, Y+50	; 0x32
    2410:	8b a9       	ldd	r24, Y+51	; 0x33
    2412:	9c a9       	ldd	r25, Y+52	; 0x34
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	3f ef       	ldi	r19, 0xFF	; 255
    2418:	4f e7       	ldi	r20, 0x7F	; 127
    241a:	57 e4       	ldi	r21, 0x47	; 71
    241c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2420:	18 16       	cp	r1, r24
    2422:	4c f5       	brge	.+82     	; 0x2476 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2424:	6d a9       	ldd	r22, Y+53	; 0x35
    2426:	7e a9       	ldd	r23, Y+54	; 0x36
    2428:	8f a9       	ldd	r24, Y+55	; 0x37
    242a:	98 ad       	ldd	r25, Y+56	; 0x38
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e2       	ldi	r20, 0x20	; 32
    2432:	51 e4       	ldi	r21, 0x41	; 65
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	98 ab       	std	Y+48, r25	; 0x30
    244a:	8f a7       	std	Y+47, r24	; 0x2f
    244c:	0f c0       	rjmp	.+30     	; 0x246c <LCD_displayCharacter+0xd2>
    244e:	88 ec       	ldi	r24, 0xC8	; 200
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9e a7       	std	Y+46, r25	; 0x2e
    2454:	8d a7       	std	Y+45, r24	; 0x2d
    2456:	8d a5       	ldd	r24, Y+45	; 0x2d
    2458:	9e a5       	ldd	r25, Y+46	; 0x2e
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <LCD_displayCharacter+0xc0>
    245e:	9e a7       	std	Y+46, r25	; 0x2e
    2460:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2462:	8f a5       	ldd	r24, Y+47	; 0x2f
    2464:	98 a9       	ldd	r25, Y+48	; 0x30
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	98 ab       	std	Y+48, r25	; 0x30
    246a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246c:	8f a5       	ldd	r24, Y+47	; 0x2f
    246e:	98 a9       	ldd	r25, Y+48	; 0x30
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	69 f7       	brne	.-38     	; 0x244e <LCD_displayCharacter+0xb4>
    2474:	14 c0       	rjmp	.+40     	; 0x249e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2476:	69 a9       	ldd	r22, Y+49	; 0x31
    2478:	7a a9       	ldd	r23, Y+50	; 0x32
    247a:	8b a9       	ldd	r24, Y+51	; 0x33
    247c:	9c a9       	ldd	r25, Y+52	; 0x34
    247e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	98 ab       	std	Y+48, r25	; 0x30
    2488:	8f a7       	std	Y+47, r24	; 0x2f
    248a:	8f a5       	ldd	r24, Y+47	; 0x2f
    248c:	98 a9       	ldd	r25, Y+48	; 0x30
    248e:	9c a7       	std	Y+44, r25	; 0x2c
    2490:	8b a7       	std	Y+43, r24	; 0x2b
    2492:	8b a5       	ldd	r24, Y+43	; 0x2b
    2494:	9c a5       	ldd	r25, Y+44	; 0x2c
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <LCD_displayCharacter+0xfc>
    249a:	9c a7       	std	Y+44, r25	; 0x2c
    249c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <GPIO_writePin>
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a0 e8       	ldi	r26, 0x80	; 128
    24ae:	bf e3       	ldi	r27, 0x3F	; 63
    24b0:	8f a3       	std	Y+39, r24	; 0x27
    24b2:	98 a7       	std	Y+40, r25	; 0x28
    24b4:	a9 a7       	std	Y+41, r26	; 0x29
    24b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	6f a1       	ldd	r22, Y+39	; 0x27
    24ba:	78 a5       	ldd	r23, Y+40	; 0x28
    24bc:	89 a5       	ldd	r24, Y+41	; 0x29
    24be:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8b a3       	std	Y+35, r24	; 0x23
    24d2:	9c a3       	std	Y+36, r25	; 0x24
    24d4:	ad a3       	std	Y+37, r26	; 0x25
    24d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24d8:	6b a1       	ldd	r22, Y+35	; 0x23
    24da:	7c a1       	ldd	r23, Y+36	; 0x24
    24dc:	8d a1       	ldd	r24, Y+37	; 0x25
    24de:	9e a1       	ldd	r25, Y+38	; 0x26
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <LCD_displayCharacter+0x160>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9a a3       	std	Y+34, r25	; 0x22
    24f6:	89 a3       	std	Y+33, r24	; 0x21
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    24fa:	6b a1       	ldd	r22, Y+35	; 0x23
    24fc:	7c a1       	ldd	r23, Y+36	; 0x24
    24fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2500:	9e a1       	ldd	r25, Y+38	; 0x26
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	6f a1       	ldd	r22, Y+39	; 0x27
    2514:	78 a5       	ldd	r23, Y+40	; 0x28
    2516:	89 a5       	ldd	r24, Y+41	; 0x29
    2518:	9a a5       	ldd	r25, Y+42	; 0x2a
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9a a3       	std	Y+34, r25	; 0x22
    2538:	89 a3       	std	Y+33, r24	; 0x21
    253a:	0f c0       	rjmp	.+30     	; 0x255a <LCD_displayCharacter+0x1c0>
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	98 a3       	std	Y+32, r25	; 0x20
    2542:	8f 8f       	std	Y+31, r24	; 0x1f
    2544:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2546:	98 a1       	ldd	r25, Y+32	; 0x20
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_displayCharacter+0x1ae>
    254c:	98 a3       	std	Y+32, r25	; 0x20
    254e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	89 a1       	ldd	r24, Y+33	; 0x21
    2552:	9a a1       	ldd	r25, Y+34	; 0x22
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9a a3       	std	Y+34, r25	; 0x22
    2558:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	89 a1       	ldd	r24, Y+33	; 0x21
    255c:	9a a1       	ldd	r25, Y+34	; 0x22
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <LCD_displayCharacter+0x1a2>
    2562:	14 c0       	rjmp	.+40     	; 0x258c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	6b a1       	ldd	r22, Y+35	; 0x23
    2566:	7c a1       	ldd	r23, Y+36	; 0x24
    2568:	8d a1       	ldd	r24, Y+37	; 0x25
    256a:	9e a1       	ldd	r25, Y+38	; 0x26
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9a a3       	std	Y+34, r25	; 0x22
    2576:	89 a3       	std	Y+33, r24	; 0x21
    2578:	89 a1       	ldd	r24, Y+33	; 0x21
    257a:	9a a1       	ldd	r25, Y+34	; 0x22
    257c:	9e 8f       	std	Y+30, r25	; 0x1e
    257e:	8d 8f       	std	Y+29, r24	; 0x1d
    2580:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2582:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_displayCharacter+0x1ea>
    2588:	9e 8f       	std	Y+30, r25	; 0x1e
    258a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    258c:	82 e0       	ldi	r24, 0x02	; 2
    258e:	69 ad       	ldd	r22, Y+57	; 0x39
    2590:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <GPIO_writePort>
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a0 e8       	ldi	r26, 0x80	; 128
    259a:	bf e3       	ldi	r27, 0x3F	; 63
    259c:	89 8f       	std	Y+25, r24	; 0x19
    259e:	9a 8f       	std	Y+26, r25	; 0x1a
    25a0:	ab 8f       	std	Y+27, r26	; 0x1b
    25a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a4:	69 8d       	ldd	r22, Y+25	; 0x19
    25a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a ef       	ldi	r20, 0xFA	; 250
    25b2:	54 e4       	ldi	r21, 0x44	; 68
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8d 8b       	std	Y+21, r24	; 0x15
    25be:	9e 8b       	std	Y+22, r25	; 0x16
    25c0:	af 8b       	std	Y+23, r26	; 0x17
    25c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25c4:	6d 89       	ldd	r22, Y+21	; 0x15
    25c6:	7e 89       	ldd	r23, Y+22	; 0x16
    25c8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ca:	98 8d       	ldd	r25, Y+24	; 0x18
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e8       	ldi	r20, 0x80	; 128
    25d2:	5f e3       	ldi	r21, 0x3F	; 63
    25d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d8:	88 23       	and	r24, r24
    25da:	2c f4       	brge	.+10     	; 0x25e6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	9c 8b       	std	Y+20, r25	; 0x14
    25e2:	8b 8b       	std	Y+19, r24	; 0x13
    25e4:	3f c0       	rjmp	.+126    	; 0x2664 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    25e6:	6d 89       	ldd	r22, Y+21	; 0x15
    25e8:	7e 89       	ldd	r23, Y+22	; 0x16
    25ea:	8f 89       	ldd	r24, Y+23	; 0x17
    25ec:	98 8d       	ldd	r25, Y+24	; 0x18
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	3f ef       	ldi	r19, 0xFF	; 255
    25f2:	4f e7       	ldi	r20, 0x7F	; 127
    25f4:	57 e4       	ldi	r21, 0x47	; 71
    25f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25fa:	18 16       	cp	r1, r24
    25fc:	4c f5       	brge	.+82     	; 0x2650 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2600:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2602:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2604:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e2       	ldi	r20, 0x20	; 32
    260c:	51 e4       	ldi	r21, 0x41	; 65
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	bc 01       	movw	r22, r24
    2618:	cd 01       	movw	r24, r26
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9c 8b       	std	Y+20, r25	; 0x14
    2624:	8b 8b       	std	Y+19, r24	; 0x13
    2626:	0f c0       	rjmp	.+30     	; 0x2646 <LCD_displayCharacter+0x2ac>
    2628:	88 ec       	ldi	r24, 0xC8	; 200
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	9a 8b       	std	Y+18, r25	; 0x12
    262e:	89 8b       	std	Y+17, r24	; 0x11
    2630:	89 89       	ldd	r24, Y+17	; 0x11
    2632:	9a 89       	ldd	r25, Y+18	; 0x12
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	f1 f7       	brne	.-4      	; 0x2634 <LCD_displayCharacter+0x29a>
    2638:	9a 8b       	std	Y+18, r25	; 0x12
    263a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    263c:	8b 89       	ldd	r24, Y+19	; 0x13
    263e:	9c 89       	ldd	r25, Y+20	; 0x14
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9c 8b       	std	Y+20, r25	; 0x14
    2644:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2646:	8b 89       	ldd	r24, Y+19	; 0x13
    2648:	9c 89       	ldd	r25, Y+20	; 0x14
    264a:	00 97       	sbiw	r24, 0x00	; 0
    264c:	69 f7       	brne	.-38     	; 0x2628 <LCD_displayCharacter+0x28e>
    264e:	14 c0       	rjmp	.+40     	; 0x2678 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2650:	6d 89       	ldd	r22, Y+21	; 0x15
    2652:	7e 89       	ldd	r23, Y+22	; 0x16
    2654:	8f 89       	ldd	r24, Y+23	; 0x17
    2656:	98 8d       	ldd	r25, Y+24	; 0x18
    2658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	9c 8b       	std	Y+20, r25	; 0x14
    2662:	8b 8b       	std	Y+19, r24	; 0x13
    2664:	8b 89       	ldd	r24, Y+19	; 0x13
    2666:	9c 89       	ldd	r25, Y+20	; 0x14
    2668:	98 8b       	std	Y+16, r25	; 0x10
    266a:	8f 87       	std	Y+15, r24	; 0x0f
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	98 89       	ldd	r25, Y+16	; 0x10
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_displayCharacter+0x2d6>
    2674:	98 8b       	std	Y+16, r25	; 0x10
    2676:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	62 e0       	ldi	r22, 0x02	; 2
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <GPIO_writePin>
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	a0 e8       	ldi	r26, 0x80	; 128
    2688:	bf e3       	ldi	r27, 0x3F	; 63
    268a:	8b 87       	std	Y+11, r24	; 0x0b
    268c:	9c 87       	std	Y+12, r25	; 0x0c
    268e:	ad 87       	std	Y+13, r26	; 0x0d
    2690:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2692:	6b 85       	ldd	r22, Y+11	; 0x0b
    2694:	7c 85       	ldd	r23, Y+12	; 0x0c
    2696:	8d 85       	ldd	r24, Y+13	; 0x0d
    2698:	9e 85       	ldd	r25, Y+14	; 0x0e
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	4a ef       	ldi	r20, 0xFA	; 250
    26a0:	54 e4       	ldi	r21, 0x44	; 68
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	8f 83       	std	Y+7, r24	; 0x07
    26ac:	98 87       	std	Y+8, r25	; 0x08
    26ae:	a9 87       	std	Y+9, r26	; 0x09
    26b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26b2:	6f 81       	ldd	r22, Y+7	; 0x07
    26b4:	78 85       	ldd	r23, Y+8	; 0x08
    26b6:	89 85       	ldd	r24, Y+9	; 0x09
    26b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e8       	ldi	r20, 0x80	; 128
    26c0:	5f e3       	ldi	r21, 0x3F	; 63
    26c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c6:	88 23       	and	r24, r24
    26c8:	2c f4       	brge	.+10     	; 0x26d4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	3f c0       	rjmp	.+126    	; 0x2752 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    26d4:	6f 81       	ldd	r22, Y+7	; 0x07
    26d6:	78 85       	ldd	r23, Y+8	; 0x08
    26d8:	89 85       	ldd	r24, Y+9	; 0x09
    26da:	9a 85       	ldd	r25, Y+10	; 0x0a
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	3f ef       	ldi	r19, 0xFF	; 255
    26e0:	4f e7       	ldi	r20, 0x7F	; 127
    26e2:	57 e4       	ldi	r21, 0x47	; 71
    26e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e8:	18 16       	cp	r1, r24
    26ea:	4c f5       	brge	.+82     	; 0x273e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    26f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e2       	ldi	r20, 0x20	; 32
    26fa:	51 e4       	ldi	r21, 0x41	; 65
    26fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	bc 01       	movw	r22, r24
    2706:	cd 01       	movw	r24, r26
    2708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	9e 83       	std	Y+6, r25	; 0x06
    2712:	8d 83       	std	Y+5, r24	; 0x05
    2714:	0f c0       	rjmp	.+30     	; 0x2734 <LCD_displayCharacter+0x39a>
    2716:	88 ec       	ldi	r24, 0xC8	; 200
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	9c 83       	std	Y+4, r25	; 0x04
    271c:	8b 83       	std	Y+3, r24	; 0x03
    271e:	8b 81       	ldd	r24, Y+3	; 0x03
    2720:	9c 81       	ldd	r25, Y+4	; 0x04
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <LCD_displayCharacter+0x388>
    2726:	9c 83       	std	Y+4, r25	; 0x04
    2728:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	8d 81       	ldd	r24, Y+5	; 0x05
    272c:	9e 81       	ldd	r25, Y+6	; 0x06
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	9e 83       	std	Y+6, r25	; 0x06
    2732:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2734:	8d 81       	ldd	r24, Y+5	; 0x05
    2736:	9e 81       	ldd	r25, Y+6	; 0x06
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	69 f7       	brne	.-38     	; 0x2716 <LCD_displayCharacter+0x37c>
    273c:	14 c0       	rjmp	.+40     	; 0x2766 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	6f 81       	ldd	r22, Y+7	; 0x07
    2740:	78 85       	ldd	r23, Y+8	; 0x08
    2742:	89 85       	ldd	r24, Y+9	; 0x09
    2744:	9a 85       	ldd	r25, Y+10	; 0x0a
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8d 83       	std	Y+5, r24	; 0x05
    2752:	8d 81       	ldd	r24, Y+5	; 0x05
    2754:	9e 81       	ldd	r25, Y+6	; 0x06
    2756:	9a 83       	std	Y+2, r25	; 0x02
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	9a 81       	ldd	r25, Y+2	; 0x02
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <LCD_displayCharacter+0x3c4>
    2762:	9a 83       	std	Y+2, r25	; 0x02
    2764:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2766:	e9 96       	adiw	r28, 0x39	; 57
    2768:	0f b6       	in	r0, 0x3f	; 63
    276a:	f8 94       	cli
    276c:	de bf       	out	0x3e, r29	; 62
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	cd bf       	out	0x3d, r28	; 61
    2772:	cf 91       	pop	r28
    2774:	df 91       	pop	r29
    2776:	08 95       	ret

00002778 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	00 d0       	rcall	.+0      	; 0x277e <LCD_displayString+0x6>
    277e:	0f 92       	push	r0
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	9b 83       	std	Y+3, r25	; 0x03
    2786:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2788:	19 82       	std	Y+1, r1	; 0x01
    278a:	0e c0       	rjmp	.+28     	; 0x27a8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	9b 81       	ldd	r25, Y+3	; 0x03
    2796:	fc 01       	movw	r30, r24
    2798:	e2 0f       	add	r30, r18
    279a:	f3 1f       	adc	r31, r19
    279c:	80 81       	ld	r24, Z
    279e:	0e 94 cd 11 	call	0x239a	; 0x239a <LCD_displayCharacter>
		i++;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	28 2f       	mov	r18, r24
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	9b 81       	ldd	r25, Y+3	; 0x03
    27b2:	fc 01       	movw	r30, r24
    27b4:	e2 0f       	add	r30, r18
    27b6:	f3 1f       	adc	r31, r19
    27b8:	80 81       	ld	r24, Z
    27ba:	88 23       	and	r24, r24
    27bc:	39 f7       	brne	.-50     	; 0x278c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <LCD_moveCursor+0x6>
    27d0:	00 d0       	rcall	.+0      	; 0x27d2 <LCD_moveCursor+0x8>
    27d2:	0f 92       	push	r0
    27d4:	cd b7       	in	r28, 0x3d	; 61
    27d6:	de b7       	in	r29, 0x3e	; 62
    27d8:	8a 83       	std	Y+2, r24	; 0x02
    27da:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	28 2f       	mov	r18, r24
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	3d 83       	std	Y+5, r19	; 0x05
    27e4:	2c 83       	std	Y+4, r18	; 0x04
    27e6:	8c 81       	ldd	r24, Y+4	; 0x04
    27e8:	9d 81       	ldd	r25, Y+5	; 0x05
    27ea:	81 30       	cpi	r24, 0x01	; 1
    27ec:	91 05       	cpc	r25, r1
    27ee:	c1 f0       	breq	.+48     	; 0x2820 <LCD_moveCursor+0x56>
    27f0:	2c 81       	ldd	r18, Y+4	; 0x04
    27f2:	3d 81       	ldd	r19, Y+5	; 0x05
    27f4:	22 30       	cpi	r18, 0x02	; 2
    27f6:	31 05       	cpc	r19, r1
    27f8:	2c f4       	brge	.+10     	; 0x2804 <LCD_moveCursor+0x3a>
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	9d 81       	ldd	r25, Y+5	; 0x05
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	61 f0       	breq	.+24     	; 0x281a <LCD_moveCursor+0x50>
    2802:	19 c0       	rjmp	.+50     	; 0x2836 <LCD_moveCursor+0x6c>
    2804:	2c 81       	ldd	r18, Y+4	; 0x04
    2806:	3d 81       	ldd	r19, Y+5	; 0x05
    2808:	22 30       	cpi	r18, 0x02	; 2
    280a:	31 05       	cpc	r19, r1
    280c:	69 f0       	breq	.+26     	; 0x2828 <LCD_moveCursor+0x5e>
    280e:	8c 81       	ldd	r24, Y+4	; 0x04
    2810:	9d 81       	ldd	r25, Y+5	; 0x05
    2812:	83 30       	cpi	r24, 0x03	; 3
    2814:	91 05       	cpc	r25, r1
    2816:	61 f0       	breq	.+24     	; 0x2830 <LCD_moveCursor+0x66>
    2818:	0e c0       	rjmp	.+28     	; 0x2836 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	0b c0       	rjmp	.+22     	; 0x2836 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2820:	8b 81       	ldd	r24, Y+3	; 0x03
    2822:	80 5c       	subi	r24, 0xC0	; 192
    2824:	89 83       	std	Y+1, r24	; 0x01
    2826:	07 c0       	rjmp	.+14     	; 0x2836 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	80 5f       	subi	r24, 0xF0	; 240
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	03 c0       	rjmp	.+6      	; 0x2836 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	80 5b       	subi	r24, 0xB0	; 176
    2834:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2836:	89 81       	ldd	r24, Y+1	; 0x01
    2838:	80 68       	ori	r24, 0x80	; 128
    283a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LCD_sendCommand>
}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	cf 91       	pop	r28
    284a:	df 91       	pop	r29
    284c:	08 95       	ret

0000284e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	00 d0       	rcall	.+0      	; 0x2854 <LCD_displayStringRowColumn+0x6>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <LCD_displayStringRowColumn+0x8>
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	6a 83       	std	Y+2, r22	; 0x02
    285e:	5c 83       	std	Y+4, r21	; 0x04
    2860:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	6a 81       	ldd	r22, Y+2	; 0x02
    2866:	0e 94 e5 13 	call	0x27ca	; 0x27ca <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    286a:	8b 81       	ldd	r24, Y+3	; 0x03
    286c:	9c 81       	ldd	r25, Y+4	; 0x04
    286e:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_displayString>
}
    2872:	0f 90       	pop	r0
    2874:	0f 90       	pop	r0
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	62 97       	sbiw	r28, 0x12	; 18
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	9a 8b       	std	Y+18, r25	; 0x12
    2896:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2898:	89 89       	ldd	r24, Y+17	; 0x11
    289a:	9a 89       	ldd	r25, Y+18	; 0x12
    289c:	9e 01       	movw	r18, r28
    289e:	2f 5f       	subi	r18, 0xFF	; 255
    28a0:	3f 4f       	sbci	r19, 0xFF	; 255
    28a2:	b9 01       	movw	r22, r18
    28a4:	4a e0       	ldi	r20, 0x0A	; 10
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <itoa>
   LCD_displayString(buff); /* Display the string */
    28ac:	ce 01       	movw	r24, r28
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	0e 94 bc 13 	call	0x2778	; 0x2778 <LCD_displayString>
}
    28b4:	62 96       	adiw	r28, 0x12	; 18
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	08 95       	ret

000028c6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	cd b7       	in	r28, 0x3d	; 61
    28cc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LCD_sendCommand>
}
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <__vector_7>:
#include <avr/interrupt.h>

static volatile void (*Timer1_callback)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    28da:	1f 92       	push	r1
    28dc:	0f 92       	push	r0
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	0f 92       	push	r0
    28e2:	11 24       	eor	r1, r1
    28e4:	2f 93       	push	r18
    28e6:	3f 93       	push	r19
    28e8:	4f 93       	push	r20
    28ea:	5f 93       	push	r21
    28ec:	6f 93       	push	r22
    28ee:	7f 93       	push	r23
    28f0:	8f 93       	push	r24
    28f2:	9f 93       	push	r25
    28f4:	af 93       	push	r26
    28f6:	bf 93       	push	r27
    28f8:	ef 93       	push	r30
    28fa:	ff 93       	push	r31
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_callback != NULL_PTR)
    2904:	80 91 16 01 	lds	r24, 0x0116
    2908:	90 91 17 01 	lds	r25, 0x0117
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	29 f0       	breq	.+10     	; 0x291a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer1_callback)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2910:	e0 91 16 01 	lds	r30, 0x0116
    2914:	f0 91 17 01 	lds	r31, 0x0117
    2918:	09 95       	icall
	}
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	ff 91       	pop	r31
    2920:	ef 91       	pop	r30
    2922:	bf 91       	pop	r27
    2924:	af 91       	pop	r26
    2926:	9f 91       	pop	r25
    2928:	8f 91       	pop	r24
    292a:	7f 91       	pop	r23
    292c:	6f 91       	pop	r22
    292e:	5f 91       	pop	r21
    2930:	4f 91       	pop	r20
    2932:	3f 91       	pop	r19
    2934:	2f 91       	pop	r18
    2936:	0f 90       	pop	r0
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	0f 90       	pop	r0
    293c:	1f 90       	pop	r1
    293e:	18 95       	reti

00002940 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    2940:	1f 92       	push	r1
    2942:	0f 92       	push	r0
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	0f 92       	push	r0
    2948:	11 24       	eor	r1, r1
    294a:	2f 93       	push	r18
    294c:	3f 93       	push	r19
    294e:	4f 93       	push	r20
    2950:	5f 93       	push	r21
    2952:	6f 93       	push	r22
    2954:	7f 93       	push	r23
    2956:	8f 93       	push	r24
    2958:	9f 93       	push	r25
    295a:	af 93       	push	r26
    295c:	bf 93       	push	r27
    295e:	ef 93       	push	r30
    2960:	ff 93       	push	r31
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_callback != NULL_PTR)
    296a:	80 91 16 01 	lds	r24, 0x0116
    296e:	90 91 17 01 	lds	r25, 0x0117
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	29 f0       	breq	.+10     	; 0x2980 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer1_callback)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2976:	e0 91 16 01 	lds	r30, 0x0116
    297a:	f0 91 17 01 	lds	r31, 0x0117
    297e:	09 95       	icall
	}
}
    2980:	cf 91       	pop	r28
    2982:	df 91       	pop	r29
    2984:	ff 91       	pop	r31
    2986:	ef 91       	pop	r30
    2988:	bf 91       	pop	r27
    298a:	af 91       	pop	r26
    298c:	9f 91       	pop	r25
    298e:	8f 91       	pop	r24
    2990:	7f 91       	pop	r23
    2992:	6f 91       	pop	r22
    2994:	5f 91       	pop	r21
    2996:	4f 91       	pop	r20
    2998:	3f 91       	pop	r19
    299a:	2f 91       	pop	r18
    299c:	0f 90       	pop	r0
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	0f 90       	pop	r0
    29a2:	1f 90       	pop	r1
    29a4:	18 95       	reti

000029a6 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <Timer1_init+0x6>
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	9a 83       	std	Y+2, r25	; 0x02
    29b2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    29b4:	ac e4       	ldi	r26, 0x4C	; 76
    29b6:	b0 e0       	ldi	r27, 0x00	; 0
    29b8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ba:	fa 81       	ldd	r31, Y+2	; 0x02
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	11 96       	adiw	r26, 0x01	; 1
    29c2:	9c 93       	st	X, r25
    29c4:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;
    29c6:	aa e4       	ldi	r26, 0x4A	; 74
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e9 81       	ldd	r30, Y+1	; 0x01
    29cc:	fa 81       	ldd	r31, Y+2	; 0x02
    29ce:	82 81       	ldd	r24, Z+2	; 0x02
    29d0:	93 81       	ldd	r25, Z+3	; 0x03
    29d2:	11 96       	adiw	r26, 0x01	; 1
    29d4:	9c 93       	st	X, r25
    29d6:	8e 93       	st	-X, r24
	TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    29d8:	af e4       	ldi	r26, 0x4F	; 79
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	ef e4       	ldi	r30, 0x4F	; 79
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	8c 60       	ori	r24, 0x0C	; 12
    29e4:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->mode)<<3);
    29e6:	ae e4       	ldi	r26, 0x4E	; 78
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	ee e4       	ldi	r30, 0x4E	; 78
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	28 2f       	mov	r18, r24
    29f2:	27 7f       	andi	r18, 0xF7	; 247
    29f4:	e9 81       	ldd	r30, Y+1	; 0x01
    29f6:	fa 81       	ldd	r31, Y+2	; 0x02
    29f8:	85 81       	ldd	r24, Z+5	; 0x05
    29fa:	88 2f       	mov	r24, r24
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	88 0f       	add	r24, r24
    2a04:	99 1f       	adc	r25, r25
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	82 2b       	or	r24, r18
    2a0c:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    2a0e:	ae e4       	ldi	r26, 0x4E	; 78
    2a10:	b0 e0       	ldi	r27, 0x00	; 0
    2a12:	ee e4       	ldi	r30, 0x4E	; 78
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	98 2f       	mov	r25, r24
    2a1a:	98 7f       	andi	r25, 0xF8	; 248
    2a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a20:	84 81       	ldd	r24, Z+4	; 0x04
    2a22:	89 2b       	or	r24, r25
    2a24:	8c 93       	st	X, r24
	if (Config_Ptr->mode == CTC)
    2a26:	e9 81       	ldd	r30, Y+1	; 0x01
    2a28:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2a:	85 81       	ldd	r24, Z+5	; 0x05
    2a2c:	81 30       	cpi	r24, 0x01	; 1
    2a2e:	41 f4       	brne	.+16     	; 0x2a40 <Timer1_init+0x9a>
	{
		TIMSK |= (1 << OCIE1A);  // Enable Compare Match A interrupt
    2a30:	a9 e5       	ldi	r26, 0x59	; 89
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	e9 e5       	ldi	r30, 0x59	; 89
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	80 61       	ori	r24, 0x10	; 16
    2a3c:	8c 93       	st	X, r24
    2a3e:	07 c0       	rjmp	.+14     	; 0x2a4e <Timer1_init+0xa8>
	}
	else
	{
		TIMSK |= (1 << TOIE1);  // Enable Overflow interrupt
    2a40:	a9 e5       	ldi	r26, 0x59	; 89
    2a42:	b0 e0       	ldi	r27, 0x00	; 0
    2a44:	e9 e5       	ldi	r30, 0x59	; 89
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	80 81       	ld	r24, Z
    2a4a:	84 60       	ori	r24, 0x04	; 4
    2a4c:	8c 93       	st	X, r24
	}
}
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <Timer1_deInit>:

void Timer1_deInit(void)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    2a60:	ec e4       	ldi	r30, 0x4C	; 76
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	11 82       	std	Z+1, r1	; 0x01
    2a66:	10 82       	st	Z, r1
	OCR1A=0;
    2a68:	ea e4       	ldi	r30, 0x4A	; 74
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	11 82       	std	Z+1, r1	; 0x01
    2a6e:	10 82       	st	Z, r1
	TCCR1A=0;
    2a70:	ef e4       	ldi	r30, 0x4F	; 79
    2a72:	f0 e0       	ldi	r31, 0x00	; 0
    2a74:	10 82       	st	Z, r1
	TCCR1B=0;
    2a76:	ee e4       	ldi	r30, 0x4E	; 78
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	10 82       	st	Z, r1
	TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));  // Disable interrupts
    2a7c:	a9 e5       	ldi	r26, 0x59	; 89
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e9 e5       	ldi	r30, 0x59	; 89
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	8b 7e       	andi	r24, 0xEB	; 235
    2a88:	8c 93       	st	X, r24
	Timer1_callback = NULL_PTR;
    2a8a:	10 92 17 01 	sts	0x0117, r1
    2a8e:	10 92 16 01 	sts	0x0116, r1
}
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*b_ptr)(void))
{
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <Timer1_setCallBack+0x6>
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	9a 83       	std	Y+2, r25	; 0x02
    2aa4:	89 83       	std	Y+1, r24	; 0x01
	Timer1_callback = b_ptr;
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    2aaa:	90 93 17 01 	sts	0x0117, r25
    2aae:	80 93 16 01 	sts	0x0116, r24
}
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2abc:	df 93       	push	r29
    2abe:	cf 93       	push	r28
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <UART_init+0x6>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <UART_init+0x8>
    2ac4:	cd b7       	in	r28, 0x3d	; 61
    2ac6:	de b7       	in	r29, 0x3e	; 62
    2ac8:	9c 83       	std	Y+4, r25	; 0x04
    2aca:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2acc:	1a 82       	std	Y+2, r1	; 0x02
    2ace:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2ad0:	eb e2       	ldi	r30, 0x2B	; 43
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2ad8:	ea e2       	ldi	r30, 0x2A	; 42
    2ada:	f0 e0       	ldi	r31, 0x00	; 0
    2adc:	88 e1       	ldi	r24, 0x18	; 24
    2ade:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC |= (1<<URSEL);
    2ae0:	a0 e4       	ldi	r26, 0x40	; 64
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e0 e4       	ldi	r30, 0x40	; 64
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	80 68       	ori	r24, 0x80	; 128
    2aec:	8c 93       	st	X, r24
	UCSRC &= ~(1<<UMSEL);
    2aee:	a0 e4       	ldi	r26, 0x40	; 64
    2af0:	b0 e0       	ldi	r27, 0x00	; 0
    2af2:	e0 e4       	ldi	r30, 0x40	; 64
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	8f 7b       	andi	r24, 0xBF	; 191
    2afa:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF9) | (Config_Ptr->bit_data); /* Choosing Character Size */
    2afc:	a0 e4       	ldi	r26, 0x40	; 64
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	e0 e4       	ldi	r30, 0x40	; 64
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	80 81       	ld	r24, Z
    2b06:	98 2f       	mov	r25, r24
    2b08:	99 7f       	andi	r25, 0xF9	; 249
    2b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0e:	80 81       	ld	r24, Z
    2b10:	89 2b       	or	r24, r25
    2b12:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xCF) | (Config_Ptr->parity);   /* Choosing Parity */
    2b14:	a0 e4       	ldi	r26, 0x40	; 64
    2b16:	b0 e0       	ldi	r27, 0x00	; 0
    2b18:	e0 e4       	ldi	r30, 0x40	; 64
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	80 81       	ld	r24, Z
    2b1e:	98 2f       	mov	r25, r24
    2b20:	9f 7c       	andi	r25, 0xCF	; 207
    2b22:	eb 81       	ldd	r30, Y+3	; 0x03
    2b24:	fc 81       	ldd	r31, Y+4	; 0x04
    2b26:	81 81       	ldd	r24, Z+1	; 0x01
    2b28:	89 2b       	or	r24, r25
    2b2a:	8c 93       	st	X, r24
	UCSRC = (UCSRC&0xF7) | ((Config_Ptr->stop_bit)<<3); /* Choosing Number of Stop Bits */
    2b2c:	a0 e4       	ldi	r26, 0x40	; 64
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	e0 e4       	ldi	r30, 0x40	; 64
    2b32:	f0 e0       	ldi	r31, 0x00	; 0
    2b34:	80 81       	ld	r24, Z
    2b36:	28 2f       	mov	r18, r24
    2b38:	27 7f       	andi	r18, 0xF7	; 247
    2b3a:	eb 81       	ldd	r30, Y+3	; 0x03
    2b3c:	fc 81       	ldd	r31, Y+4	; 0x04
    2b3e:	82 81       	ldd	r24, Z+2	; 0x02
    2b40:	88 2f       	mov	r24, r24
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	82 2b       	or	r24, r18
    2b52:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2b54:	eb 81       	ldd	r30, Y+3	; 0x03
    2b56:	fc 81       	ldd	r31, Y+4	; 0x04
    2b58:	83 81       	ldd	r24, Z+3	; 0x03
    2b5a:	94 81       	ldd	r25, Z+4	; 0x04
    2b5c:	cc 01       	movw	r24, r24
    2b5e:	a0 e0       	ldi	r26, 0x00	; 0
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	aa 1f       	adc	r26, r26
    2b68:	bb 1f       	adc	r27, r27
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	aa 1f       	adc	r26, r26
    2b70:	bb 1f       	adc	r27, r27
    2b72:	88 0f       	add	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	aa 1f       	adc	r26, r26
    2b78:	bb 1f       	adc	r27, r27
    2b7a:	9c 01       	movw	r18, r24
    2b7c:	ad 01       	movw	r20, r26
    2b7e:	80 e0       	ldi	r24, 0x00	; 0
    2b80:	92 e1       	ldi	r25, 0x12	; 18
    2b82:	aa e7       	ldi	r26, 0x7A	; 122
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__udivmodsi4>
    2b8e:	da 01       	movw	r26, r20
    2b90:	c9 01       	movw	r24, r18
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	9a 83       	std	Y+2, r25	; 0x02
    2b96:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b98:	e0 e4       	ldi	r30, 0x40	; 64
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba0:	89 2f       	mov	r24, r25
    2ba2:	99 27       	eor	r25, r25
    2ba4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ba6:	e9 e2       	ldi	r30, 0x29	; 41
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	80 83       	st	Z, r24
}
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	0f 92       	push	r0
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2bc8:	eb e2       	ldi	r30, 0x2B	; 43
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	88 2f       	mov	r24, r24
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	80 72       	andi	r24, 0x20	; 32
    2bd4:	90 70       	andi	r25, 0x00	; 0
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	b9 f3       	breq	.-18     	; 0x2bc8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2bda:	ec e2       	ldi	r30, 0x2C	; 44
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2bf2:	eb e2       	ldi	r30, 0x2B	; 43
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	88 23       	and	r24, r24
    2bfa:	dc f7       	brge	.-10     	; 0x2bf2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2bfc:	ec e2       	ldi	r30, 0x2C	; 44
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
}
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <UART_sendString+0x6>
    2c0e:	0f 92       	push	r0
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	9b 83       	std	Y+3, r25	; 0x03
    2c16:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c18:	19 82       	std	Y+1, r1	; 0x01
    2c1a:	0e c0       	rjmp	.+28     	; 0x2c38 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	28 2f       	mov	r18, r24
    2c20:	30 e0       	ldi	r19, 0x00	; 0
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	9b 81       	ldd	r25, Y+3	; 0x03
    2c26:	fc 01       	movw	r30, r24
    2c28:	e2 0f       	add	r30, r18
    2c2a:	f3 1f       	adc	r31, r19
    2c2c:	80 81       	ld	r24, Z
    2c2e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <UART_sendByte>
		i++;
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	8f 5f       	subi	r24, 0xFF	; 255
    2c36:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	28 2f       	mov	r18, r24
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	9b 81       	ldd	r25, Y+3	; 0x03
    2c42:	fc 01       	movw	r30, r24
    2c44:	e2 0f       	add	r30, r18
    2c46:	f3 1f       	adc	r31, r19
    2c48:	80 81       	ld	r24, Z
    2c4a:	88 23       	and	r24, r24
    2c4c:	39 f7       	brne	.-50     	; 0x2c1c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <UART_receiveString+0xa>
    2c64:	0f 92       	push	r0
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	9b 83       	std	Y+3, r25	; 0x03
    2c6c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c6e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	28 2f       	mov	r18, r24
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	8a 81       	ldd	r24, Y+2	; 0x02
    2c78:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7a:	8c 01       	movw	r16, r24
    2c7c:	02 0f       	add	r16, r18
    2c7e:	13 1f       	adc	r17, r19
    2c80:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_recieveByte>
    2c84:	f8 01       	movw	r30, r16
    2c86:	80 83       	st	Z, r24
    2c88:	0f c0       	rjmp	.+30     	; 0x2ca8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	8f 5f       	subi	r24, 0xFF	; 255
    2c8e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	8a 81       	ldd	r24, Y+2	; 0x02
    2c98:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9a:	8c 01       	movw	r16, r24
    2c9c:	02 0f       	add	r16, r18
    2c9e:	13 1f       	adc	r17, r19
    2ca0:	0e 94 f5 15 	call	0x2bea	; 0x2bea <UART_recieveByte>
    2ca4:	f8 01       	movw	r30, r16
    2ca6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	28 2f       	mov	r18, r24
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb2:	fc 01       	movw	r30, r24
    2cb4:	e2 0f       	add	r30, r18
    2cb6:	f3 1f       	adc	r31, r19
    2cb8:	80 81       	ld	r24, Z
    2cba:	83 32       	cpi	r24, 0x23	; 35
    2cbc:	31 f7       	brne	.-52     	; 0x2c8a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	fc 01       	movw	r30, r24
    2cca:	e2 0f       	add	r30, r18
    2ccc:	f3 1f       	adc	r31, r19
    2cce:	10 82       	st	Z, r1
}
    2cd0:	0f 90       	pop	r0
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	cf 91       	pop	r28
    2cd8:	df 91       	pop	r29
    2cda:	1f 91       	pop	r17
    2cdc:	0f 91       	pop	r16
    2cde:	08 95       	ret

00002ce0 <__udivmodsi4>:
    2ce0:	a1 e2       	ldi	r26, 0x21	; 33
    2ce2:	1a 2e       	mov	r1, r26
    2ce4:	aa 1b       	sub	r26, r26
    2ce6:	bb 1b       	sub	r27, r27
    2ce8:	fd 01       	movw	r30, r26
    2cea:	0d c0       	rjmp	.+26     	; 0x2d06 <__udivmodsi4_ep>

00002cec <__udivmodsi4_loop>:
    2cec:	aa 1f       	adc	r26, r26
    2cee:	bb 1f       	adc	r27, r27
    2cf0:	ee 1f       	adc	r30, r30
    2cf2:	ff 1f       	adc	r31, r31
    2cf4:	a2 17       	cp	r26, r18
    2cf6:	b3 07       	cpc	r27, r19
    2cf8:	e4 07       	cpc	r30, r20
    2cfa:	f5 07       	cpc	r31, r21
    2cfc:	20 f0       	brcs	.+8      	; 0x2d06 <__udivmodsi4_ep>
    2cfe:	a2 1b       	sub	r26, r18
    2d00:	b3 0b       	sbc	r27, r19
    2d02:	e4 0b       	sbc	r30, r20
    2d04:	f5 0b       	sbc	r31, r21

00002d06 <__udivmodsi4_ep>:
    2d06:	66 1f       	adc	r22, r22
    2d08:	77 1f       	adc	r23, r23
    2d0a:	88 1f       	adc	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	1a 94       	dec	r1
    2d10:	69 f7       	brne	.-38     	; 0x2cec <__udivmodsi4_loop>
    2d12:	60 95       	com	r22
    2d14:	70 95       	com	r23
    2d16:	80 95       	com	r24
    2d18:	90 95       	com	r25
    2d1a:	9b 01       	movw	r18, r22
    2d1c:	ac 01       	movw	r20, r24
    2d1e:	bd 01       	movw	r22, r26
    2d20:	cf 01       	movw	r24, r30
    2d22:	08 95       	ret

00002d24 <__prologue_saves__>:
    2d24:	2f 92       	push	r2
    2d26:	3f 92       	push	r3
    2d28:	4f 92       	push	r4
    2d2a:	5f 92       	push	r5
    2d2c:	6f 92       	push	r6
    2d2e:	7f 92       	push	r7
    2d30:	8f 92       	push	r8
    2d32:	9f 92       	push	r9
    2d34:	af 92       	push	r10
    2d36:	bf 92       	push	r11
    2d38:	cf 92       	push	r12
    2d3a:	df 92       	push	r13
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	cf 93       	push	r28
    2d46:	df 93       	push	r29
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	ca 1b       	sub	r28, r26
    2d4e:	db 0b       	sbc	r29, r27
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	09 94       	ijmp

00002d5c <__epilogue_restores__>:
    2d5c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d5e:	39 88       	ldd	r3, Y+17	; 0x11
    2d60:	48 88       	ldd	r4, Y+16	; 0x10
    2d62:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d64:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d66:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d68:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d6e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d70:	c8 84       	ldd	r12, Y+8	; 0x08
    2d72:	df 80       	ldd	r13, Y+7	; 0x07
    2d74:	ee 80       	ldd	r14, Y+6	; 0x06
    2d76:	fd 80       	ldd	r15, Y+5	; 0x05
    2d78:	0c 81       	ldd	r16, Y+4	; 0x04
    2d7a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d7c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d7e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d80:	ce 0f       	add	r28, r30
    2d82:	d1 1d       	adc	r29, r1
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	ed 01       	movw	r28, r26
    2d90:	08 95       	ret

00002d92 <itoa>:
    2d92:	fb 01       	movw	r30, r22
    2d94:	9f 01       	movw	r18, r30
    2d96:	e8 94       	clt
    2d98:	42 30       	cpi	r20, 0x02	; 2
    2d9a:	c4 f0       	brlt	.+48     	; 0x2dcc <itoa+0x3a>
    2d9c:	45 32       	cpi	r20, 0x25	; 37
    2d9e:	b4 f4       	brge	.+44     	; 0x2dcc <itoa+0x3a>
    2da0:	4a 30       	cpi	r20, 0x0A	; 10
    2da2:	29 f4       	brne	.+10     	; 0x2dae <itoa+0x1c>
    2da4:	97 fb       	bst	r25, 7
    2da6:	1e f4       	brtc	.+6      	; 0x2dae <itoa+0x1c>
    2da8:	90 95       	com	r25
    2daa:	81 95       	neg	r24
    2dac:	9f 4f       	sbci	r25, 0xFF	; 255
    2dae:	64 2f       	mov	r22, r20
    2db0:	77 27       	eor	r23, r23
    2db2:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <__udivmodhi4>
    2db6:	80 5d       	subi	r24, 0xD0	; 208
    2db8:	8a 33       	cpi	r24, 0x3A	; 58
    2dba:	0c f0       	brlt	.+2      	; 0x2dbe <itoa+0x2c>
    2dbc:	89 5d       	subi	r24, 0xD9	; 217
    2dbe:	81 93       	st	Z+, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	a1 f7       	brne	.-24     	; 0x2dae <itoa+0x1c>
    2dc6:	16 f4       	brtc	.+4      	; 0x2dcc <itoa+0x3a>
    2dc8:	5d e2       	ldi	r21, 0x2D	; 45
    2dca:	51 93       	st	Z+, r21
    2dcc:	10 82       	st	Z, r1
    2dce:	c9 01       	movw	r24, r18
    2dd0:	0c 94 ea 16 	jmp	0x2dd4	; 0x2dd4 <strrev>

00002dd4 <strrev>:
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	fc 01       	movw	r30, r24
    2dd8:	67 2f       	mov	r22, r23
    2dda:	71 91       	ld	r23, Z+
    2ddc:	77 23       	and	r23, r23
    2dde:	e1 f7       	brne	.-8      	; 0x2dd8 <strrev+0x4>
    2de0:	32 97       	sbiw	r30, 0x02	; 2
    2de2:	04 c0       	rjmp	.+8      	; 0x2dec <strrev+0x18>
    2de4:	7c 91       	ld	r23, X
    2de6:	6d 93       	st	X+, r22
    2de8:	70 83       	st	Z, r23
    2dea:	62 91       	ld	r22, -Z
    2dec:	ae 17       	cp	r26, r30
    2dee:	bf 07       	cpc	r27, r31
    2df0:	c8 f3       	brcs	.-14     	; 0x2de4 <strrev+0x10>
    2df2:	08 95       	ret

00002df4 <__udivmodhi4>:
    2df4:	aa 1b       	sub	r26, r26
    2df6:	bb 1b       	sub	r27, r27
    2df8:	51 e1       	ldi	r21, 0x11	; 17
    2dfa:	07 c0       	rjmp	.+14     	; 0x2e0a <__udivmodhi4_ep>

00002dfc <__udivmodhi4_loop>:
    2dfc:	aa 1f       	adc	r26, r26
    2dfe:	bb 1f       	adc	r27, r27
    2e00:	a6 17       	cp	r26, r22
    2e02:	b7 07       	cpc	r27, r23
    2e04:	10 f0       	brcs	.+4      	; 0x2e0a <__udivmodhi4_ep>
    2e06:	a6 1b       	sub	r26, r22
    2e08:	b7 0b       	sbc	r27, r23

00002e0a <__udivmodhi4_ep>:
    2e0a:	88 1f       	adc	r24, r24
    2e0c:	99 1f       	adc	r25, r25
    2e0e:	5a 95       	dec	r21
    2e10:	a9 f7       	brne	.-22     	; 0x2dfc <__udivmodhi4_loop>
    2e12:	80 95       	com	r24
    2e14:	90 95       	com	r25
    2e16:	bc 01       	movw	r22, r24
    2e18:	cd 01       	movw	r24, r26
    2e1a:	08 95       	ret

00002e1c <_exit>:
    2e1c:	f8 94       	cli

00002e1e <__stop_program>:
    2e1e:	ff cf       	rjmp	.-2      	; 0x2e1e <__stop_program>
