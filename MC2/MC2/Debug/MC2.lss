
MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00002478  0000250c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  0080007c  0080007c  00002528  2**0
                  ALLOC
  3 .stab         00002874  00000000  00000000  00002528  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000139d  00000000  00000000  00004d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006139  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006279  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008032  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a887  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3f 0f 	jmp	0x1e7e	; 0x1e7e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 72 0f 	jmp	0x1ee4	; 0x1ee4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 39       	cpi	r26, 0x9B	; 155
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 07 	call	0xe8e	; 0xe8e <main>
      8a:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Recive_pass>:
uint8 CHECK_PASS[5];
uint8 charactar_check='#';
/****************************Functions*************************************/
/**************************************************************************/
void Recive_pass(uint8 *pass)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <Recive_pass+0xa>
     b50:	0f 92       	push	r0
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	9b 83       	std	Y+3, r25	; 0x03
     b58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0; i < PASSWORD_LENGTH ;i++)
     b5a:	19 82       	std	Y+1, r1	; 0x01
     b5c:	0f c0       	rjmp	.+30     	; 0xb7c <Recive_pass+0x36>
	{
		pass[i]=UART_recieveByte();
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	9b 81       	ldd	r25, Y+3	; 0x03
     b68:	8c 01       	movw	r16, r24
     b6a:	02 0f       	add	r16, r18
     b6c:	13 1f       	adc	r17, r19
     b6e:	0e 94 66 11 	call	0x22cc	; 0x22cc <UART_recieveByte>
     b72:	f8 01       	movw	r30, r16
     b74:	80 83       	st	Z, r24
/****************************Functions*************************************/
/**************************************************************************/
void Recive_pass(uint8 *pass)
{
	uint8 i;
	for(i=0; i < PASSWORD_LENGTH ;i++)
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	70 f3       	brcs	.-36     	; 0xb5e <Recive_pass+0x18>
	{
		pass[i]=UART_recieveByte();
	}
}
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	08 95       	ret

00000b92 <EEPROM_writePassword>:
void EEPROM_writePassword(uint8 *password)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	61 97       	sbiw	r28, 0x11	; 17
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	99 8b       	std	Y+17, r25	; 0x11
     ba8:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
    for (i = 0; i < PASSWORD_LENGTH; i++)
     baa:	1f 86       	std	Y+15, r1	; 0x0f
     bac:	88 c0       	rjmp	.+272    	; 0xcbe <EEPROM_writePassword+0x12c>
    {
    	EEPROM_writeByte((EEPROM_PASSWORD_ADDRESS + i) , password[i]);
     bae:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	8f 5e       	subi	r24, 0xEF	; 239
     bb6:	9c 4f       	sbci	r25, 0xFC	; 252
     bb8:	ac 01       	movw	r20, r24
     bba:	8f 85       	ldd	r24, Y+15	; 0x0f
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	88 89       	ldd	r24, Y+16	; 0x10
     bc2:	99 89       	ldd	r25, Y+17	; 0x11
     bc4:	fc 01       	movw	r30, r24
     bc6:	e2 0f       	add	r30, r18
     bc8:	f3 1f       	adc	r31, r19
     bca:	20 81       	ld	r18, Z
     bcc:	ca 01       	movw	r24, r20
     bce:	62 2f       	mov	r22, r18
     bd0:	0e 94 46 0b 	call	0x168c	; 0x168c <EEPROM_writeByte>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e2       	ldi	r26, 0x20	; 32
     bda:	b1 e4       	ldi	r27, 0x41	; 65
     bdc:	8b 87       	std	Y+11, r24	; 0x0b
     bde:	9c 87       	std	Y+12, r25	; 0x0c
     be0:	ad 87       	std	Y+13, r26	; 0x0d
     be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be4:	6b 85       	ldd	r22, Y+11	; 0x0b
     be6:	7c 85       	ldd	r23, Y+12	; 0x0c
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4a ef       	ldi	r20, 0xFA	; 250
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	8f 83       	std	Y+7, r24	; 0x07
     bfe:	98 87       	std	Y+8, r25	; 0x08
     c00:	a9 87       	std	Y+9, r26	; 0x09
     c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c04:	6f 81       	ldd	r22, Y+7	; 0x07
     c06:	78 85       	ldd	r23, Y+8	; 0x08
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e8       	ldi	r20, 0x80	; 128
     c12:	5f e3       	ldi	r21, 0x3F	; 63
     c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c18:	88 23       	and	r24, r24
     c1a:	2c f4       	brge	.+10     	; 0xc26 <EEPROM_writePassword+0x94>
		__ticks = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	3f c0       	rjmp	.+126    	; 0xca4 <EEPROM_writePassword+0x112>
	else if (__tmp > 65535)
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	3f ef       	ldi	r19, 0xFF	; 255
     c32:	4f e7       	ldi	r20, 0x7F	; 127
     c34:	57 e4       	ldi	r21, 0x47	; 71
     c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3a:	18 16       	cp	r1, r24
     c3c:	4c f5       	brge	.+82     	; 0xc90 <EEPROM_writePassword+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c40:	7c 85       	ldd	r23, Y+12	; 0x0c
     c42:	8d 85       	ldd	r24, Y+13	; 0x0d
     c44:	9e 85       	ldd	r25, Y+14	; 0x0e
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e2       	ldi	r20, 0x20	; 32
     c4c:	51 e4       	ldi	r21, 0x41	; 65
     c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <EEPROM_writePassword+0xf4>
     c68:	88 ec       	ldi	r24, 0xC8	; 200
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9c 83       	std	Y+4, r25	; 0x04
     c6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <EEPROM_writePassword+0xe2>
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	69 f7       	brne	.-38     	; 0xc68 <EEPROM_writePassword+0xd6>
     c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <EEPROM_writePassword+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	9e 83       	std	Y+6, r25	; 0x06
     ca2:	8d 83       	std	Y+5, r24	; 0x05
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	9e 81       	ldd	r25, Y+6	; 0x06
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <EEPROM_writePassword+0x11e>
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
	}
}
void EEPROM_writePassword(uint8 *password)
{
	uint8 i;
    for (i = 0; i < PASSWORD_LENGTH; i++)
     cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	8f 87       	std	Y+15, r24	; 0x0f
     cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc0:	85 30       	cpi	r24, 0x05	; 5
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <EEPROM_writePassword+0x134>
     cc4:	74 cf       	rjmp	.-280    	; 0xbae <EEPROM_writePassword+0x1c>
    {
    	EEPROM_writeByte((EEPROM_PASSWORD_ADDRESS + i) , password[i]);
    	_delay_ms(10);
    }
}
     cc6:	61 96       	adiw	r28, 0x11	; 17
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <EEPROM_readPassword>:
void EEPROM_readPassword(uint8 *password)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	61 97       	sbiw	r28, 0x11	; 17
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	99 8b       	std	Y+17, r25	; 0x11
     cee:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
    for (i = 0; i < PASSWORD_LENGTH; i++)
     cf0:	1f 86       	std	Y+15, r1	; 0x0f
     cf2:	86 c0       	rjmp	.+268    	; 0xe00 <EEPROM_readPassword+0x128>
    {
    	EEPROM_readByte(EEPROM_PASSWORD_ADDRESS + i,&password[i]);
     cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	8f 5e       	subi	r24, 0xEF	; 239
     cfc:	9c 4f       	sbci	r25, 0xFC	; 252
     cfe:	ac 01       	movw	r20, r24
     d00:	8f 85       	ldd	r24, Y+15	; 0x0f
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	88 89       	ldd	r24, Y+16	; 0x10
     d08:	99 89       	ldd	r25, Y+17	; 0x11
     d0a:	28 0f       	add	r18, r24
     d0c:	39 1f       	adc	r19, r25
     d0e:	ca 01       	movw	r24, r20
     d10:	b9 01       	movw	r22, r18
     d12:	0e 94 87 0b 	call	0x170e	; 0x170e <EEPROM_readByte>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e2       	ldi	r26, 0x20	; 32
     d1c:	b1 e4       	ldi	r27, 0x41	; 65
     d1e:	8b 87       	std	Y+11, r24	; 0x0b
     d20:	9c 87       	std	Y+12, r25	; 0x0c
     d22:	ad 87       	std	Y+13, r26	; 0x0d
     d24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d26:	6b 85       	ldd	r22, Y+11	; 0x0b
     d28:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	4a ef       	ldi	r20, 0xFA	; 250
     d34:	54 e4       	ldi	r21, 0x44	; 68
     d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	8f 83       	std	Y+7, r24	; 0x07
     d40:	98 87       	std	Y+8, r25	; 0x08
     d42:	a9 87       	std	Y+9, r26	; 0x09
     d44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d46:	6f 81       	ldd	r22, Y+7	; 0x07
     d48:	78 85       	ldd	r23, Y+8	; 0x08
     d4a:	89 85       	ldd	r24, Y+9	; 0x09
     d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e8       	ldi	r20, 0x80	; 128
     d54:	5f e3       	ldi	r21, 0x3F	; 63
     d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d5a:	88 23       	and	r24, r24
     d5c:	2c f4       	brge	.+10     	; 0xd68 <EEPROM_readPassword+0x90>
		__ticks = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9e 83       	std	Y+6, r25	; 0x06
     d64:	8d 83       	std	Y+5, r24	; 0x05
     d66:	3f c0       	rjmp	.+126    	; 0xde6 <EEPROM_readPassword+0x10e>
	else if (__tmp > 65535)
     d68:	6f 81       	ldd	r22, Y+7	; 0x07
     d6a:	78 85       	ldd	r23, Y+8	; 0x08
     d6c:	89 85       	ldd	r24, Y+9	; 0x09
     d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	3f ef       	ldi	r19, 0xFF	; 255
     d74:	4f e7       	ldi	r20, 0x7F	; 127
     d76:	57 e4       	ldi	r21, 0x47	; 71
     d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d7c:	18 16       	cp	r1, r24
     d7e:	4c f5       	brge	.+82     	; 0xdd2 <EEPROM_readPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d80:	6b 85       	ldd	r22, Y+11	; 0x0b
     d82:	7c 85       	ldd	r23, Y+12	; 0x0c
     d84:	8d 85       	ldd	r24, Y+13	; 0x0d
     d86:	9e 85       	ldd	r25, Y+14	; 0x0e
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e2       	ldi	r20, 0x20	; 32
     d8e:	51 e4       	ldi	r21, 0x41	; 65
     d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	0f c0       	rjmp	.+30     	; 0xdc8 <EEPROM_readPassword+0xf0>
     daa:	88 ec       	ldi	r24, 0xC8	; 200
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	8b 83       	std	Y+3, r24	; 0x03
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <EEPROM_readPassword+0xde>
     dba:	9c 83       	std	Y+4, r25	; 0x04
     dbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	69 f7       	brne	.-38     	; 0xdaa <EEPROM_readPassword+0xd2>
     dd0:	14 c0       	rjmp	.+40     	; 0xdfa <EEPROM_readPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd2:	6f 81       	ldd	r22, Y+7	; 0x07
     dd4:	78 85       	ldd	r23, Y+8	; 0x08
     dd6:	89 85       	ldd	r24, Y+9	; 0x09
     dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <EEPROM_readPassword+0x11a>
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
    }
}
void EEPROM_readPassword(uint8 *password)
{
	uint8 i;
    for (i = 0; i < PASSWORD_LENGTH; i++)
     dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	8f 87       	std	Y+15, r24	; 0x0f
     e00:	8f 85       	ldd	r24, Y+15	; 0x0f
     e02:	85 30       	cpi	r24, 0x05	; 5
     e04:	08 f4       	brcc	.+2      	; 0xe08 <EEPROM_readPassword+0x130>
     e06:	76 cf       	rjmp	.-276    	; 0xcf4 <EEPROM_readPassword+0x1c>
    {
    	EEPROM_readByte(EEPROM_PASSWORD_ADDRESS + i,&password[i]);
    	_delay_ms(10);
    }
}
     e08:	61 96       	adiw	r28, 0x11	; 17
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <EEPROM_verifyPassword>:
uint8 EEPROM_verifyPassword(uint8 *input_Password)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	29 97       	sbiw	r28, 0x09	; 9
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	98 87       	std	Y+8, r25	; 0x08
     e30:	8f 83       	std	Y+7, r24	; 0x07
    uint8 stored_Password[PASSWORD_LENGTH];
    EEPROM_readPassword(stored_Password);
     e32:	ce 01       	movw	r24, r28
     e34:	02 96       	adiw	r24, 0x02	; 2
     e36:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <EEPROM_readPassword>
    uint8 i;
    for (i = 0; i < PASSWORD_LENGTH ; i++)
     e3a:	19 82       	std	Y+1, r1	; 0x01
     e3c:	19 c0       	rjmp	.+50     	; 0xe70 <EEPROM_verifyPassword+0x56>
    {
        if (input_Password[i] != stored_Password[i])
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	28 2f       	mov	r18, r24
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	8f 81       	ldd	r24, Y+7	; 0x07
     e46:	98 85       	ldd	r25, Y+8	; 0x08
     e48:	fc 01       	movw	r30, r24
     e4a:	e2 0f       	add	r30, r18
     e4c:	f3 1f       	adc	r31, r19
     e4e:	40 81       	ld	r20, Z
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	ce 01       	movw	r24, r28
     e58:	02 96       	adiw	r24, 0x02	; 2
     e5a:	fc 01       	movw	r30, r24
     e5c:	e2 0f       	add	r30, r18
     e5e:	f3 1f       	adc	r31, r19
     e60:	80 81       	ld	r24, Z
     e62:	48 17       	cp	r20, r24
     e64:	11 f0       	breq	.+4      	; 0xe6a <EEPROM_verifyPassword+0x50>
        {
            return 0;
     e66:	19 86       	std	Y+9, r1	; 0x09
     e68:	08 c0       	rjmp	.+16     	; 0xe7a <EEPROM_verifyPassword+0x60>
uint8 EEPROM_verifyPassword(uint8 *input_Password)
{
    uint8 stored_Password[PASSWORD_LENGTH];
    EEPROM_readPassword(stored_Password);
    uint8 i;
    for (i = 0; i < PASSWORD_LENGTH ; i++)
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	85 30       	cpi	r24, 0x05	; 5
     e74:	20 f3       	brcs	.-56     	; 0xe3e <EEPROM_verifyPassword+0x24>
        if (input_Password[i] != stored_Password[i])
        {
            return 0;
        }
    }
    return 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	89 87       	std	Y+9, r24	; 0x09
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
}
     e7c:	29 96       	adiw	r28, 0x09	; 9
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <main>:
int main()
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
     e96:	c8 55       	subi	r28, 0x58	; 88
     e98:	d0 40       	sbci	r29, 0x00	; 0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
	/**************************Initialization***************************/
	Timer1_ConfigType Timer1_Configurations={0,0,clk_1,Normal};
     ea4:	ce 01       	movw	r24, r28
     ea6:	ca 96       	adiw	r24, 0x3a	; 58
     ea8:	2c 96       	adiw	r28, 0x0c	; 12
     eaa:	9f af       	std	Y+63, r25	; 0x3f
     eac:	8e af       	std	Y+62, r24	; 0x3e
     eae:	2c 97       	sbiw	r28, 0x0c	; 12
     eb0:	e5 e7       	ldi	r30, 0x75	; 117
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	2e 96       	adiw	r28, 0x0e	; 14
     eb6:	ff af       	std	Y+63, r31	; 0x3f
     eb8:	ee af       	std	Y+62, r30	; 0x3e
     eba:	2e 97       	sbiw	r28, 0x0e	; 14
     ebc:	f6 e0       	ldi	r31, 0x06	; 6
     ebe:	2f 96       	adiw	r28, 0x0f	; 15
     ec0:	ff af       	std	Y+63, r31	; 0x3f
     ec2:	2f 97       	sbiw	r28, 0x0f	; 15
     ec4:	2e 96       	adiw	r28, 0x0e	; 14
     ec6:	ee ad       	ldd	r30, Y+62	; 0x3e
     ec8:	ff ad       	ldd	r31, Y+63	; 0x3f
     eca:	2e 97       	sbiw	r28, 0x0e	; 14
     ecc:	00 80       	ld	r0, Z
     ece:	2e 96       	adiw	r28, 0x0e	; 14
     ed0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ed2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ed4:	2e 97       	sbiw	r28, 0x0e	; 14
     ed6:	01 96       	adiw	r24, 0x01	; 1
     ed8:	2e 96       	adiw	r28, 0x0e	; 14
     eda:	9f af       	std	Y+63, r25	; 0x3f
     edc:	8e af       	std	Y+62, r24	; 0x3e
     ede:	2e 97       	sbiw	r28, 0x0e	; 14
     ee0:	2c 96       	adiw	r28, 0x0c	; 12
     ee2:	ee ad       	ldd	r30, Y+62	; 0x3e
     ee4:	ff ad       	ldd	r31, Y+63	; 0x3f
     ee6:	2c 97       	sbiw	r28, 0x0c	; 12
     ee8:	00 82       	st	Z, r0
     eea:	2c 96       	adiw	r28, 0x0c	; 12
     eec:	8e ad       	ldd	r24, Y+62	; 0x3e
     eee:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef0:	2c 97       	sbiw	r28, 0x0c	; 12
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	2c 96       	adiw	r28, 0x0c	; 12
     ef6:	9f af       	std	Y+63, r25	; 0x3f
     ef8:	8e af       	std	Y+62, r24	; 0x3e
     efa:	2c 97       	sbiw	r28, 0x0c	; 12
     efc:	2f 96       	adiw	r28, 0x0f	; 15
     efe:	9f ad       	ldd	r25, Y+63	; 0x3f
     f00:	2f 97       	sbiw	r28, 0x0f	; 15
     f02:	91 50       	subi	r25, 0x01	; 1
     f04:	2f 96       	adiw	r28, 0x0f	; 15
     f06:	9f af       	std	Y+63, r25	; 0x3f
     f08:	2f 97       	sbiw	r28, 0x0f	; 15
     f0a:	2f 96       	adiw	r28, 0x0f	; 15
     f0c:	ef ad       	ldd	r30, Y+63	; 0x3f
     f0e:	2f 97       	sbiw	r28, 0x0f	; 15
     f10:	ee 23       	and	r30, r30
     f12:	c1 f6       	brne	.-80     	; 0xec4 <main+0x36>
	TWI_ConfigType TWI_Configurations = {MASTER_ADDRESS,RATE1};
     f14:	ce 01       	movw	r24, r28
     f16:	80 5c       	subi	r24, 0xC0	; 192
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	61 96       	adiw	r28, 0x11	; 17
     f1c:	9f af       	std	Y+63, r25	; 0x3f
     f1e:	8e af       	std	Y+62, r24	; 0x3e
     f20:	61 97       	sbiw	r28, 0x11	; 17
     f22:	e0 e7       	ldi	r30, 0x70	; 112
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	63 96       	adiw	r28, 0x13	; 19
     f28:	ff af       	std	Y+63, r31	; 0x3f
     f2a:	ee af       	std	Y+62, r30	; 0x3e
     f2c:	63 97       	sbiw	r28, 0x13	; 19
     f2e:	f5 e0       	ldi	r31, 0x05	; 5
     f30:	64 96       	adiw	r28, 0x14	; 20
     f32:	ff af       	std	Y+63, r31	; 0x3f
     f34:	64 97       	sbiw	r28, 0x14	; 20
     f36:	63 96       	adiw	r28, 0x13	; 19
     f38:	ee ad       	ldd	r30, Y+62	; 0x3e
     f3a:	ff ad       	ldd	r31, Y+63	; 0x3f
     f3c:	63 97       	sbiw	r28, 0x13	; 19
     f3e:	00 80       	ld	r0, Z
     f40:	63 96       	adiw	r28, 0x13	; 19
     f42:	8e ad       	ldd	r24, Y+62	; 0x3e
     f44:	9f ad       	ldd	r25, Y+63	; 0x3f
     f46:	63 97       	sbiw	r28, 0x13	; 19
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	63 96       	adiw	r28, 0x13	; 19
     f4c:	9f af       	std	Y+63, r25	; 0x3f
     f4e:	8e af       	std	Y+62, r24	; 0x3e
     f50:	63 97       	sbiw	r28, 0x13	; 19
     f52:	61 96       	adiw	r28, 0x11	; 17
     f54:	ee ad       	ldd	r30, Y+62	; 0x3e
     f56:	ff ad       	ldd	r31, Y+63	; 0x3f
     f58:	61 97       	sbiw	r28, 0x11	; 17
     f5a:	00 82       	st	Z, r0
     f5c:	61 96       	adiw	r28, 0x11	; 17
     f5e:	8e ad       	ldd	r24, Y+62	; 0x3e
     f60:	9f ad       	ldd	r25, Y+63	; 0x3f
     f62:	61 97       	sbiw	r28, 0x11	; 17
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	61 96       	adiw	r28, 0x11	; 17
     f68:	9f af       	std	Y+63, r25	; 0x3f
     f6a:	8e af       	std	Y+62, r24	; 0x3e
     f6c:	61 97       	sbiw	r28, 0x11	; 17
     f6e:	64 96       	adiw	r28, 0x14	; 20
     f70:	9f ad       	ldd	r25, Y+63	; 0x3f
     f72:	64 97       	sbiw	r28, 0x14	; 20
     f74:	91 50       	subi	r25, 0x01	; 1
     f76:	64 96       	adiw	r28, 0x14	; 20
     f78:	9f af       	std	Y+63, r25	; 0x3f
     f7a:	64 97       	sbiw	r28, 0x14	; 20
     f7c:	64 96       	adiw	r28, 0x14	; 20
     f7e:	ef ad       	ldd	r30, Y+63	; 0x3f
     f80:	64 97       	sbiw	r28, 0x14	; 20
     f82:	ee 23       	and	r30, r30
     f84:	c1 f6       	brne	.-80     	; 0xf36 <main+0xa8>
	UART_ConfigType UART_Configurations = {BITS8,EVEN_PARITY,STOP_1BIT,BDR6};
     f86:	ce 01       	movw	r24, r28
     f88:	8b 5b       	subi	r24, 0xBB	; 187
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	66 96       	adiw	r28, 0x16	; 22
     f8e:	9f af       	std	Y+63, r25	; 0x3f
     f90:	8e af       	std	Y+62, r24	; 0x3e
     f92:	66 97       	sbiw	r28, 0x16	; 22
     f94:	8b e6       	ldi	r24, 0x6B	; 107
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	68 96       	adiw	r28, 0x18	; 24
     f9a:	9f af       	std	Y+63, r25	; 0x3f
     f9c:	8e af       	std	Y+62, r24	; 0x3e
     f9e:	68 97       	sbiw	r28, 0x18	; 24
     fa0:	95 e0       	ldi	r25, 0x05	; 5
     fa2:	69 96       	adiw	r28, 0x19	; 25
     fa4:	9f af       	std	Y+63, r25	; 0x3f
     fa6:	69 97       	sbiw	r28, 0x19	; 25
     fa8:	68 96       	adiw	r28, 0x18	; 24
     faa:	ee ad       	ldd	r30, Y+62	; 0x3e
     fac:	ff ad       	ldd	r31, Y+63	; 0x3f
     fae:	68 97       	sbiw	r28, 0x18	; 24
     fb0:	00 80       	ld	r0, Z
     fb2:	68 96       	adiw	r28, 0x18	; 24
     fb4:	8e ad       	ldd	r24, Y+62	; 0x3e
     fb6:	9f ad       	ldd	r25, Y+63	; 0x3f
     fb8:	68 97       	sbiw	r28, 0x18	; 24
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	68 96       	adiw	r28, 0x18	; 24
     fbe:	9f af       	std	Y+63, r25	; 0x3f
     fc0:	8e af       	std	Y+62, r24	; 0x3e
     fc2:	68 97       	sbiw	r28, 0x18	; 24
     fc4:	66 96       	adiw	r28, 0x16	; 22
     fc6:	ee ad       	ldd	r30, Y+62	; 0x3e
     fc8:	ff ad       	ldd	r31, Y+63	; 0x3f
     fca:	66 97       	sbiw	r28, 0x16	; 22
     fcc:	00 82       	st	Z, r0
     fce:	66 96       	adiw	r28, 0x16	; 22
     fd0:	8e ad       	ldd	r24, Y+62	; 0x3e
     fd2:	9f ad       	ldd	r25, Y+63	; 0x3f
     fd4:	66 97       	sbiw	r28, 0x16	; 22
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	66 96       	adiw	r28, 0x16	; 22
     fda:	9f af       	std	Y+63, r25	; 0x3f
     fdc:	8e af       	std	Y+62, r24	; 0x3e
     fde:	66 97       	sbiw	r28, 0x16	; 22
     fe0:	69 96       	adiw	r28, 0x19	; 25
     fe2:	9f ad       	ldd	r25, Y+63	; 0x3f
     fe4:	69 97       	sbiw	r28, 0x19	; 25
     fe6:	91 50       	subi	r25, 0x01	; 1
     fe8:	69 96       	adiw	r28, 0x19	; 25
     fea:	9f af       	std	Y+63, r25	; 0x3f
     fec:	69 97       	sbiw	r28, 0x19	; 25
     fee:	69 96       	adiw	r28, 0x19	; 25
     ff0:	ef ad       	ldd	r30, Y+63	; 0x3f
     ff2:	69 97       	sbiw	r28, 0x19	; 25
     ff4:	ee 23       	and	r30, r30
     ff6:	c1 f6       	brne	.-80     	; 0xfa8 <main+0x11a>
	SREG |=(1<<7);
     ff8:	af e5       	ldi	r26, 0x5F	; 95
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ef e5       	ldi	r30, 0x5F	; 95
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 68       	ori	r24, 0x80	; 128
    1004:	8c 93       	st	X, r24
	Buzzer_init();
    1006:	0e 94 cf 0a 	call	0x159e	; 0x159e <Buzzer_init>
	DcMotor_init();
    100a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <DcMotor_init>
	Timer1_init(&Timer1_Configurations);
    100e:	ce 01       	movw	r24, r28
    1010:	ca 96       	adiw	r24, 0x3a	; 58
    1012:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <Timer1_init>
	TWI_init(&TWI_Configurations);
    1016:	ce 01       	movw	r24, r28
    1018:	80 5c       	subi	r24, 0xC0	; 192
    101a:	9f 4f       	sbci	r25, 0xFF	; 255
    101c:	0e 94 30 10 	call	0x2060	; 0x2060 <TWI_init>
	UART_init(&UART_Configurations);
    1020:	ce 01       	movw	r24, r28
    1022:	8b 5b       	subi	r24, 0xBB	; 187
    1024:	9f 4f       	sbci	r25, 0xFF	; 255
    1026:	0e 94 cf 10 	call	0x219e	; 0x219e <UART_init>
	/*******************************************************************/

	while(1)
	{
		if(Step1==1)
    102a:	80 91 68 00 	lds	r24, 0x0068
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	e9 f5       	brne	.+122    	; 0x10ac <main+0x21e>
		{
			uint8 i;

			while(UART_recieveByte() != GET_READY){}
    1032:	0e 94 66 11 	call	0x22cc	; 0x22cc <UART_recieveByte>
    1036:	80 31       	cpi	r24, 0x10	; 16
    1038:	e1 f7       	brne	.-8      	; 0x1032 <main+0x1a4>

			Recive_pass(pass1);
    103a:	86 e9       	ldi	r24, 0x96	; 150
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Recive_pass>
			Recive_pass(pass2);
    1042:	81 e9       	ldi	r24, 0x91	; 145
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	0e 94 a3 05 	call	0xb46	; 0xb46 <Recive_pass>

			for(i=0; i<PASSWORD_LENGTH ;i++)
    104a:	19 ae       	std	Y+57, r1	; 0x39
    104c:	16 c0       	rjmp	.+44     	; 0x107a <main+0x1ec>
			{
				if(pass1[i] != pass2[i])
    104e:	89 ad       	ldd	r24, Y+57	; 0x39
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	fc 01       	movw	r30, r24
    1056:	ea 56       	subi	r30, 0x6A	; 106
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	20 81       	ld	r18, Z
    105c:	89 ad       	ldd	r24, Y+57	; 0x39
    105e:	88 2f       	mov	r24, r24
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	fc 01       	movw	r30, r24
    1064:	ef 56       	subi	r30, 0x6F	; 111
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	28 17       	cp	r18, r24
    106c:	19 f0       	breq	.+6      	; 0x1074 <main+0x1e6>
				{
					charactar_check='N';
    106e:	8e e4       	ldi	r24, 0x4E	; 78
    1070:	80 93 6a 00 	sts	0x006A, r24
			while(UART_recieveByte() != GET_READY){}

			Recive_pass(pass1);
			Recive_pass(pass2);

			for(i=0; i<PASSWORD_LENGTH ;i++)
    1074:	89 ad       	ldd	r24, Y+57	; 0x39
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	89 af       	std	Y+57, r24	; 0x39
    107a:	89 ad       	ldd	r24, Y+57	; 0x39
    107c:	85 30       	cpi	r24, 0x05	; 5
    107e:	38 f3       	brcs	.-50     	; 0x104e <main+0x1c0>
				{
					charactar_check='N';
				}
			}

			if(charactar_check == '#')
    1080:	80 91 6a 00 	lds	r24, 0x006A
    1084:	83 32       	cpi	r24, 0x23	; 35
    1086:	71 f4       	brne	.+28     	; 0x10a4 <main+0x216>
			{
				EEPROM_writePassword(pass1);
    1088:	86 e9       	ldi	r24, 0x96	; 150
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 c9 05 	call	0xb92	; 0xb92 <EEPROM_writePassword>
				UART_sendByte(charactar_check);
    1090:	80 91 6a 00 	lds	r24, 0x006A
    1094:	0e 94 4f 11 	call	0x229e	; 0x229e <UART_sendByte>
				Step2=1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	80 93 7c 00 	sts	0x007C, r24
				Step1=0;
    109e:	10 92 68 00 	sts	0x0068, r1
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <main+0x21e>
			}
			else
			{
				UART_sendByte(charactar_check);
    10a4:	80 91 6a 00 	lds	r24, 0x006A
    10a8:	0e 94 4f 11 	call	0x229e	; 0x229e <UART_sendByte>
			}
		}
		if(Step2 ==1)
    10ac:	80 91 7c 00 	lds	r24, 0x007C
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	69 f4       	brne	.+26     	; 0x10ce <main+0x240>
		{
			Step2=0;
    10b4:	10 92 7c 00 	sts	0x007C, r1

			/* Don't Exit While(1) Until You Receive From UART Of HMI_ECU */
			while(1)
			{
				if(UART_recieveByte() == '-') /* If The User Pressed '-' Button in Keypad Of HMI_ECU */
    10b8:	0e 94 66 11 	call	0x22cc	; 0x22cc <UART_recieveByte>
    10bc:	8d 32       	cpi	r24, 0x2D	; 45
    10be:	21 f4       	brne	.+8      	; 0x10c8 <main+0x23a>
				{
					/* Go To Change Password Settings */
					f_CHANGE_PASSWORD=1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	80 93 7f 00 	sts	0x007F, r24
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <main+0x240>

				}
				else /* If The User Pressed '+' Button in Keypad Of HMI_ECU */
				{
					/* Go To Open Door Settings */
					f_OPEN_DOOR=1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 7e 00 	sts	0x007E, r24
				}
			}
		}

		/* Open Door Settings */
		if(f_OPEN_DOOR == 1)
    10ce:	80 91 7e 00 	lds	r24, 0x007E
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <main+0x24a>
    10d6:	88 c1       	rjmp	.+784    	; 0x13e8 <main+0x55a>
		{
			UART_sendByte('A');
    10d8:	81 e4       	ldi	r24, 0x41	; 65
    10da:	0e 94 4f 11 	call	0x229e	; 0x229e <UART_sendByte>
			Recive_pass(in_pass); /* Receive USER Password From HMI_ECU */
    10de:	8c e8       	ldi	r24, 0x8C	; 140
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Recive_pass>
			if(EEPROM_verifyPassword(in_pass)) /* If The Two Passwords Are Identical */
    10e6:	8c e8       	ldi	r24, 0x8C	; 140
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 0d 07 	call	0xe1a	; 0xe1a <EEPROM_verifyPassword>
    10ee:	88 23       	and	r24, r24
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <main+0x266>
    10f2:	6c c1       	rjmp	.+728    	; 0x13cc <main+0x53e>
			{
				/* Open Door By Rotating Motor Then Got To Main Option Settings */
				DcMotor_Rotate(CW);
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 13 0b 	call	0x1626	; 0x1626 <DcMotor_Rotate>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e6       	ldi	r25, 0x60	; 96
    10fe:	aa e6       	ldi	r26, 0x6A	; 106
    1100:	b6 e4       	ldi	r27, 0x46	; 70
    1102:	8d ab       	std	Y+53, r24	; 0x35
    1104:	9e ab       	std	Y+54, r25	; 0x36
    1106:	af ab       	std	Y+55, r26	; 0x37
    1108:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110a:	6d a9       	ldd	r22, Y+53	; 0x35
    110c:	7e a9       	ldd	r23, Y+54	; 0x36
    110e:	8f a9       	ldd	r24, Y+55	; 0x37
    1110:	98 ad       	ldd	r25, Y+56	; 0x38
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4a ef       	ldi	r20, 0xFA	; 250
    1118:	54 e4       	ldi	r21, 0x44	; 68
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	89 ab       	std	Y+49, r24	; 0x31
    1124:	9a ab       	std	Y+50, r25	; 0x32
    1126:	ab ab       	std	Y+51, r26	; 0x33
    1128:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    112a:	69 a9       	ldd	r22, Y+49	; 0x31
    112c:	7a a9       	ldd	r23, Y+50	; 0x32
    112e:	8b a9       	ldd	r24, Y+51	; 0x33
    1130:	9c a9       	ldd	r25, Y+52	; 0x34
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	2c f4       	brge	.+10     	; 0x114c <main+0x2be>
		__ticks = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	98 ab       	std	Y+48, r25	; 0x30
    1148:	8f a7       	std	Y+47, r24	; 0x2f
    114a:	3f c0       	rjmp	.+126    	; 0x11ca <main+0x33c>
	else if (__tmp > 65535)
    114c:	69 a9       	ldd	r22, Y+49	; 0x31
    114e:	7a a9       	ldd	r23, Y+50	; 0x32
    1150:	8b a9       	ldd	r24, Y+51	; 0x33
    1152:	9c a9       	ldd	r25, Y+52	; 0x34
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	4f e7       	ldi	r20, 0x7F	; 127
    115a:	57 e4       	ldi	r21, 0x47	; 71
    115c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1160:	18 16       	cp	r1, r24
    1162:	4c f5       	brge	.+82     	; 0x11b6 <main+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1164:	6d a9       	ldd	r22, Y+53	; 0x35
    1166:	7e a9       	ldd	r23, Y+54	; 0x36
    1168:	8f a9       	ldd	r24, Y+55	; 0x37
    116a:	98 ad       	ldd	r25, Y+56	; 0x38
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	98 ab       	std	Y+48, r25	; 0x30
    118a:	8f a7       	std	Y+47, r24	; 0x2f
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <main+0x31e>
    118e:	88 ec       	ldi	r24, 0xC8	; 200
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9e a7       	std	Y+46, r25	; 0x2e
    1194:	8d a7       	std	Y+45, r24	; 0x2d
    1196:	8d a5       	ldd	r24, Y+45	; 0x2d
    1198:	9e a5       	ldd	r25, Y+46	; 0x2e
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <main+0x30c>
    119e:	9e a7       	std	Y+46, r25	; 0x2e
    11a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11a4:	98 a9       	ldd	r25, Y+48	; 0x30
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	98 ab       	std	Y+48, r25	; 0x30
    11aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ae:	98 a9       	ldd	r25, Y+48	; 0x30
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f7       	brne	.-38     	; 0x118e <main+0x300>
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <main+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b6:	69 a9       	ldd	r22, Y+49	; 0x31
    11b8:	7a a9       	ldd	r23, Y+50	; 0x32
    11ba:	8b a9       	ldd	r24, Y+51	; 0x33
    11bc:	9c a9       	ldd	r25, Y+52	; 0x34
    11be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	98 ab       	std	Y+48, r25	; 0x30
    11c8:	8f a7       	std	Y+47, r24	; 0x2f
    11ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    11cc:	98 a9       	ldd	r25, Y+48	; 0x30
    11ce:	9c a7       	std	Y+44, r25	; 0x2c
    11d0:	8b a7       	std	Y+43, r24	; 0x2b
    11d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <main+0x348>
    11da:	9c a7       	std	Y+44, r25	; 0x2c
    11dc:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(15000);
				DcMotor_Rotate(ST);
    11de:	82 e0       	ldi	r24, 0x02	; 2
    11e0:	0e 94 13 0b 	call	0x1626	; 0x1626 <DcMotor_Rotate>
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	90 e8       	ldi	r25, 0x80	; 128
    11e8:	ab e3       	ldi	r26, 0x3B	; 59
    11ea:	b5 e4       	ldi	r27, 0x45	; 69
    11ec:	8f a3       	std	Y+39, r24	; 0x27
    11ee:	98 a7       	std	Y+40, r25	; 0x28
    11f0:	a9 a7       	std	Y+41, r26	; 0x29
    11f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f4:	6f a1       	ldd	r22, Y+39	; 0x27
    11f6:	78 a5       	ldd	r23, Y+40	; 0x28
    11f8:	89 a5       	ldd	r24, Y+41	; 0x29
    11fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	4a ef       	ldi	r20, 0xFA	; 250
    1202:	54 e4       	ldi	r21, 0x44	; 68
    1204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	8b a3       	std	Y+35, r24	; 0x23
    120e:	9c a3       	std	Y+36, r25	; 0x24
    1210:	ad a3       	std	Y+37, r26	; 0x25
    1212:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1214:	6b a1       	ldd	r22, Y+35	; 0x23
    1216:	7c a1       	ldd	r23, Y+36	; 0x24
    1218:	8d a1       	ldd	r24, Y+37	; 0x25
    121a:	9e a1       	ldd	r25, Y+38	; 0x26
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1228:	88 23       	and	r24, r24
    122a:	2c f4       	brge	.+10     	; 0x1236 <main+0x3a8>
		__ticks = 1;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9a a3       	std	Y+34, r25	; 0x22
    1232:	89 a3       	std	Y+33, r24	; 0x21
    1234:	3f c0       	rjmp	.+126    	; 0x12b4 <main+0x426>
	else if (__tmp > 65535)
    1236:	6b a1       	ldd	r22, Y+35	; 0x23
    1238:	7c a1       	ldd	r23, Y+36	; 0x24
    123a:	8d a1       	ldd	r24, Y+37	; 0x25
    123c:	9e a1       	ldd	r25, Y+38	; 0x26
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	3f ef       	ldi	r19, 0xFF	; 255
    1242:	4f e7       	ldi	r20, 0x7F	; 127
    1244:	57 e4       	ldi	r21, 0x47	; 71
    1246:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	4c f5       	brge	.+82     	; 0x12a0 <main+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124e:	6f a1       	ldd	r22, Y+39	; 0x27
    1250:	78 a5       	ldd	r23, Y+40	; 0x28
    1252:	89 a5       	ldd	r24, Y+41	; 0x29
    1254:	9a a5       	ldd	r25, Y+42	; 0x2a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e2       	ldi	r20, 0x20	; 32
    125c:	51 e4       	ldi	r21, 0x41	; 65
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	bc 01       	movw	r22, r24
    1268:	cd 01       	movw	r24, r26
    126a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	9a a3       	std	Y+34, r25	; 0x22
    1274:	89 a3       	std	Y+33, r24	; 0x21
    1276:	0f c0       	rjmp	.+30     	; 0x1296 <main+0x408>
    1278:	88 ec       	ldi	r24, 0xC8	; 200
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	98 a3       	std	Y+32, r25	; 0x20
    127e:	8f 8f       	std	Y+31, r24	; 0x1f
    1280:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1282:	98 a1       	ldd	r25, Y+32	; 0x20
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	f1 f7       	brne	.-4      	; 0x1284 <main+0x3f6>
    1288:	98 a3       	std	Y+32, r25	; 0x20
    128a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128c:	89 a1       	ldd	r24, Y+33	; 0x21
    128e:	9a a1       	ldd	r25, Y+34	; 0x22
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	9a a3       	std	Y+34, r25	; 0x22
    1294:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	89 a1       	ldd	r24, Y+33	; 0x21
    1298:	9a a1       	ldd	r25, Y+34	; 0x22
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f7       	brne	.-38     	; 0x1278 <main+0x3ea>
    129e:	14 c0       	rjmp	.+40     	; 0x12c8 <main+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12a0:	6b a1       	ldd	r22, Y+35	; 0x23
    12a2:	7c a1       	ldd	r23, Y+36	; 0x24
    12a4:	8d a1       	ldd	r24, Y+37	; 0x25
    12a6:	9e a1       	ldd	r25, Y+38	; 0x26
    12a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9a a3       	std	Y+34, r25	; 0x22
    12b2:	89 a3       	std	Y+33, r24	; 0x21
    12b4:	89 a1       	ldd	r24, Y+33	; 0x21
    12b6:	9a a1       	ldd	r25, Y+34	; 0x22
    12b8:	9e 8f       	std	Y+30, r25	; 0x1e
    12ba:	8d 8f       	std	Y+29, r24	; 0x1d
    12bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <main+0x432>
    12c4:	9e 8f       	std	Y+30, r25	; 0x1e
    12c6:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(3000);
				DcMotor_Rotate(CCW);
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	0e 94 13 0b 	call	0x1626	; 0x1626 <DcMotor_Rotate>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e6       	ldi	r25, 0x60	; 96
    12d2:	aa e6       	ldi	r26, 0x6A	; 106
    12d4:	b6 e4       	ldi	r27, 0x46	; 70
    12d6:	89 8f       	std	Y+25, r24	; 0x19
    12d8:	9a 8f       	std	Y+26, r25	; 0x1a
    12da:	ab 8f       	std	Y+27, r26	; 0x1b
    12dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	69 8d       	ldd	r22, Y+25	; 0x19
    12e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a ef       	ldi	r20, 0xFA	; 250
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8d 8b       	std	Y+21, r24	; 0x15
    12f8:	9e 8b       	std	Y+22, r25	; 0x16
    12fa:	af 8b       	std	Y+23, r26	; 0x17
    12fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1300:	7e 89       	ldd	r23, Y+22	; 0x16
    1302:	8f 89       	ldd	r24, Y+23	; 0x17
    1304:	98 8d       	ldd	r25, Y+24	; 0x18
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <main+0x492>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9c 8b       	std	Y+20, r25	; 0x14
    131c:	8b 8b       	std	Y+19, r24	; 0x13
    131e:	3f c0       	rjmp	.+126    	; 0x139e <main+0x510>
	else if (__tmp > 65535)
    1320:	6d 89       	ldd	r22, Y+21	; 0x15
    1322:	7e 89       	ldd	r23, Y+22	; 0x16
    1324:	8f 89       	ldd	r24, Y+23	; 0x17
    1326:	98 8d       	ldd	r25, Y+24	; 0x18
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <main+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	69 8d       	ldd	r22, Y+25	; 0x19
    133a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    133c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    133e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9c 8b       	std	Y+20, r25	; 0x14
    135e:	8b 8b       	std	Y+19, r24	; 0x13
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <main+0x4f2>
    1362:	88 ec       	ldi	r24, 0xC8	; 200
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9a 8b       	std	Y+18, r25	; 0x12
    1368:	89 8b       	std	Y+17, r24	; 0x11
    136a:	89 89       	ldd	r24, Y+17	; 0x11
    136c:	9a 89       	ldd	r25, Y+18	; 0x12
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <main+0x4e0>
    1372:	9a 8b       	std	Y+18, r25	; 0x12
    1374:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8b 89       	ldd	r24, Y+19	; 0x13
    1378:	9c 89       	ldd	r25, Y+20	; 0x14
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9c 8b       	std	Y+20, r25	; 0x14
    137e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8b 89       	ldd	r24, Y+19	; 0x13
    1382:	9c 89       	ldd	r25, Y+20	; 0x14
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <main+0x4d4>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <main+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	6d 89       	ldd	r22, Y+21	; 0x15
    138c:	7e 89       	ldd	r23, Y+22	; 0x16
    138e:	8f 89       	ldd	r24, Y+23	; 0x17
    1390:	98 8d       	ldd	r25, Y+24	; 0x18
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9c 8b       	std	Y+20, r25	; 0x14
    139c:	8b 8b       	std	Y+19, r24	; 0x13
    139e:	8b 89       	ldd	r24, Y+19	; 0x13
    13a0:	9c 89       	ldd	r25, Y+20	; 0x14
    13a2:	98 8b       	std	Y+16, r25	; 0x10
    13a4:	8f 87       	std	Y+15, r24	; 0x0f
    13a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a8:	98 89       	ldd	r25, Y+16	; 0x10
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <main+0x51c>
    13ae:	98 8b       	std	Y+16, r25	; 0x10
    13b0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(15000);
				DcMotor_Rotate(ST);
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	0e 94 13 0b 	call	0x1626	; 0x1626 <DcMotor_Rotate>
				Step2 = 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 93 7c 00 	sts	0x007C, r24
				Step1 = 0;
    13be:	10 92 68 00 	sts	0x0068, r1
				f_OPEN_DOOR = 0;
    13c2:	10 92 7e 00 	sts	0x007E, r1
				f_CHANGE_PASSWORD=0;
    13c6:	10 92 7f 00 	sts	0x007F, r1
    13ca:	0e c0       	rjmp	.+28     	; 0x13e8 <main+0x55a>
			}
			else
			{
				/* Will Go To Wrong Password Settings */
				UART_sendByte('B');
    13cc:	82 e4       	ldi	r24, 0x42	; 66
    13ce:	0e 94 4f 11 	call	0x229e	; 0x229e <UART_sendByte>
				f_CHANGE_PASSWORD=0;
    13d2:	10 92 7f 00 	sts	0x007F, r1
				f_OPEN_DOOR = 0;
    13d6:	10 92 7e 00 	sts	0x007E, r1
				WRONG_PASS = 1;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 7d 00 	sts	0x007D, r24
				Step2=0;
    13e0:	10 92 7c 00 	sts	0x007C, r1
				Step1=0;
    13e4:	10 92 68 00 	sts	0x0068, r1
			}
		}

		/* Change Password Settings */
		if(f_CHANGE_PASSWORD == 1)
    13e8:	80 91 7f 00 	lds	r24, 0x007F
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	29 f5       	brne	.+74     	; 0x143a <main+0x5ac>
		{
			Recive_pass(in_pass); /* Receive USER Password From HMI_ECU */
    13f0:	8c e8       	ldi	r24, 0x8C	; 140
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <Recive_pass>

			if(EEPROM_verifyPassword(in_pass)) /* If The Two Passwords Are Identical */
    13f8:	8c e8       	ldi	r24, 0x8C	; 140
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <EEPROM_verifyPassword>
    1400:	88 23       	and	r24, r24
    1402:	69 f0       	breq	.+26     	; 0x141e <main+0x590>
			{
				/* Go To System Password Settings */
				UART_sendByte('A');
    1404:	81 e4       	ldi	r24, 0x41	; 65
    1406:	0e 94 4f 11 	call	0x229e	; 0x229e <UART_sendByte>
				Step1 = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	80 93 68 00 	sts	0x0068, r24
				Step2 = 0;
    1410:	10 92 7c 00 	sts	0x007C, r1
				f_CHANGE_PASSWORD=0;
    1414:	10 92 7f 00 	sts	0x007F, r1
				f_OPEN_DOOR = 0;
    1418:	10 92 7e 00 	sts	0x007E, r1
    141c:	0e c0       	rjmp	.+28     	; 0x143a <main+0x5ac>
			}
			else
			{
				/* Will Go To Wrong Password Settings */
				UART_sendByte('B');
    141e:	82 e4       	ldi	r24, 0x42	; 66
    1420:	0e 94 4f 11 	call	0x229e	; 0x229e <UART_sendByte>
				f_OPEN_DOOR = 0;
    1424:	10 92 7e 00 	sts	0x007E, r1
				f_CHANGE_PASSWORD=0;
    1428:	10 92 7f 00 	sts	0x007F, r1
				WRONG_PASS = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	80 93 7d 00 	sts	0x007D, r24
				Step2=0;
    1432:	10 92 7c 00 	sts	0x007C, r1
				Step1=0;
    1436:	10 92 68 00 	sts	0x0068, r1
			}
		}

		/* Wrong Password Settings */
		if(WRONG_PASS==1)
    143a:	80 91 7d 00 	lds	r24, 0x007D
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	09 f0       	breq	.+2      	; 0x1444 <main+0x5b6>
    1442:	f3 cd       	rjmp	.-1050   	; 0x102a <main+0x19c>
		{
			/* Sending This Byte To Synchronize The Two System With Each Other */
			while(UART_recieveByte() != GET_READY){}
    1444:	0e 94 66 11 	call	0x22cc	; 0x22cc <UART_recieveByte>
    1448:	80 31       	cpi	r24, 0x10	; 16
    144a:	e1 f7       	brne	.-8      	; 0x1444 <main+0x5b6>

		/* Don't Exit While(1) Until You Receive From UART Of HMI_ECU */
		while(1)
		{
			Recive_pass(CHECK_PASS);  /* Receive Check Password From HMI_ECU */
    144c:	82 e8       	ldi	r24, 0x82	; 130
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	0e 94 a3 05 	call	0xb46	; 0xb46 <Recive_pass>
			if(EEPROM_verifyPassword(in_pass)) /* If The Two Passwords Are Identical */
    1454:	8c e8       	ldi	r24, 0x8C	; 140
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 0d 07 	call	0xe1a	; 0xe1a <EEPROM_verifyPassword>
    145c:	88 23       	and	r24, r24
    145e:	69 f0       	breq	.+26     	; 0x147a <main+0x5ec>
			{
				/* Go To Main Option Settings */
				UART_sendByte('X');
    1460:	88 e5       	ldi	r24, 0x58	; 88
    1462:	0e 94 4f 11 	call	0x229e	; 0x229e <UART_sendByte>
				counter=0;
    1466:	10 92 69 00 	sts	0x0069, r1
				Step2=1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	80 93 7c 00 	sts	0x007C, r24
				WRONG_PASS=0;
    1470:	10 92 7d 00 	sts	0x007D, r1
				Step1=0;
    1474:	10 92 68 00 	sts	0x0068, r1
    1478:	0f c0       	rjmp	.+30     	; 0x1498 <main+0x60a>
				break;
			}
			else
			{
				/* You Will Still In Wrong Password Settings And Counter Of Wrong Passwords Will Increment */
				UART_sendByte('Y');
    147a:	89 e5       	ldi	r24, 0x59	; 89
    147c:	0e 94 4f 11 	call	0x229e	; 0x229e <UART_sendByte>
				counter++;
    1480:	80 91 69 00 	lds	r24, 0x0069
    1484:	8f 5f       	subi	r24, 0xFF	; 255
    1486:	80 93 69 00 	sts	0x0069, r24
				WRONG_PASS = 1;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	80 93 7d 00 	sts	0x007D, r24
				Step2=0;
    1490:	10 92 7c 00 	sts	0x007C, r1
				Step1=0;
    1494:	10 92 68 00 	sts	0x0068, r1
				break;
			}
		}
			if(counter==3) /*If The User Enters Wrong Password Three Times */
    1498:	80 91 69 00 	lds	r24, 0x0069
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	09 f0       	breq	.+2      	; 0x14a2 <main+0x614>
    14a0:	c4 cd       	rjmp	.-1144   	; 0x102a <main+0x19c>
			{
				/* Buzzer Will Be ON Then Go To Main Option Settings Again */
				counter=0;
    14a2:	10 92 69 00 	sts	0x0069, r1
				Buzzer_on();
    14a6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <Buzzer_on>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	90 e6       	ldi	r25, 0x60	; 96
    14ae:	aa e6       	ldi	r26, 0x6A	; 106
    14b0:	b7 e4       	ldi	r27, 0x47	; 71
    14b2:	8b 87       	std	Y+11, r24	; 0x0b
    14b4:	9c 87       	std	Y+12, r25	; 0x0c
    14b6:	ad 87       	std	Y+13, r26	; 0x0d
    14b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    14bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14be:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	4a ef       	ldi	r20, 0xFA	; 250
    14c8:	54 e4       	ldi	r21, 0x44	; 68
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	8f 83       	std	Y+7, r24	; 0x07
    14d4:	98 87       	std	Y+8, r25	; 0x08
    14d6:	a9 87       	std	Y+9, r26	; 0x09
    14d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14da:	6f 81       	ldd	r22, Y+7	; 0x07
    14dc:	78 85       	ldd	r23, Y+8	; 0x08
    14de:	89 85       	ldd	r24, Y+9	; 0x09
    14e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	40 e8       	ldi	r20, 0x80	; 128
    14e8:	5f e3       	ldi	r21, 0x3F	; 63
    14ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ee:	88 23       	and	r24, r24
    14f0:	2c f4       	brge	.+10     	; 0x14fc <main+0x66e>
		__ticks = 1;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	3f c0       	rjmp	.+126    	; 0x157a <main+0x6ec>
	else if (__tmp > 65535)
    14fc:	6f 81       	ldd	r22, Y+7	; 0x07
    14fe:	78 85       	ldd	r23, Y+8	; 0x08
    1500:	89 85       	ldd	r24, Y+9	; 0x09
    1502:	9a 85       	ldd	r25, Y+10	; 0x0a
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	3f ef       	ldi	r19, 0xFF	; 255
    1508:	4f e7       	ldi	r20, 0x7F	; 127
    150a:	57 e4       	ldi	r21, 0x47	; 71
    150c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1510:	18 16       	cp	r1, r24
    1512:	4c f5       	brge	.+82     	; 0x1566 <main+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	6b 85       	ldd	r22, Y+11	; 0x0b
    1516:	7c 85       	ldd	r23, Y+12	; 0x0c
    1518:	8d 85       	ldd	r24, Y+13	; 0x0d
    151a:	9e 85       	ldd	r25, Y+14	; 0x0e
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e2       	ldi	r20, 0x20	; 32
    1522:	51 e4       	ldi	r21, 0x41	; 65
    1524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	bc 01       	movw	r22, r24
    152e:	cd 01       	movw	r24, r26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	0f c0       	rjmp	.+30     	; 0x155c <main+0x6ce>
    153e:	88 ec       	ldi	r24, 0xC8	; 200
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8b 83       	std	Y+3, r24	; 0x03
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <main+0x6bc>
    154e:	9c 83       	std	Y+4, r25	; 0x04
    1550:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	9e 83       	std	Y+6, r25	; 0x06
    155a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	69 f7       	brne	.-38     	; 0x153e <main+0x6b0>
    1564:	14 c0       	rjmp	.+40     	; 0x158e <main+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1572:	dc 01       	movw	r26, r24
    1574:	cb 01       	movw	r24, r22
    1576:	9e 83       	std	Y+6, r25	; 0x06
    1578:	8d 83       	std	Y+5, r24	; 0x05
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	9a 83       	std	Y+2, r25	; 0x02
    1580:	89 83       	std	Y+1, r24	; 0x01
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	9a 81       	ldd	r25, Y+2	; 0x02
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <main+0x6f8>
    158a:	9a 83       	std	Y+2, r25	; 0x02
    158c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(60000);
				Step2 = 1;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	80 93 7c 00 	sts	0x007C, r24
				Step1=0;
    1594:	10 92 68 00 	sts	0x0068, r1
				WRONG_PASS=0;
    1598:	10 92 7d 00 	sts	0x007D, r1
    159c:	46 cd       	rjmp	.-1396   	; 0x102a <main+0x19c>

0000159e <Buzzer_init>:
#include "buzzer.h"
#include "gpio.h"
#include "std_types.h"

void Buzzer_init()
{
    159e:	df 93       	push	r29
    15a0:	cf 93       	push	r28
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PORT_OUTPUT);
    15a6:	83 e0       	ldi	r24, 0x03	; 3
    15a8:	67 e0       	ldi	r22, 0x07	; 7
    15aa:	4f ef       	ldi	r20, 0xFF	; 255
    15ac:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    15b0:	83 e0       	ldi	r24, 0x03	; 3
    15b2:	67 e0       	ldi	r22, 0x07	; 7
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
}
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <Buzzer_on>:

void Buzzer_on(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    15c8:	83 e0       	ldi	r24, 0x03	; 3
    15ca:	67 e0       	ldi	r22, 0x07	; 7
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
}
    15d2:	cf 91       	pop	r28
    15d4:	df 91       	pop	r29
    15d6:	08 95       	ret

000015d8 <Buzzer_off>:

void Buzzer_off(void)
{
    15d8:	df 93       	push	r29
    15da:	cf 93       	push	r28
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    15e0:	83 e0       	ldi	r24, 0x03	; 3
    15e2:	67 e0       	ldi	r22, 0x07	; 7
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
}
    15ea:	cf 91       	pop	r28
    15ec:	df 91       	pop	r29
    15ee:	08 95       	ret

000015f0 <DcMotor_init>:
#include "gpio.h"
#include "pwm.h"
#include <avr/io.h>

void DcMotor_init()
{
    15f0:	df 93       	push	r29
    15f2:	cf 93       	push	r28
    15f4:	cd b7       	in	r28, 0x3d	; 61
    15f6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTA_ID,PIN0_ID,PIN_OUTPUT);
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID,PIN1_ID,PIN_OUTPUT);
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	61 e0       	ldi	r22, 0x01	; 1
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_setupPinDirection>
	GPIO_writePin(PORTA_ID,PIN0_ID,LOGIC_LOW);
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
	GPIO_writePin(PORTA_ID,PIN1_ID,LOGIC_LOW);
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	61 e0       	ldi	r22, 0x01	; 1
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
}
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	0f 92       	push	r0
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Init(255);
    1632:	8f ef       	ldi	r24, 0xFF	; 255
    1634:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <PWM_Timer0_Init>
	if(state==CW)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	88 23       	and	r24, r24
    163c:	59 f4       	brne	.+22     	; 0x1654 <DcMotor_Rotate+0x2e>
	{
		GPIO_writePin(PORTA_ID,PIN0_ID,LOGIC_HIGH);
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	41 e0       	ldi	r20, 0x01	; 1
    1644:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN1_ID,LOGIC_LOW);
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	61 e0       	ldi	r22, 0x01	; 1
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
    1652:	18 c0       	rjmp	.+48     	; 0x1684 <DcMotor_Rotate+0x5e>
	}
	else if(state==CCW)
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	59 f4       	brne	.+22     	; 0x1670 <DcMotor_Rotate+0x4a>
	{
		GPIO_writePin(PORTA_ID,PIN0_ID,LOGIC_LOW);
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	60 e0       	ldi	r22, 0x00	; 0
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN1_ID,LOGIC_HIGH);
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	61 e0       	ldi	r22, 0x01	; 1
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
    166e:	0a c0       	rjmp	.+20     	; 0x1684 <DcMotor_Rotate+0x5e>
	}
	else
	{
		GPIO_writePin(PORTA_ID,PIN0_ID,LOGIC_LOW);
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN1_ID,LOGIC_LOW);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <GPIO_writePin>
	}
}
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <EEPROM_writeByte+0x6>
    1692:	00 d0       	rcall	.+0      	; 0x1694 <EEPROM_writeByte+0x8>
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	9a 83       	std	Y+2, r25	; 0x02
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    169e:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    16a2:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    16a6:	88 30       	cpi	r24, 0x08	; 8
    16a8:	11 f0       	breq	.+4      	; 0x16ae <EEPROM_writeByte+0x22>
        return ERROR;
    16aa:	1c 82       	std	Y+4, r1	; 0x04
    16ac:	28 c0       	rjmp	.+80     	; 0x16fe <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	80 70       	andi	r24, 0x00	; 0
    16b4:	97 70       	andi	r25, 0x07	; 7
    16b6:	88 0f       	add	r24, r24
    16b8:	89 2f       	mov	r24, r25
    16ba:	88 1f       	adc	r24, r24
    16bc:	99 0b       	sbc	r25, r25
    16be:	91 95       	neg	r25
    16c0:	80 6a       	ori	r24, 0xA0	; 160
    16c2:	0e 94 83 10 	call	0x2106	; 0x2106 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    16c6:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    16ca:	88 31       	cpi	r24, 0x18	; 24
    16cc:	11 f0       	breq	.+4      	; 0x16d2 <EEPROM_writeByte+0x46>
        return ERROR; 
    16ce:	1c 82       	std	Y+4, r1	; 0x04
    16d0:	16 c0       	rjmp	.+44     	; 0x16fe <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	0e 94 83 10 	call	0x2106	; 0x2106 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16d8:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    16dc:	88 32       	cpi	r24, 0x28	; 40
    16de:	11 f0       	breq	.+4      	; 0x16e4 <EEPROM_writeByte+0x58>
        return ERROR;
    16e0:	1c 82       	std	Y+4, r1	; 0x04
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	0e 94 83 10 	call	0x2106	; 0x2106 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    16ea:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    16ee:	88 32       	cpi	r24, 0x28	; 40
    16f0:	11 f0       	breq	.+4      	; 0x16f6 <EEPROM_writeByte+0x6a>
        return ERROR;
    16f2:	1c 82       	std	Y+4, r1	; 0x04
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    16f6:	0e 94 78 10 	call	0x20f0	; 0x20f0 <TWI_stop>
	
    return SUCCESS;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	8c 83       	std	Y+4, r24	; 0x04
    16fe:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <EEPROM_readByte+0x6>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <EEPROM_readByte+0x8>
    1716:	0f 92       	push	r0
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	9a 83       	std	Y+2, r25	; 0x02
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	7c 83       	std	Y+4, r23	; 0x04
    1722:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1724:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1728:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    172c:	88 30       	cpi	r24, 0x08	; 8
    172e:	11 f0       	breq	.+4      	; 0x1734 <EEPROM_readByte+0x26>
        return ERROR;
    1730:	1d 82       	std	Y+5, r1	; 0x05
    1732:	44 c0       	rjmp	.+136    	; 0x17bc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	9a 81       	ldd	r25, Y+2	; 0x02
    1738:	80 70       	andi	r24, 0x00	; 0
    173a:	97 70       	andi	r25, 0x07	; 7
    173c:	88 0f       	add	r24, r24
    173e:	89 2f       	mov	r24, r25
    1740:	88 1f       	adc	r24, r24
    1742:	99 0b       	sbc	r25, r25
    1744:	91 95       	neg	r25
    1746:	80 6a       	ori	r24, 0xA0	; 160
    1748:	0e 94 83 10 	call	0x2106	; 0x2106 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    174c:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    1750:	88 31       	cpi	r24, 0x18	; 24
    1752:	11 f0       	breq	.+4      	; 0x1758 <EEPROM_readByte+0x4a>
        return ERROR;
    1754:	1d 82       	std	Y+5, r1	; 0x05
    1756:	32 c0       	rjmp	.+100    	; 0x17bc <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	0e 94 83 10 	call	0x2106	; 0x2106 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    175e:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    1762:	88 32       	cpi	r24, 0x28	; 40
    1764:	11 f0       	breq	.+4      	; 0x176a <EEPROM_readByte+0x5c>
        return ERROR;
    1766:	1d 82       	std	Y+5, r1	; 0x05
    1768:	29 c0       	rjmp	.+82     	; 0x17bc <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    176a:	0e 94 68 10 	call	0x20d0	; 0x20d0 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    176e:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    1772:	80 31       	cpi	r24, 0x10	; 16
    1774:	11 f0       	breq	.+4      	; 0x177a <EEPROM_readByte+0x6c>
        return ERROR;
    1776:	1d 82       	std	Y+5, r1	; 0x05
    1778:	21 c0       	rjmp	.+66     	; 0x17bc <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	9a 81       	ldd	r25, Y+2	; 0x02
    177e:	80 70       	andi	r24, 0x00	; 0
    1780:	97 70       	andi	r25, 0x07	; 7
    1782:	88 0f       	add	r24, r24
    1784:	89 2f       	mov	r24, r25
    1786:	88 1f       	adc	r24, r24
    1788:	99 0b       	sbc	r25, r25
    178a:	91 95       	neg	r25
    178c:	81 6a       	ori	r24, 0xA1	; 161
    178e:	0e 94 83 10 	call	0x2106	; 0x2106 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1792:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    1796:	80 34       	cpi	r24, 0x40	; 64
    1798:	11 f0       	breq	.+4      	; 0x179e <EEPROM_readByte+0x90>
        return ERROR;
    179a:	1d 82       	std	Y+5, r1	; 0x05
    179c:	0f c0       	rjmp	.+30     	; 0x17bc <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    179e:	0e 94 ad 10 	call	0x215a	; 0x215a <TWI_readByteWithNACK>
    17a2:	eb 81       	ldd	r30, Y+3	; 0x03
    17a4:	fc 81       	ldd	r31, Y+4	; 0x04
    17a6:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    17a8:	0e 94 c0 10 	call	0x2180	; 0x2180 <TWI_getStatus>
    17ac:	88 35       	cpi	r24, 0x58	; 88
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <EEPROM_readByte+0xa6>
        return ERROR;
    17b0:	1d 82       	std	Y+5, r1	; 0x05
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    17b4:	0e 94 78 10 	call	0x20f0	; 0x20f0 <TWI_stop>

    return SUCCESS;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	8d 83       	std	Y+5, r24	; 0x05
    17bc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	cf 91       	pop	r28
    17ca:	df 91       	pop	r29
    17cc:	08 95       	ret

000017ce <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    17ce:	df 93       	push	r29
    17d0:	cf 93       	push	r28
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <GPIO_setupPinDirection+0x6>
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <GPIO_setupPinDirection+0x8>
    17d6:	0f 92       	push	r0
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	6a 83       	std	Y+2, r22	; 0x02
    17e0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	88 30       	cpi	r24, 0x08	; 8
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <GPIO_setupPinDirection+0x1c>
    17e8:	d5 c0       	rjmp	.+426    	; 0x1994 <GPIO_setupPinDirection+0x1c6>
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	84 30       	cpi	r24, 0x04	; 4
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <GPIO_setupPinDirection+0x24>
    17f0:	d1 c0       	rjmp	.+418    	; 0x1994 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	3d 83       	std	Y+5, r19	; 0x05
    17fa:	2c 83       	std	Y+4, r18	; 0x04
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <GPIO_setupPinDirection+0x3a>
    1806:	43 c0       	rjmp	.+134    	; 0x188e <GPIO_setupPinDirection+0xc0>
    1808:	2c 81       	ldd	r18, Y+4	; 0x04
    180a:	3d 81       	ldd	r19, Y+5	; 0x05
    180c:	22 30       	cpi	r18, 0x02	; 2
    180e:	31 05       	cpc	r19, r1
    1810:	2c f4       	brge	.+10     	; 0x181c <GPIO_setupPinDirection+0x4e>
    1812:	8c 81       	ldd	r24, Y+4	; 0x04
    1814:	9d 81       	ldd	r25, Y+5	; 0x05
    1816:	00 97       	sbiw	r24, 0x00	; 0
    1818:	71 f0       	breq	.+28     	; 0x1836 <GPIO_setupPinDirection+0x68>
    181a:	bc c0       	rjmp	.+376    	; 0x1994 <GPIO_setupPinDirection+0x1c6>
    181c:	2c 81       	ldd	r18, Y+4	; 0x04
    181e:	3d 81       	ldd	r19, Y+5	; 0x05
    1820:	22 30       	cpi	r18, 0x02	; 2
    1822:	31 05       	cpc	r19, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <GPIO_setupPinDirection+0x5a>
    1826:	5f c0       	rjmp	.+190    	; 0x18e6 <GPIO_setupPinDirection+0x118>
    1828:	8c 81       	ldd	r24, Y+4	; 0x04
    182a:	9d 81       	ldd	r25, Y+5	; 0x05
    182c:	83 30       	cpi	r24, 0x03	; 3
    182e:	91 05       	cpc	r25, r1
    1830:	09 f4       	brne	.+2      	; 0x1834 <GPIO_setupPinDirection+0x66>
    1832:	85 c0       	rjmp	.+266    	; 0x193e <GPIO_setupPinDirection+0x170>
    1834:	af c0       	rjmp	.+350    	; 0x1994 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	a1 f4       	brne	.+40     	; 0x1864 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    183c:	aa e3       	ldi	r26, 0x3A	; 58
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ea e3       	ldi	r30, 0x3A	; 58
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	02 2e       	mov	r0, r18
    1854:	02 c0       	rjmp	.+4      	; 0x185a <GPIO_setupPinDirection+0x8c>
    1856:	88 0f       	add	r24, r24
    1858:	99 1f       	adc	r25, r25
    185a:	0a 94       	dec	r0
    185c:	e2 f7       	brpl	.-8      	; 0x1856 <GPIO_setupPinDirection+0x88>
    185e:	84 2b       	or	r24, r20
    1860:	8c 93       	st	X, r24
    1862:	98 c0       	rjmp	.+304    	; 0x1994 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1864:	aa e3       	ldi	r26, 0x3A	; 58
    1866:	b0 e0       	ldi	r27, 0x00	; 0
    1868:	ea e3       	ldi	r30, 0x3A	; 58
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	80 81       	ld	r24, Z
    186e:	48 2f       	mov	r20, r24
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	28 2f       	mov	r18, r24
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	02 2e       	mov	r0, r18
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <GPIO_setupPinDirection+0xb4>
    187e:	88 0f       	add	r24, r24
    1880:	99 1f       	adc	r25, r25
    1882:	0a 94       	dec	r0
    1884:	e2 f7       	brpl	.-8      	; 0x187e <GPIO_setupPinDirection+0xb0>
    1886:	80 95       	com	r24
    1888:	84 23       	and	r24, r20
    188a:	8c 93       	st	X, r24
    188c:	83 c0       	rjmp	.+262    	; 0x1994 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	a1 f4       	brne	.+40     	; 0x18bc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1894:	a7 e3       	ldi	r26, 0x37	; 55
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e7 e3       	ldi	r30, 0x37	; 55
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_setupPinDirection+0xe4>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_setupPinDirection+0xe0>
    18b6:	84 2b       	or	r24, r20
    18b8:	8c 93       	st	X, r24
    18ba:	6c c0       	rjmp	.+216    	; 0x1994 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    18bc:	a7 e3       	ldi	r26, 0x37	; 55
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e7 e3       	ldi	r30, 0x37	; 55
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	48 2f       	mov	r20, r24
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 2e       	mov	r0, r18
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <GPIO_setupPinDirection+0x10c>
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	0a 94       	dec	r0
    18dc:	e2 f7       	brpl	.-8      	; 0x18d6 <GPIO_setupPinDirection+0x108>
    18de:	80 95       	com	r24
    18e0:	84 23       	and	r24, r20
    18e2:	8c 93       	st	X, r24
    18e4:	57 c0       	rjmp	.+174    	; 0x1994 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	a1 f4       	brne	.+40     	; 0x1914 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    18ec:	a4 e3       	ldi	r26, 0x34	; 52
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e4 e3       	ldi	r30, 0x34	; 52
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_setupPinDirection+0x13c>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_setupPinDirection+0x138>
    190e:	84 2b       	or	r24, r20
    1910:	8c 93       	st	X, r24
    1912:	40 c0       	rjmp	.+128    	; 0x1994 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1914:	a4 e3       	ldi	r26, 0x34	; 52
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e4 e3       	ldi	r30, 0x34	; 52
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	48 2f       	mov	r20, r24
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 2e       	mov	r0, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_setupPinDirection+0x164>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	0a 94       	dec	r0
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_setupPinDirection+0x160>
    1936:	80 95       	com	r24
    1938:	84 23       	and	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	2b c0       	rjmp	.+86     	; 0x1994 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	a1 f4       	brne	.+40     	; 0x196c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1944:	a1 e3       	ldi	r26, 0x31	; 49
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e1 e3       	ldi	r30, 0x31	; 49
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_setupPinDirection+0x194>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_setupPinDirection+0x190>
    1966:	84 2b       	or	r24, r20
    1968:	8c 93       	st	X, r24
    196a:	14 c0       	rjmp	.+40     	; 0x1994 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    196c:	a1 e3       	ldi	r26, 0x31	; 49
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e1 e3       	ldi	r30, 0x31	; 49
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	28 2f       	mov	r18, r24
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	02 2e       	mov	r0, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <GPIO_setupPinDirection+0x1bc>
    1986:	88 0f       	add	r24, r24
    1988:	99 1f       	adc	r25, r25
    198a:	0a 94       	dec	r0
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <GPIO_setupPinDirection+0x1b8>
    198e:	80 95       	com	r24
    1990:	84 23       	and	r24, r20
    1992:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <GPIO_writePin+0x6>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_writePin+0x8>
    19ac:	0f 92       	push	r0
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	6a 83       	std	Y+2, r22	; 0x02
    19b6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	88 30       	cpi	r24, 0x08	; 8
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <GPIO_writePin+0x1c>
    19be:	d5 c0       	rjmp	.+426    	; 0x1b6a <GPIO_writePin+0x1c6>
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	08 f0       	brcs	.+2      	; 0x19c8 <GPIO_writePin+0x24>
    19c6:	d1 c0       	rjmp	.+418    	; 0x1b6a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	3d 83       	std	Y+5, r19	; 0x05
    19d0:	2c 83       	std	Y+4, r18	; 0x04
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	81 30       	cpi	r24, 0x01	; 1
    19d8:	91 05       	cpc	r25, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <GPIO_writePin+0x3a>
    19dc:	43 c0       	rjmp	.+134    	; 0x1a64 <GPIO_writePin+0xc0>
    19de:	2c 81       	ldd	r18, Y+4	; 0x04
    19e0:	3d 81       	ldd	r19, Y+5	; 0x05
    19e2:	22 30       	cpi	r18, 0x02	; 2
    19e4:	31 05       	cpc	r19, r1
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <GPIO_writePin+0x4e>
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	9d 81       	ldd	r25, Y+5	; 0x05
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	71 f0       	breq	.+28     	; 0x1a0c <GPIO_writePin+0x68>
    19f0:	bc c0       	rjmp	.+376    	; 0x1b6a <GPIO_writePin+0x1c6>
    19f2:	2c 81       	ldd	r18, Y+4	; 0x04
    19f4:	3d 81       	ldd	r19, Y+5	; 0x05
    19f6:	22 30       	cpi	r18, 0x02	; 2
    19f8:	31 05       	cpc	r19, r1
    19fa:	09 f4       	brne	.+2      	; 0x19fe <GPIO_writePin+0x5a>
    19fc:	5f c0       	rjmp	.+190    	; 0x1abc <GPIO_writePin+0x118>
    19fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1a00:	9d 81       	ldd	r25, Y+5	; 0x05
    1a02:	83 30       	cpi	r24, 0x03	; 3
    1a04:	91 05       	cpc	r25, r1
    1a06:	09 f4       	brne	.+2      	; 0x1a0a <GPIO_writePin+0x66>
    1a08:	85 c0       	rjmp	.+266    	; 0x1b14 <GPIO_writePin+0x170>
    1a0a:	af c0       	rjmp	.+350    	; 0x1b6a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	a1 f4       	brne	.+40     	; 0x1a3a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1a12:	ab e3       	ldi	r26, 0x3B	; 59
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	eb e3       	ldi	r30, 0x3B	; 59
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <GPIO_writePin+0x8c>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <GPIO_writePin+0x88>
    1a34:	84 2b       	or	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	98 c0       	rjmp	.+304    	; 0x1b6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a3a:	ab e3       	ldi	r26, 0x3B	; 59
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	eb e3       	ldi	r30, 0x3B	; 59
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 2e       	mov	r0, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <GPIO_writePin+0xb4>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	0a 94       	dec	r0
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <GPIO_writePin+0xb0>
    1a5c:	80 95       	com	r24
    1a5e:	84 23       	and	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	83 c0       	rjmp	.+262    	; 0x1b6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	a1 f4       	brne	.+40     	; 0x1a92 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a6a:	a8 e3       	ldi	r26, 0x38	; 56
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e8 e3       	ldi	r30, 0x38	; 56
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <GPIO_writePin+0xe4>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <GPIO_writePin+0xe0>
    1a8c:	84 2b       	or	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	6c c0       	rjmp	.+216    	; 0x1b6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a92:	a8 e3       	ldi	r26, 0x38	; 56
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e8 e3       	ldi	r30, 0x38	; 56
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	02 2e       	mov	r0, r18
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <GPIO_writePin+0x10c>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	0a 94       	dec	r0
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <GPIO_writePin+0x108>
    1ab4:	80 95       	com	r24
    1ab6:	84 23       	and	r24, r20
    1ab8:	8c 93       	st	X, r24
    1aba:	57 c0       	rjmp	.+174    	; 0x1b6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	a1 f4       	brne	.+40     	; 0x1aea <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1ac2:	a5 e3       	ldi	r26, 0x35	; 53
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e5 e3       	ldi	r30, 0x35	; 53
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <GPIO_writePin+0x13c>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <GPIO_writePin+0x138>
    1ae4:	84 2b       	or	r24, r20
    1ae6:	8c 93       	st	X, r24
    1ae8:	40 c0       	rjmp	.+128    	; 0x1b6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1aea:	a5 e3       	ldi	r26, 0x35	; 53
    1aec:	b0 e0       	ldi	r27, 0x00	; 0
    1aee:	e5 e3       	ldi	r30, 0x35	; 53
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	02 2e       	mov	r0, r18
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <GPIO_writePin+0x164>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	0a 94       	dec	r0
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <GPIO_writePin+0x160>
    1b0c:	80 95       	com	r24
    1b0e:	84 23       	and	r24, r20
    1b10:	8c 93       	st	X, r24
    1b12:	2b c0       	rjmp	.+86     	; 0x1b6a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1b14:	8b 81       	ldd	r24, Y+3	; 0x03
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	a1 f4       	brne	.+40     	; 0x1b42 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1b1a:	a2 e3       	ldi	r26, 0x32	; 50
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e2 e3       	ldi	r30, 0x32	; 50
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <GPIO_writePin+0x194>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <GPIO_writePin+0x190>
    1b3c:	84 2b       	or	r24, r20
    1b3e:	8c 93       	st	X, r24
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b42:	a2 e3       	ldi	r26, 0x32	; 50
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e2 e3       	ldi	r30, 0x32	; 50
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	48 2f       	mov	r20, r24
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	02 2e       	mov	r0, r18
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <GPIO_writePin+0x1bc>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	0a 94       	dec	r0
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <GPIO_writePin+0x1b8>
    1b64:	80 95       	com	r24
    1b66:	84 23       	and	r24, r20
    1b68:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	0f 90       	pop	r0
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <GPIO_readPin+0x6>
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <GPIO_readPin+0x8>
    1b82:	0f 92       	push	r0
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	8a 83       	std	Y+2, r24	; 0x02
    1b8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b8c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	88 30       	cpi	r24, 0x08	; 8
    1b92:	08 f0       	brcs	.+2      	; 0x1b96 <GPIO_readPin+0x1c>
    1b94:	84 c0       	rjmp	.+264    	; 0x1c9e <GPIO_readPin+0x124>
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	84 30       	cpi	r24, 0x04	; 4
    1b9a:	08 f0       	brcs	.+2      	; 0x1b9e <GPIO_readPin+0x24>
    1b9c:	80 c0       	rjmp	.+256    	; 0x1c9e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	3d 83       	std	Y+5, r19	; 0x05
    1ba6:	2c 83       	std	Y+4, r18	; 0x04
    1ba8:	4c 81       	ldd	r20, Y+4	; 0x04
    1baa:	5d 81       	ldd	r21, Y+5	; 0x05
    1bac:	41 30       	cpi	r20, 0x01	; 1
    1bae:	51 05       	cpc	r21, r1
    1bb0:	79 f1       	breq	.+94     	; 0x1c10 <GPIO_readPin+0x96>
    1bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	91 05       	cpc	r25, r1
    1bba:	34 f4       	brge	.+12     	; 0x1bc8 <GPIO_readPin+0x4e>
    1bbc:	2c 81       	ldd	r18, Y+4	; 0x04
    1bbe:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc0:	21 15       	cp	r18, r1
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	69 f0       	breq	.+26     	; 0x1be0 <GPIO_readPin+0x66>
    1bc6:	6b c0       	rjmp	.+214    	; 0x1c9e <GPIO_readPin+0x124>
    1bc8:	4c 81       	ldd	r20, Y+4	; 0x04
    1bca:	5d 81       	ldd	r21, Y+5	; 0x05
    1bcc:	42 30       	cpi	r20, 0x02	; 2
    1bce:	51 05       	cpc	r21, r1
    1bd0:	b9 f1       	breq	.+110    	; 0x1c40 <GPIO_readPin+0xc6>
    1bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd6:	83 30       	cpi	r24, 0x03	; 3
    1bd8:	91 05       	cpc	r25, r1
    1bda:	09 f4       	brne	.+2      	; 0x1bde <GPIO_readPin+0x64>
    1bdc:	49 c0       	rjmp	.+146    	; 0x1c70 <GPIO_readPin+0xf6>
    1bde:	5f c0       	rjmp	.+190    	; 0x1c9e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1be0:	e9 e3       	ldi	r30, 0x39	; 57
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a9 01       	movw	r20, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <GPIO_readPin+0x7e>
    1bf4:	55 95       	asr	r21
    1bf6:	47 95       	ror	r20
    1bf8:	8a 95       	dec	r24
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <GPIO_readPin+0x7a>
    1bfc:	ca 01       	movw	r24, r20
    1bfe:	81 70       	andi	r24, 0x01	; 1
    1c00:	90 70       	andi	r25, 0x00	; 0
    1c02:	88 23       	and	r24, r24
    1c04:	19 f0       	breq	.+6      	; 0x1c0c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	49 c0       	rjmp	.+146    	; 0x1c9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c0c:	19 82       	std	Y+1, r1	; 0x01
    1c0e:	47 c0       	rjmp	.+142    	; 0x1c9e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1c10:	e6 e3       	ldi	r30, 0x36	; 54
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a9 01       	movw	r20, r18
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <GPIO_readPin+0xae>
    1c24:	55 95       	asr	r21
    1c26:	47 95       	ror	r20
    1c28:	8a 95       	dec	r24
    1c2a:	e2 f7       	brpl	.-8      	; 0x1c24 <GPIO_readPin+0xaa>
    1c2c:	ca 01       	movw	r24, r20
    1c2e:	81 70       	andi	r24, 0x01	; 1
    1c30:	90 70       	andi	r25, 0x00	; 0
    1c32:	88 23       	and	r24, r24
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	31 c0       	rjmp	.+98     	; 0x1c9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c3c:	19 82       	std	Y+1, r1	; 0x01
    1c3e:	2f c0       	rjmp	.+94     	; 0x1c9e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c40:	e3 e3       	ldi	r30, 0x33	; 51
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	88 2f       	mov	r24, r24
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a9 01       	movw	r20, r18
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <GPIO_readPin+0xde>
    1c54:	55 95       	asr	r21
    1c56:	47 95       	ror	r20
    1c58:	8a 95       	dec	r24
    1c5a:	e2 f7       	brpl	.-8      	; 0x1c54 <GPIO_readPin+0xda>
    1c5c:	ca 01       	movw	r24, r20
    1c5e:	81 70       	andi	r24, 0x01	; 1
    1c60:	90 70       	andi	r25, 0x00	; 0
    1c62:	88 23       	and	r24, r24
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	89 83       	std	Y+1, r24	; 0x01
    1c6a:	19 c0       	rjmp	.+50     	; 0x1c9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c6c:	19 82       	std	Y+1, r1	; 0x01
    1c6e:	17 c0       	rjmp	.+46     	; 0x1c9e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c70:	e0 e3       	ldi	r30, 0x30	; 48
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	88 2f       	mov	r24, r24
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	a9 01       	movw	r20, r18
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <GPIO_readPin+0x10e>
    1c84:	55 95       	asr	r21
    1c86:	47 95       	ror	r20
    1c88:	8a 95       	dec	r24
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <GPIO_readPin+0x10a>
    1c8c:	ca 01       	movw	r24, r20
    1c8e:	81 70       	andi	r24, 0x01	; 1
    1c90:	90 70       	andi	r25, 0x00	; 0
    1c92:	88 23       	and	r24, r24
    1c94:	19 f0       	breq	.+6      	; 0x1c9c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c9c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <GPIO_setupPortDirection+0x6>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <GPIO_setupPortDirection+0x8>
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	89 83       	std	Y+1, r24	; 0x01
    1cbe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	84 30       	cpi	r24, 0x04	; 4
    1cc4:	90 f5       	brcc	.+100    	; 0x1d2a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1cc6:	89 81       	ldd	r24, Y+1	; 0x01
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	3c 83       	std	Y+4, r19	; 0x04
    1cce:	2b 83       	std	Y+3, r18	; 0x03
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	d1 f0       	breq	.+52     	; 0x1d0e <GPIO_setupPortDirection+0x5e>
    1cda:	2b 81       	ldd	r18, Y+3	; 0x03
    1cdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cde:	22 30       	cpi	r18, 0x02	; 2
    1ce0:	31 05       	cpc	r19, r1
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <GPIO_setupPortDirection+0x3e>
    1ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	61 f0       	breq	.+24     	; 0x1d04 <GPIO_setupPortDirection+0x54>
    1cec:	1e c0       	rjmp	.+60     	; 0x1d2a <GPIO_setupPortDirection+0x7a>
    1cee:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf2:	22 30       	cpi	r18, 0x02	; 2
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	81 f0       	breq	.+32     	; 0x1d18 <GPIO_setupPortDirection+0x68>
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	83 30       	cpi	r24, 0x03	; 3
    1cfe:	91 05       	cpc	r25, r1
    1d00:	81 f0       	breq	.+32     	; 0x1d22 <GPIO_setupPortDirection+0x72>
    1d02:	13 c0       	rjmp	.+38     	; 0x1d2a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d04:	ea e3       	ldi	r30, 0x3A	; 58
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	80 83       	st	Z, r24
    1d0c:	0e c0       	rjmp	.+28     	; 0x1d2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d0e:	e7 e3       	ldi	r30, 0x37	; 55
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	80 83       	st	Z, r24
    1d16:	09 c0       	rjmp	.+18     	; 0x1d2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d18:	e4 e3       	ldi	r30, 0x34	; 52
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	80 83       	st	Z, r24
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d22:	e1 e3       	ldi	r30, 0x31	; 49
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d2a:	0f 90       	pop	r0
    1d2c:	0f 90       	pop	r0
    1d2e:	0f 90       	pop	r0
    1d30:	0f 90       	pop	r0
    1d32:	cf 91       	pop	r28
    1d34:	df 91       	pop	r29
    1d36:	08 95       	ret

00001d38 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d38:	df 93       	push	r29
    1d3a:	cf 93       	push	r28
    1d3c:	00 d0       	rcall	.+0      	; 0x1d3e <GPIO_writePort+0x6>
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <GPIO_writePort+0x8>
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	84 30       	cpi	r24, 0x04	; 4
    1d4c:	90 f5       	brcc	.+100    	; 0x1db2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	3c 83       	std	Y+4, r19	; 0x04
    1d56:	2b 83       	std	Y+3, r18	; 0x03
    1d58:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5c:	81 30       	cpi	r24, 0x01	; 1
    1d5e:	91 05       	cpc	r25, r1
    1d60:	d1 f0       	breq	.+52     	; 0x1d96 <GPIO_writePort+0x5e>
    1d62:	2b 81       	ldd	r18, Y+3	; 0x03
    1d64:	3c 81       	ldd	r19, Y+4	; 0x04
    1d66:	22 30       	cpi	r18, 0x02	; 2
    1d68:	31 05       	cpc	r19, r1
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <GPIO_writePort+0x3e>
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	61 f0       	breq	.+24     	; 0x1d8c <GPIO_writePort+0x54>
    1d74:	1e c0       	rjmp	.+60     	; 0x1db2 <GPIO_writePort+0x7a>
    1d76:	2b 81       	ldd	r18, Y+3	; 0x03
    1d78:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7a:	22 30       	cpi	r18, 0x02	; 2
    1d7c:	31 05       	cpc	r19, r1
    1d7e:	81 f0       	breq	.+32     	; 0x1da0 <GPIO_writePort+0x68>
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	9c 81       	ldd	r25, Y+4	; 0x04
    1d84:	83 30       	cpi	r24, 0x03	; 3
    1d86:	91 05       	cpc	r25, r1
    1d88:	81 f0       	breq	.+32     	; 0x1daa <GPIO_writePort+0x72>
    1d8a:	13 c0       	rjmp	.+38     	; 0x1db2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d8c:	eb e3       	ldi	r30, 0x3B	; 59
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	80 83       	st	Z, r24
    1d94:	0e c0       	rjmp	.+28     	; 0x1db2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d96:	e8 e3       	ldi	r30, 0x38	; 56
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	80 83       	st	Z, r24
    1d9e:	09 c0       	rjmp	.+18     	; 0x1db2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1da0:	e5 e3       	ldi	r30, 0x35	; 53
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	80 83       	st	Z, r24
    1da8:	04 c0       	rjmp	.+8      	; 0x1db2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1daa:	e2 e3       	ldi	r30, 0x32	; 50
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	cf 91       	pop	r28
    1dbc:	df 91       	pop	r29
    1dbe:	08 95       	ret

00001dc0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	00 d0       	rcall	.+0      	; 0x1dc6 <GPIO_readPort+0x6>
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <GPIO_readPort+0x8>
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1dce:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	84 30       	cpi	r24, 0x04	; 4
    1dd4:	90 f5       	brcc	.+100    	; 0x1e3a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	3c 83       	std	Y+4, r19	; 0x04
    1dde:	2b 83       	std	Y+3, r18	; 0x03
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	9c 81       	ldd	r25, Y+4	; 0x04
    1de4:	81 30       	cpi	r24, 0x01	; 1
    1de6:	91 05       	cpc	r25, r1
    1de8:	d1 f0       	breq	.+52     	; 0x1e1e <GPIO_readPort+0x5e>
    1dea:	2b 81       	ldd	r18, Y+3	; 0x03
    1dec:	3c 81       	ldd	r19, Y+4	; 0x04
    1dee:	22 30       	cpi	r18, 0x02	; 2
    1df0:	31 05       	cpc	r19, r1
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <GPIO_readPort+0x3e>
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	61 f0       	breq	.+24     	; 0x1e14 <GPIO_readPort+0x54>
    1dfc:	1e c0       	rjmp	.+60     	; 0x1e3a <GPIO_readPort+0x7a>
    1dfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1e00:	3c 81       	ldd	r19, Y+4	; 0x04
    1e02:	22 30       	cpi	r18, 0x02	; 2
    1e04:	31 05       	cpc	r19, r1
    1e06:	81 f0       	breq	.+32     	; 0x1e28 <GPIO_readPort+0x68>
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0c:	83 30       	cpi	r24, 0x03	; 3
    1e0e:	91 05       	cpc	r25, r1
    1e10:	81 f0       	breq	.+32     	; 0x1e32 <GPIO_readPort+0x72>
    1e12:	13 c0       	rjmp	.+38     	; 0x1e3a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e14:	e9 e3       	ldi	r30, 0x39	; 57
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	0e c0       	rjmp	.+28     	; 0x1e3a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e1e:	e6 e3       	ldi	r30, 0x36	; 54
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	09 c0       	rjmp	.+18     	; 0x1e3a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e28:	e3 e3       	ldi	r30, 0x33	; 51
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	04 c0       	rjmp	.+8      	; 0x1e3a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e32:	e0 e3       	ldi	r30, 0x30	; 48
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <PWM_Timer0_Init>:
#include<avr/io.h>
#include "pwm.h"
#include "gpio.h"

void PWM_Timer0_Init(uint8 set_duty_cycle)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	0f 92       	push	r0
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    1e56:	e2 e5       	ldi	r30, 0x52	; 82
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; // Set Compare Value
    1e5c:	ec e5       	ldi	r30, 0x5C	; 92
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	89 81       	ldd	r24, Y+1	; 0x01
    1e62:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTA_ID,PIN2_ID,PIN_OUTPUT); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	62 e0       	ldi	r22, 0x02	; 2
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1e6e:	e3 e5       	ldi	r30, 0x53	; 83
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	8a e6       	ldi	r24, 0x6A	; 106
    1e74:	80 83       	st	Z, r24
}
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <__vector_7>:
#include <avr/interrupt.h>

static volatile void (*Timer1_callback)(void) = NULL_PTR;

ISR(TIMER1_COMPA_vect)
{
    1e7e:	1f 92       	push	r1
    1e80:	0f 92       	push	r0
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	0f 92       	push	r0
    1e86:	11 24       	eor	r1, r1
    1e88:	2f 93       	push	r18
    1e8a:	3f 93       	push	r19
    1e8c:	4f 93       	push	r20
    1e8e:	5f 93       	push	r21
    1e90:	6f 93       	push	r22
    1e92:	7f 93       	push	r23
    1e94:	8f 93       	push	r24
    1e96:	9f 93       	push	r25
    1e98:	af 93       	push	r26
    1e9a:	bf 93       	push	r27
    1e9c:	ef 93       	push	r30
    1e9e:	ff 93       	push	r31
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_callback != NULL_PTR)
    1ea8:	80 91 80 00 	lds	r24, 0x0080
    1eac:	90 91 81 00 	lds	r25, 0x0081
    1eb0:	00 97       	sbiw	r24, 0x00	; 0
    1eb2:	29 f0       	breq	.+10     	; 0x1ebe <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer1_callback)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1eb4:	e0 91 80 00 	lds	r30, 0x0080
    1eb8:	f0 91 81 00 	lds	r31, 0x0081
    1ebc:	09 95       	icall
	}
}
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	ff 91       	pop	r31
    1ec4:	ef 91       	pop	r30
    1ec6:	bf 91       	pop	r27
    1ec8:	af 91       	pop	r26
    1eca:	9f 91       	pop	r25
    1ecc:	8f 91       	pop	r24
    1ece:	7f 91       	pop	r23
    1ed0:	6f 91       	pop	r22
    1ed2:	5f 91       	pop	r21
    1ed4:	4f 91       	pop	r20
    1ed6:	3f 91       	pop	r19
    1ed8:	2f 91       	pop	r18
    1eda:	0f 90       	pop	r0
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	0f 90       	pop	r0
    1ee0:	1f 90       	pop	r1
    1ee2:	18 95       	reti

00001ee4 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1ee4:	1f 92       	push	r1
    1ee6:	0f 92       	push	r0
    1ee8:	0f b6       	in	r0, 0x3f	; 63
    1eea:	0f 92       	push	r0
    1eec:	11 24       	eor	r1, r1
    1eee:	2f 93       	push	r18
    1ef0:	3f 93       	push	r19
    1ef2:	4f 93       	push	r20
    1ef4:	5f 93       	push	r21
    1ef6:	6f 93       	push	r22
    1ef8:	7f 93       	push	r23
    1efa:	8f 93       	push	r24
    1efc:	9f 93       	push	r25
    1efe:	af 93       	push	r26
    1f00:	bf 93       	push	r27
    1f02:	ef 93       	push	r30
    1f04:	ff 93       	push	r31
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_callback != NULL_PTR)
    1f0e:	80 91 80 00 	lds	r24, 0x0080
    1f12:	90 91 81 00 	lds	r25, 0x0081
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	29 f0       	breq	.+10     	; 0x1f24 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*Timer1_callback)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1f1a:	e0 91 80 00 	lds	r30, 0x0080
    1f1e:	f0 91 81 00 	lds	r31, 0x0081
    1f22:	09 95       	icall
	}
}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	ff 91       	pop	r31
    1f2a:	ef 91       	pop	r30
    1f2c:	bf 91       	pop	r27
    1f2e:	af 91       	pop	r26
    1f30:	9f 91       	pop	r25
    1f32:	8f 91       	pop	r24
    1f34:	7f 91       	pop	r23
    1f36:	6f 91       	pop	r22
    1f38:	5f 91       	pop	r21
    1f3a:	4f 91       	pop	r20
    1f3c:	3f 91       	pop	r19
    1f3e:	2f 91       	pop	r18
    1f40:	0f 90       	pop	r0
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	0f 90       	pop	r0
    1f46:	1f 90       	pop	r1
    1f48:	18 95       	reti

00001f4a <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	00 d0       	rcall	.+0      	; 0x1f50 <Timer1_init+0x6>
    1f50:	cd b7       	in	r28, 0x3d	; 61
    1f52:	de b7       	in	r29, 0x3e	; 62
    1f54:	9a 83       	std	Y+2, r25	; 0x02
    1f56:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;
    1f58:	ac e4       	ldi	r26, 0x4C	; 76
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	11 96       	adiw	r26, 0x01	; 1
    1f66:	9c 93       	st	X, r25
    1f68:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;
    1f6a:	aa e4       	ldi	r26, 0x4A	; 74
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f70:	fa 81       	ldd	r31, Y+2	; 0x02
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	11 96       	adiw	r26, 0x01	; 1
    1f78:	9c 93       	st	X, r25
    1f7a:	8e 93       	st	-X, r24
	TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    1f7c:	af e4       	ldi	r26, 0x4F	; 79
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	ef e4       	ldi	r30, 0x4F	; 79
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	8c 60       	ori	r24, 0x0C	; 12
    1f88:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF7) | ((Config_Ptr->mode)<<3);
    1f8a:	ae e4       	ldi	r26, 0x4E	; 78
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	ee e4       	ldi	r30, 0x4E	; 78
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	28 2f       	mov	r18, r24
    1f96:	27 7f       	andi	r18, 0xF7	; 247
    1f98:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9c:	85 81       	ldd	r24, Z+5	; 0x05
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	88 0f       	add	r24, r24
    1fa4:	99 1f       	adc	r25, r25
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	88 0f       	add	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	82 2b       	or	r24, r18
    1fb0:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    1fb2:	ae e4       	ldi	r26, 0x4E	; 78
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	ee e4       	ldi	r30, 0x4E	; 78
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	98 7f       	andi	r25, 0xF8	; 248
    1fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc4:	84 81       	ldd	r24, Z+4	; 0x04
    1fc6:	89 2b       	or	r24, r25
    1fc8:	8c 93       	st	X, r24
	if (Config_Ptr->mode == CTC)
    1fca:	e9 81       	ldd	r30, Y+1	; 0x01
    1fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fce:	85 81       	ldd	r24, Z+5	; 0x05
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	41 f4       	brne	.+16     	; 0x1fe4 <Timer1_init+0x9a>
	{
		TIMSK |= (1 << OCIE1A);  // Enable Compare Match A interrupt
    1fd4:	a9 e5       	ldi	r26, 0x59	; 89
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e9 e5       	ldi	r30, 0x59	; 89
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	80 61       	ori	r24, 0x10	; 16
    1fe0:	8c 93       	st	X, r24
    1fe2:	07 c0       	rjmp	.+14     	; 0x1ff2 <Timer1_init+0xa8>
	}
	else
	{
		TIMSK |= (1 << TOIE1);  // Enable Overflow interrupt
    1fe4:	a9 e5       	ldi	r26, 0x59	; 89
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e9 e5       	ldi	r30, 0x59	; 89
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	84 60       	ori	r24, 0x04	; 4
    1ff0:	8c 93       	st	X, r24
	}
}
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	cf 91       	pop	r28
    1ff8:	df 91       	pop	r29
    1ffa:	08 95       	ret

00001ffc <Timer1_deInit>:

void Timer1_deInit(void)
{
    1ffc:	df 93       	push	r29
    1ffe:	cf 93       	push	r28
    2000:	cd b7       	in	r28, 0x3d	; 61
    2002:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    2004:	ec e4       	ldi	r30, 0x4C	; 76
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	11 82       	std	Z+1, r1	; 0x01
    200a:	10 82       	st	Z, r1
	OCR1A=0;
    200c:	ea e4       	ldi	r30, 0x4A	; 74
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	11 82       	std	Z+1, r1	; 0x01
    2012:	10 82       	st	Z, r1
	TCCR1A=0;
    2014:	ef e4       	ldi	r30, 0x4F	; 79
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	10 82       	st	Z, r1
	TCCR1B=0;
    201a:	ee e4       	ldi	r30, 0x4E	; 78
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	10 82       	st	Z, r1
	TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));  // Disable interrupts
    2020:	a9 e5       	ldi	r26, 0x59	; 89
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e9 e5       	ldi	r30, 0x59	; 89
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8b 7e       	andi	r24, 0xEB	; 235
    202c:	8c 93       	st	X, r24
	Timer1_callback = NULL_PTR;
    202e:	10 92 81 00 	sts	0x0081, r1
    2032:	10 92 80 00 	sts	0x0080, r1
}
    2036:	cf 91       	pop	r28
    2038:	df 91       	pop	r29
    203a:	08 95       	ret

0000203c <Timer1_setCallBack>:

void Timer1_setCallBack(void(*b_ptr)(void))
{
    203c:	df 93       	push	r29
    203e:	cf 93       	push	r28
    2040:	00 d0       	rcall	.+0      	; 0x2042 <Timer1_setCallBack+0x6>
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01
	Timer1_callback = b_ptr;
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	9a 81       	ldd	r25, Y+2	; 0x02
    204e:	90 93 81 00 	sts	0x0081, r25
    2052:	80 93 80 00 	sts	0x0080, r24
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <TWI_init+0x6>
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9b 83       	std	Y+3, r25	; 0x03
    206e:	8a 83       	std	Y+2, r24	; 0x02
       General Call Recognition: Off
    TWAR =((Config_Ptr->address)<<1); // my address = 0x01 :)0b00000010
	
    TWCR = (1<<TWEN); /* enable TWI */
	uint8 TWBR_VALUE;
		TWBR_VALUE=(CPU_FREQ/(2*(Config_Ptr->bit_rate))) - (16/2); /*Equation of calculating bit rate and getting the value of TWBR Register*/
    2070:	ea 81       	ldd	r30, Y+2	; 0x02
    2072:	fb 81       	ldd	r31, Y+3	; 0x03
    2074:	81 81       	ldd	r24, Z+1	; 0x01
    2076:	92 81       	ldd	r25, Z+2	; 0x02
    2078:	a3 81       	ldd	r26, Z+3	; 0x03
    207a:	b4 81       	ldd	r27, Z+4	; 0x04
    207c:	9c 01       	movw	r18, r24
    207e:	ad 01       	movw	r20, r26
    2080:	22 0f       	add	r18, r18
    2082:	33 1f       	adc	r19, r19
    2084:	44 1f       	adc	r20, r20
    2086:	55 1f       	adc	r21, r21
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	92 e1       	ldi	r25, 0x12	; 18
    208c:	aa e7       	ldi	r26, 0x7A	; 122
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__udivmodsi4>
    2098:	da 01       	movw	r26, r20
    209a:	c9 01       	movw	r24, r18
    209c:	88 50       	subi	r24, 0x08	; 8
    209e:	89 83       	std	Y+1, r24	; 0x01
		TWSR = 0x00;
    20a0:	e1 e2       	ldi	r30, 0x21	; 33
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	10 82       	st	Z, r1
	    TWBR = TWBR_VALUE;
    20a6:	e0 e2       	ldi	r30, 0x20	; 32
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	80 83       	st	Z, r24


	    /* Two Wire Bus address my address if any master device want to call me: 0xA (used in case this MC is a slave device)
	       General Call Recognition: Off */
	    TWAR = (Config_Ptr->address << 1) ; // my address = 0xA :)
    20ae:	a2 e2       	ldi	r26, 0x22	; 34
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	ea 81       	ldd	r30, Y+2	; 0x02
    20b4:	fb 81       	ldd	r31, Y+3	; 0x03
    20b6:	80 81       	ld	r24, Z
    20b8:	88 0f       	add	r24, r24
    20ba:	8c 93       	st	X, r24

	    TWCR = (1<<TWEN); /* enable TWI */
    20bc:	e6 e5       	ldi	r30, 0x56	; 86
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	84 e0       	ldi	r24, 0x04	; 4
    20c2:	80 83       	st	Z, r24
}
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	0f 90       	pop	r0
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	08 95       	ret

000020d0 <TWI_start>:

void TWI_start(void)
{
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    20d8:	e6 e5       	ldi	r30, 0x56	; 86
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	84 ea       	ldi	r24, 0xA4	; 164
    20de:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    20e0:	e6 e5       	ldi	r30, 0x56	; 86
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	88 23       	and	r24, r24
    20e8:	dc f7       	brge	.-10     	; 0x20e0 <TWI_start+0x10>
}
    20ea:	cf 91       	pop	r28
    20ec:	df 91       	pop	r29
    20ee:	08 95       	ret

000020f0 <TWI_stop>:

void TWI_stop(void)
{
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    20f8:	e6 e5       	ldi	r30, 0x56	; 86
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	84 e9       	ldi	r24, 0x94	; 148
    20fe:	80 83       	st	Z, r24
}
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	0f 92       	push	r0
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
    2110:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2112:	e3 e2       	ldi	r30, 0x23	; 35
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	89 81       	ldd	r24, Y+1	; 0x01
    2118:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    211a:	e6 e5       	ldi	r30, 0x56	; 86
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	84 e8       	ldi	r24, 0x84	; 132
    2120:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2122:	e6 e5       	ldi	r30, 0x56	; 86
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	88 23       	and	r24, r24
    212a:	dc f7       	brge	.-10     	; 0x2122 <TWI_writeByte+0x1c>
}
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    213c:	e6 e5       	ldi	r30, 0x56	; 86
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	84 ec       	ldi	r24, 0xC4	; 196
    2142:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2144:	e6 e5       	ldi	r30, 0x56	; 86
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	88 23       	and	r24, r24
    214c:	dc f7       	brge	.-10     	; 0x2144 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    214e:	e3 e2       	ldi	r30, 0x23	; 35
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
}
    2154:	cf 91       	pop	r28
    2156:	df 91       	pop	r29
    2158:	08 95       	ret

0000215a <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    215a:	df 93       	push	r29
    215c:	cf 93       	push	r28
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2162:	e6 e5       	ldi	r30, 0x56	; 86
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	84 e8       	ldi	r24, 0x84	; 132
    2168:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    216a:	e6 e5       	ldi	r30, 0x56	; 86
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 23       	and	r24, r24
    2172:	dc f7       	brge	.-10     	; 0x216a <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2174:	e3 e2       	ldi	r30, 0x23	; 35
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
}
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2180:	df 93       	push	r29
    2182:	cf 93       	push	r28
    2184:	0f 92       	push	r0
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    218a:	e1 e2       	ldi	r30, 0x21	; 33
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	88 7f       	andi	r24, 0xF8	; 248
    2192:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2194:	89 81       	ldd	r24, Y+1	; 0x01
}
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <UART_init+0x6>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <UART_init+0x8>
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
		uint16 ubrr_value = 0;
    21ae:	1a 82       	std	Y+2, r1	; 0x02
    21b0:	19 82       	std	Y+1, r1	; 0x01

		/* U2X = 1 for double transmission speed */
		UCSRA = (1<<U2X);
    21b2:	eb e2       	ldi	r30, 0x2B	; 43
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	82 e0       	ldi	r24, 0x02	; 2
    21b8:	80 83       	st	Z, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
		UCSRB = (1<<RXEN) | (1<<TXEN);
    21ba:	ea e2       	ldi	r30, 0x2A	; 42
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	88 e1       	ldi	r24, 0x18	; 24
    21c0:	80 83       	st	Z, r24
		/************************** UCSRC Description **************************
		 * URSEL   = 1 The URSEL must be one when writing the UCSRC
		 * UMSEL   = 0 Asynchronous Operation
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
		UCSRC |= (1<<URSEL);
    21c2:	a0 e4       	ldi	r26, 0x40	; 64
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	e0 e4       	ldi	r30, 0x40	; 64
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	80 81       	ld	r24, Z
    21cc:	80 68       	ori	r24, 0x80	; 128
    21ce:	8c 93       	st	X, r24
		UCSRC &= ~(1<<UMSEL);
    21d0:	a0 e4       	ldi	r26, 0x40	; 64
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	e0 e4       	ldi	r30, 0x40	; 64
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	8f 7b       	andi	r24, 0xBF	; 191
    21dc:	8c 93       	st	X, r24
		UCSRC = (UCSRC&0xF9) | (Config_Ptr->bit_data); /* Choosing Character Size */
    21de:	a0 e4       	ldi	r26, 0x40	; 64
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e0 e4       	ldi	r30, 0x40	; 64
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	80 81       	ld	r24, Z
    21e8:	98 2f       	mov	r25, r24
    21ea:	99 7f       	andi	r25, 0xF9	; 249
    21ec:	eb 81       	ldd	r30, Y+3	; 0x03
    21ee:	fc 81       	ldd	r31, Y+4	; 0x04
    21f0:	80 81       	ld	r24, Z
    21f2:	89 2b       	or	r24, r25
    21f4:	8c 93       	st	X, r24
		UCSRC = (UCSRC&0xCF) | (Config_Ptr->parity);   /* Choosing Parity */
    21f6:	a0 e4       	ldi	r26, 0x40	; 64
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e0 e4       	ldi	r30, 0x40	; 64
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	98 2f       	mov	r25, r24
    2202:	9f 7c       	andi	r25, 0xCF	; 207
    2204:	eb 81       	ldd	r30, Y+3	; 0x03
    2206:	fc 81       	ldd	r31, Y+4	; 0x04
    2208:	81 81       	ldd	r24, Z+1	; 0x01
    220a:	89 2b       	or	r24, r25
    220c:	8c 93       	st	X, r24
		UCSRC = (UCSRC&0xF7) | ((Config_Ptr->stop_bit)<<3); /* Choosing Number of Stop Bits */
    220e:	a0 e4       	ldi	r26, 0x40	; 64
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	e0 e4       	ldi	r30, 0x40	; 64
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	28 2f       	mov	r18, r24
    221a:	27 7f       	andi	r18, 0xF7	; 247
    221c:	eb 81       	ldd	r30, Y+3	; 0x03
    221e:	fc 81       	ldd	r31, Y+4	; 0x04
    2220:	82 81       	ldd	r24, Z+2	; 0x02
    2222:	88 2f       	mov	r24, r24
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	88 0f       	add	r24, r24
    222c:	99 1f       	adc	r25, r25
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	82 2b       	or	r24, r18
    2234:	8c 93       	st	X, r24

		/* Calculate the UBRR register value */
		ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2236:	eb 81       	ldd	r30, Y+3	; 0x03
    2238:	fc 81       	ldd	r31, Y+4	; 0x04
    223a:	83 81       	ldd	r24, Z+3	; 0x03
    223c:	94 81       	ldd	r25, Z+4	; 0x04
    223e:	cc 01       	movw	r24, r24
    2240:	a0 e0       	ldi	r26, 0x00	; 0
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	aa 1f       	adc	r26, r26
    224a:	bb 1f       	adc	r27, r27
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	aa 1f       	adc	r26, r26
    2252:	bb 1f       	adc	r27, r27
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	aa 1f       	adc	r26, r26
    225a:	bb 1f       	adc	r27, r27
    225c:	9c 01       	movw	r18, r24
    225e:	ad 01       	movw	r20, r26
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	92 e1       	ldi	r25, 0x12	; 18
    2264:	aa e7       	ldi	r26, 0x7A	; 122
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	bc 01       	movw	r22, r24
    226a:	cd 01       	movw	r24, r26
    226c:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <__udivmodsi4>
    2270:	da 01       	movw	r26, r20
    2272:	c9 01       	movw	r24, r18
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01

		/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
		UBRRH = ubrr_value>>8;
    227a:	e0 e4       	ldi	r30, 0x40	; 64
    227c:	f0 e0       	ldi	r31, 0x00	; 0
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	89 2f       	mov	r24, r25
    2284:	99 27       	eor	r25, r25
    2286:	80 83       	st	Z, r24
		UBRRL = ubrr_value;
    2288:	e9 e2       	ldi	r30, 0x29	; 41
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	80 83       	st	Z, r24
}
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	cf 91       	pop	r28
    229a:	df 91       	pop	r29
    229c:	08 95       	ret

0000229e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    229e:	df 93       	push	r29
    22a0:	cf 93       	push	r28
    22a2:	0f 92       	push	r0
    22a4:	cd b7       	in	r28, 0x3d	; 61
    22a6:	de b7       	in	r29, 0x3e	; 62
    22a8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    22aa:	eb e2       	ldi	r30, 0x2B	; 43
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	80 72       	andi	r24, 0x20	; 32
    22b6:	90 70       	andi	r25, 0x00	; 0
    22b8:	00 97       	sbiw	r24, 0x00	; 0
    22ba:	b9 f3       	breq	.-18     	; 0x22aa <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    22bc:	ec e2       	ldi	r30, 0x2C	; 44
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    22d4:	eb e2       	ldi	r30, 0x2B	; 43
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	88 23       	and	r24, r24
    22dc:	dc f7       	brge	.-10     	; 0x22d4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    22de:	ec e2       	ldi	r30, 0x2C	; 44
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
}
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <UART_sendString+0x6>
    22f0:	0f 92       	push	r0
    22f2:	cd b7       	in	r28, 0x3d	; 61
    22f4:	de b7       	in	r29, 0x3e	; 62
    22f6:	9b 83       	std	Y+3, r25	; 0x03
    22f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22fa:	19 82       	std	Y+1, r1	; 0x01
    22fc:	0e c0       	rjmp	.+28     	; 0x231a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	9b 81       	ldd	r25, Y+3	; 0x03
    2308:	fc 01       	movw	r30, r24
    230a:	e2 0f       	add	r30, r18
    230c:	f3 1f       	adc	r31, r19
    230e:	80 81       	ld	r24, Z
    2310:	0e 94 4f 11 	call	0x229e	; 0x229e <UART_sendByte>
		i++;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
    2316:	8f 5f       	subi	r24, 0xFF	; 255
    2318:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	28 2f       	mov	r18, r24
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	fc 01       	movw	r30, r24
    2326:	e2 0f       	add	r30, r18
    2328:	f3 1f       	adc	r31, r19
    232a:	80 81       	ld	r24, Z
    232c:	88 23       	and	r24, r24
    232e:	39 f7       	brne	.-50     	; 0x22fe <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    233c:	0f 93       	push	r16
    233e:	1f 93       	push	r17
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <UART_receiveString+0xa>
    2346:	0f 92       	push	r0
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	9b 83       	std	Y+3, r25	; 0x03
    234e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2350:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	28 2f       	mov	r18, r24
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	9b 81       	ldd	r25, Y+3	; 0x03
    235c:	8c 01       	movw	r16, r24
    235e:	02 0f       	add	r16, r18
    2360:	13 1f       	adc	r17, r19
    2362:	0e 94 66 11 	call	0x22cc	; 0x22cc <UART_recieveByte>
    2366:	f8 01       	movw	r30, r16
    2368:	80 83       	st	Z, r24
    236a:	0f c0       	rjmp	.+30     	; 0x238a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	8f 5f       	subi	r24, 0xFF	; 255
    2370:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	8a 81       	ldd	r24, Y+2	; 0x02
    237a:	9b 81       	ldd	r25, Y+3	; 0x03
    237c:	8c 01       	movw	r16, r24
    237e:	02 0f       	add	r16, r18
    2380:	13 1f       	adc	r17, r19
    2382:	0e 94 66 11 	call	0x22cc	; 0x22cc <UART_recieveByte>
    2386:	f8 01       	movw	r30, r16
    2388:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	9b 81       	ldd	r25, Y+3	; 0x03
    2394:	fc 01       	movw	r30, r24
    2396:	e2 0f       	add	r30, r18
    2398:	f3 1f       	adc	r31, r19
    239a:	80 81       	ld	r24, Z
    239c:	83 32       	cpi	r24, 0x23	; 35
    239e:	31 f7       	brne	.-52     	; 0x236c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	8a 81       	ldd	r24, Y+2	; 0x02
    23a8:	9b 81       	ldd	r25, Y+3	; 0x03
    23aa:	fc 01       	movw	r30, r24
    23ac:	e2 0f       	add	r30, r18
    23ae:	f3 1f       	adc	r31, r19
    23b0:	10 82       	st	Z, r1
}
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	08 95       	ret

000023c2 <__udivmodsi4>:
    23c2:	a1 e2       	ldi	r26, 0x21	; 33
    23c4:	1a 2e       	mov	r1, r26
    23c6:	aa 1b       	sub	r26, r26
    23c8:	bb 1b       	sub	r27, r27
    23ca:	fd 01       	movw	r30, r26
    23cc:	0d c0       	rjmp	.+26     	; 0x23e8 <__udivmodsi4_ep>

000023ce <__udivmodsi4_loop>:
    23ce:	aa 1f       	adc	r26, r26
    23d0:	bb 1f       	adc	r27, r27
    23d2:	ee 1f       	adc	r30, r30
    23d4:	ff 1f       	adc	r31, r31
    23d6:	a2 17       	cp	r26, r18
    23d8:	b3 07       	cpc	r27, r19
    23da:	e4 07       	cpc	r30, r20
    23dc:	f5 07       	cpc	r31, r21
    23de:	20 f0       	brcs	.+8      	; 0x23e8 <__udivmodsi4_ep>
    23e0:	a2 1b       	sub	r26, r18
    23e2:	b3 0b       	sbc	r27, r19
    23e4:	e4 0b       	sbc	r30, r20
    23e6:	f5 0b       	sbc	r31, r21

000023e8 <__udivmodsi4_ep>:
    23e8:	66 1f       	adc	r22, r22
    23ea:	77 1f       	adc	r23, r23
    23ec:	88 1f       	adc	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	1a 94       	dec	r1
    23f2:	69 f7       	brne	.-38     	; 0x23ce <__udivmodsi4_loop>
    23f4:	60 95       	com	r22
    23f6:	70 95       	com	r23
    23f8:	80 95       	com	r24
    23fa:	90 95       	com	r25
    23fc:	9b 01       	movw	r18, r22
    23fe:	ac 01       	movw	r20, r24
    2400:	bd 01       	movw	r22, r26
    2402:	cf 01       	movw	r24, r30
    2404:	08 95       	ret

00002406 <__prologue_saves__>:
    2406:	2f 92       	push	r2
    2408:	3f 92       	push	r3
    240a:	4f 92       	push	r4
    240c:	5f 92       	push	r5
    240e:	6f 92       	push	r6
    2410:	7f 92       	push	r7
    2412:	8f 92       	push	r8
    2414:	9f 92       	push	r9
    2416:	af 92       	push	r10
    2418:	bf 92       	push	r11
    241a:	cf 92       	push	r12
    241c:	df 92       	push	r13
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	ca 1b       	sub	r28, r26
    2430:	db 0b       	sbc	r29, r27
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	09 94       	ijmp

0000243e <__epilogue_restores__>:
    243e:	2a 88       	ldd	r2, Y+18	; 0x12
    2440:	39 88       	ldd	r3, Y+17	; 0x11
    2442:	48 88       	ldd	r4, Y+16	; 0x10
    2444:	5f 84       	ldd	r5, Y+15	; 0x0f
    2446:	6e 84       	ldd	r6, Y+14	; 0x0e
    2448:	7d 84       	ldd	r7, Y+13	; 0x0d
    244a:	8c 84       	ldd	r8, Y+12	; 0x0c
    244c:	9b 84       	ldd	r9, Y+11	; 0x0b
    244e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2450:	b9 84       	ldd	r11, Y+9	; 0x09
    2452:	c8 84       	ldd	r12, Y+8	; 0x08
    2454:	df 80       	ldd	r13, Y+7	; 0x07
    2456:	ee 80       	ldd	r14, Y+6	; 0x06
    2458:	fd 80       	ldd	r15, Y+5	; 0x05
    245a:	0c 81       	ldd	r16, Y+4	; 0x04
    245c:	1b 81       	ldd	r17, Y+3	; 0x03
    245e:	aa 81       	ldd	r26, Y+2	; 0x02
    2460:	b9 81       	ldd	r27, Y+1	; 0x01
    2462:	ce 0f       	add	r28, r30
    2464:	d1 1d       	adc	r29, r1
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	ed 01       	movw	r28, r26
    2472:	08 95       	ret

00002474 <_exit>:
    2474:	f8 94       	cli

00002476 <__stop_program>:
    2476:	ff cf       	rjmp	.-2      	; 0x2476 <__stop_program>
